'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var providers = require('@ethersproject/providers');
var WalletConnectProvider = require('@walletconnect/ethereum-provider');
var base = require('../../../dist/base-e94df7f6.cjs.prod.js');
var utils = require('ethers/lib/utils');
require('eventemitter3');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var WalletConnectProvider__default = /*#__PURE__*/_interopDefault(WalletConnectProvider);

const switchChainAllowedRegex = /(rainbow)/i;
class WalletConnectConnector extends base.Connector {
  id = 'walletConnect';
  name = 'WalletConnect';
  ready = true;
  #provider;

  constructor(config) {
    super(config);
  }

  async connect() {
    try {
      const provider = this.getProvider(true);
      provider.on('accountsChanged', this.onAccountsChanged);
      provider.on('chainChanged', this.onChainChanged);
      provider.on('disconnect', this.onDisconnect);
      const accounts = await provider.enable();
      const account = utils.getAddress(accounts[0]);
      const id = await this.getChainId();
      const unsupported = this.isChainUnsupported(id); // Not all WalletConnect options support programmatic chain switching
      // Only enable for wallet options that do

      const walletName = provider.connector?.peerMeta?.name ?? '';
      if (switchChainAllowedRegex.test(walletName)) this.switchChain = this.#switchChain;
      return {
        account,
        chain: {
          id,
          unsupported
        },
        provider: new providers.Web3Provider(provider)
      };
    } catch (error) {
      if (/user closed modal/i.test(error.message)) throw new base.UserRejectedRequestError();
      throw error;
    }
  }

  async disconnect() {
    const provider = this.getProvider();
    await provider.disconnect();
    provider.removeListener('accountsChanged', this.onAccountsChanged);
    provider.removeListener('chainChanged', this.onChainChanged);
    provider.removeListener('disconnect', this.onDisconnect);
    typeof localStorage !== 'undefined' && localStorage.removeItem('walletconnect');
  }

  async getAccount() {
    const provider = this.getProvider();
    const accounts = provider.accounts; // return checksum address

    return utils.getAddress(accounts[0]);
  }

  async getChainId() {
    const provider = this.getProvider();
    const chainId = base.normalizeChainId(provider.chainId);
    return chainId;
  }

  getProvider(create) {
    if (!this.#provider || create) this.#provider = new WalletConnectProvider__default["default"](this.options);
    return this.#provider;
  }

  async getSigner() {
    const provider = this.getProvider();
    const account = await this.getAccount();
    return new providers.Web3Provider(provider).getSigner(account);
  }

  async isAuthorized() {
    try {
      const account = await this.getAccount();
      return !!account;
    } catch {
      return false;
    }
  }

  async #switchChain(chainId) {
    const provider = this.getProvider();
    const id = utils.hexValue(chainId);

    try {
      await provider.request({
        method: 'wallet_switchEthereumChain',
        params: [{
          chainId: id
        }]
      });
      const chains = [...this.chains, ...base.allChains];
      return chains.find(x => x.id === chainId);
    } catch (error) {
      const message = typeof error === 'string' ? error : error?.message;
      if (/user rejected request/i.test(message)) throw new base.UserRejectedRequestError();else throw new base.SwitchChainError();
    }
  }

  onAccountsChanged = accounts => {
    if (accounts.length === 0) this.emit('disconnect');else this.emit('change', {
      account: utils.getAddress(accounts[0])
    });
  };
  onChainChanged = chainId => {
    const id = base.normalizeChainId(chainId);
    const unsupported = this.isChainUnsupported(id);
    this.emit('change', {
      chain: {
        id,
        unsupported
      }
    });
  };
  onDisconnect = () => {
    this.emit('disconnect');
  };
}

exports.WalletConnectConnector = WalletConnectConnector;
