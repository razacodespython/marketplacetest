'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var base = require('./base-e94df7f6.cjs.prod.js');
var providers = require('@ethersproject/providers');
var utils = require('ethers/lib/utils');
var ethers = require('ethers');
require('eventemitter3');

const erc1155ABI = [{
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '_owner',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_id',
    type: 'uint256'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'uint256',
    name: '_id',
    type: 'uint256'
  }],
  name: 'uri',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}];

const erc20ABI = [{
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_spender',
    type: 'address'
  }, {
    name: '_value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_from',
    type: 'address'
  }, {
    name: '_to',
    type: 'address'
  }, {
    name: '_value',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: 'balance',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_to',
    type: 'address'
  }, {
    name: '_value',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '_owner',
    type: 'address'
  }, {
    name: '_spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  payable: true,
  stateMutability: 'payable',
  type: 'fallback'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}];

const erc721ABI = [{
  inputs: [{
    internalType: 'uint256',
    name: 'tokenId',
    type: 'uint256'
  }],
  name: 'ownerOf',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'tokenId',
    type: 'uint256'
  }],
  name: 'tokenURI',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}];

// https://github.com/ethers-io/ethers.js/blob/master/packages/units/src.ts/index.ts#L10-L18
const units = ['wei', 'kwei', 'mwei', 'gwei', 'szabo', 'finney', 'ether'];

const getInjectedName = ethereum => {
  if (!ethereum) return 'Injected';
  if (ethereum.isMetaMask) return 'MetaMask';
  if (ethereum.isCoinbaseWallet) return 'Coinbase Wallet';
  if (ethereum.isFrame) return 'Frame';
  if (ethereum.isTally) return 'Tally';
  return 'Injected';
};

const shimKey = 'wagmi.shimDisconnect';
class InjectedConnector extends base.Connector {
  id = 'injected';
  ready = typeof window != 'undefined' && !!window.ethereum;
  #provider;

  constructor(config) {
    super({ ...config,
      options: config?.options
    });
    let name = 'Injected';
    if (typeof window !== 'undefined') name = getInjectedName(window.ethereum);
    this.name = name;
  }

  async connect() {
    try {
      const provider = this.getProvider();
      if (!provider) throw new base.ConnectorNotFoundError();

      if (provider.on) {
        provider.on('accountsChanged', this.onAccountsChanged);
        provider.on('chainChanged', this.onChainChanged);
        if (!this.options?.shimChainChangedDisconnect) provider.on('disconnect', this.onDisconnect);
      }

      const account = await this.getAccount();
      const id = await this.getChainId();
      const unsupported = this.isChainUnsupported(id);
      if (this.options?.shimDisconnect) typeof localStorage !== 'undefined' && localStorage.setItem(shimKey, 'true');
      return {
        account,
        chain: {
          id,
          unsupported
        },
        provider
      };
    } catch (error) {
      if (error.code === 4001) throw new base.UserRejectedRequestError();
      throw error;
    }
  }

  async disconnect() {
    const provider = this.getProvider();
    if (!provider?.removeListener) return;
    provider.removeListener('accountsChanged', this.onAccountsChanged);
    provider.removeListener('chainChanged', this.onChainChanged);
    provider.removeListener('disconnect', this.onDisconnect);
    if (this.options?.shimDisconnect) typeof localStorage !== 'undefined' && localStorage.removeItem(shimKey);
  }

  async getAccount() {
    const provider = this.getProvider();
    if (!provider) throw new base.ConnectorNotFoundError();
    const accounts = await provider.request({
      method: 'eth_requestAccounts'
    }); // return checksum address

    return utils.getAddress(accounts[0]);
  }

  async getChainId() {
    const provider = this.getProvider();
    if (!provider) throw new base.ConnectorNotFoundError();
    return await provider.request({
      method: 'eth_chainId'
    }).then(base.normalizeChainId);
  }

  getProvider() {
    if (typeof window !== 'undefined' && !!window.ethereum) this.#provider = window.ethereum;
    return this.#provider;
  }

  async getSigner() {
    const provider = this.getProvider();
    const account = await this.getAccount();
    return new providers.Web3Provider(provider).getSigner(account);
  }

  async isAuthorized() {
    try {
      if (this.options?.shimDisconnect && typeof localStorage !== 'undefined' && !localStorage.getItem(shimKey)) return false;
      const provider = this.getProvider();
      if (!provider) throw new base.ConnectorNotFoundError();
      const accounts = await provider.request({
        method: 'eth_accounts'
      });
      const account = accounts[0];
      return !!account;
    } catch {
      return false;
    }
  }

  async switchChain(chainId) {
    const provider = this.getProvider();
    if (!provider) throw new base.ConnectorNotFoundError();
    const id = utils.hexValue(chainId);

    try {
      await provider.request({
        method: 'wallet_switchEthereumChain',
        params: [{
          chainId: id
        }]
      });
      const chains = [...this.chains, ...base.allChains];
      return chains.find(x => x.id === chainId);
    } catch (error) {
      // Indicates chain is not added to MetaMask
      if (error.code === 4902) {
        try {
          const chain = this.chains.find(x => x.id === chainId);
          if (!chain) throw new base.ChainNotConfiguredError();
          await provider.request({
            method: 'wallet_addEthereumChain',
            params: [{
              chainId: id,
              chainName: chain.name,
              nativeCurrency: chain.nativeCurrency,
              rpcUrls: chain.rpcUrls,
              blockExplorerUrls: chain.blockExplorers?.map(x => x.url)
            }]
          });
          return chain;
        } catch (addError) {
          throw new base.AddChainError();
        }
      } else if (error.code === 4001) throw new base.UserRejectedRequestError();else throw new base.SwitchChainError();
    }
  }

  async watchAsset({
    address,
    decimals = 18,
    image,
    symbol
  }) {
    const provider = this.getProvider();
    if (!provider) throw new base.ConnectorNotFoundError();
    await provider.request({
      method: 'wallet_watchAsset',
      params: {
        type: 'ERC20',
        options: {
          address,
          decimals,
          image,
          symbol
        }
      }
    });
  }

  onAccountsChanged = accounts => {
    if (accounts.length === 0) this.emit('disconnect');else this.emit('change', {
      account: utils.getAddress(accounts[0])
    });
  };
  onChainChanged = chainId => {
    const id = base.normalizeChainId(chainId);
    const unsupported = this.isChainUnsupported(id);
    this.emit('change', {
      chain: {
        id,
        unsupported
      }
    });
  };
  onDisconnect = () => {
    this.emit('disconnect');
    if (this.options?.shimDisconnect) typeof localStorage !== 'undefined' && localStorage.removeItem(shimKey);
  };
}

const balanceAction = async ({
  chains = [...base.defaultChains, ...base.defaultL2Chains],
  config,
  provider
}) => {
  const unit = config.formatUnits ?? 'ether';

  if (config.token) {
    const contract = new ethers.ethers.Contract(config.token, erc20ABI, provider);
    const [value, decimals, symbol] = await Promise.all([contract.balanceOf(config.addressOrName), contract.decimals(), contract.symbol()]);
    return {
      decimals,
      formatted: ethers.utils.formatUnits(value, unit),
      symbol,
      unit,
      value
    };
  }

  const value = await provider.getBalance(config.addressOrName);
  const chain = chains.find(x => x.id === provider.network.chainId);
  return {
    decimals: chain?.nativeCurrency?.decimals ?? 18,
    formatted: ethers.utils.formatUnits(value, unit),
    symbol: chain?.nativeCurrency?.symbol ?? 'ETH',
    unit,
    value
  };
};

exports.AddChainError = base.AddChainError;
exports.ChainNotConfiguredError = base.ChainNotConfiguredError;
exports.Connector = base.Connector;
exports.ConnectorAlreadyConnectedError = base.ConnectorAlreadyConnectedError;
exports.ConnectorNotFoundError = base.ConnectorNotFoundError;
exports.SwitchChainError = base.SwitchChainError;
exports.UserRejectedRequestError = base.UserRejectedRequestError;
exports.allChains = base.allChains;
exports.chain = base.chain;
exports.defaultChains = base.defaultChains;
exports.defaultL2Chains = base.defaultL2Chains;
exports.developmentChains = base.developmentChains;
exports.normalizeChainId = base.normalizeChainId;
exports.InjectedConnector = InjectedConnector;
exports.balanceAction = balanceAction;
exports.erc1155ABI = erc1155ABI;
exports.erc20ABI = erc20ABI;
exports.erc721ABI = erc721ABI;
exports.units = units;
