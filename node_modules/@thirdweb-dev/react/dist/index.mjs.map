{"version":3,"sources":["../src/Users/jnsdls/Code/react/src/Provider.tsx","../src/hooks/Users/jnsdls/Code/react/src/hooks/useSigner.ts","../src/constants/Users/jnsdls/Code/react/src/constants/chain.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useContract.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useEditionDrop.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useEdition.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useNFTDrop.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useMarketplace.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useNFTCollection.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/usePack.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useTokenModule.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useVoteModule.ts","../src/hooks/contracts/Users/jnsdls/Code/react/src/hooks/contracts/useSplit.ts","../src/hooks/Users/jnsdls/Code/react/src/hooks/useDisconnect.ts","../src/hooks/Users/jnsdls/Code/react/src/hooks/useConnect.ts","../src/hooks/Users/jnsdls/Code/react/src/hooks/useAddress.ts","../src/hooks/Users/jnsdls/Code/react/src/hooks/useReadonlySDK.ts","../src/hooks/connectors/Users/jnsdls/Code/react/src/hooks/connectors/useMetamask.ts","../src/hooks/connectors/Users/jnsdls/Code/react/src/hooks/connectors/useWalletConnect.ts","../src/hooks/connectors/Users/jnsdls/Code/react/src/hooks/connectors/useWalletLink.ts","../src/hooks/Users/jnsdls/Code/react/src/hooks/useChainId.ts","../src/hooks/Users/jnsdls/Code/react/src/hooks/useNetworkMismatch.ts","../src/Users/jnsdls/Code/react/src/index.ts"],"sourcesContent":["import React, { createContext, useEffect, useMemo } from \"react\";\nimport { ThirdwebSDK, SDKOptions, IStorage } from \"@thirdweb-dev/sdk\";\nimport {\n  WagmiProvider,\n  ProviderProps as WagmiproviderProps,\n  useProvider,\n} from \"wagmi\";\nimport { useSigner } from \"./hooks/useSigner\";\nimport invariant from \"tiny-invariant\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\nimport { WalletLinkConnector } from \"wagmi/connectors/walletLink\";\nimport {\n  Chain,\n  defaultSupportedChains,\n  SupportedChain,\n} from \"./constants/chain\";\n\n/**\n * @internal\n */\nexport type InjectedConnectorType =\n  | \"injected\"\n  | \"metamask\"\n  | { name: \"injected\" | \"metamask\"; options?: InjectedConnector[\"options\"] };\n\n/**\n * @internal\n */\nexport type WalletConnectConnectorType =\n  | \"walletConnect\"\n  | { name: \"walletConnect\"; options: WalletConnectConnector[\"options\"] };\n\n/**\n * @internal\n */\nexport type WalletLinkConnectorType =\n  | \"walletLink\"\n  | \"coinbase\"\n  | {\n      name: \"walletLink\" | \"coinbase\";\n      options: WalletLinkConnector[\"options\"];\n    };\n\n/**\n * @internal\n */\nexport type WalletConnector =\n  | InjectedConnectorType\n  | WalletConnectConnectorType\n  | WalletLinkConnectorType;\n\n/**\n * @internal\n */\nexport type ChainRpc<TSupportedChain extends SupportedChain> = Record<\n  TSupportedChain extends Chain ? TSupportedChain[\"id\"] : TSupportedChain,\n  string\n>;\n\n/**\n * the metadata to pass to wallet connection dialog (may show up during the wallet-connection process)\n * @remarks this is only used for wallet connect and wallet link, metamask does not support it\n * @public\n */\nexport interface DAppMetaData {\n  /**\n   * the name of your app\n   */\n  name: string;\n  /**\n   * optional - a description of your app\n   */\n  description?: string;\n  /**\n   * optional - a url that points to a logo (or favicon) of your app\n   */\n  logoUrl?: string;\n  /**\n   * optional - the url where your app is hosted\n   */\n  url?: string;\n  /**\n   * optional - whether to show the connect dialog in darkmode or not\n   */\n  isDarkMode?: boolean;\n}\n\n/**\n * The possible props for the ThirdwebProvider.\n */\nexport interface ThirdwebProviderProps<\n  TSupportedChain extends SupportedChain = SupportedChain,\n> {\n  /**\n   * The {@link SDKOptions | Thirdweb SDK Options} to pass to the thirdweb SDK\n   * comes with sensible defaults\n   */\n  sdkOptions?: SDKOptions;\n  /**\n   * An array of chainIds or {@link Chain} objects that the dApp supports\n   * If not provided, all chains supported by the SDK will be supported by default\n   */\n  supportedChains?: TSupportedChain[];\n  /**\n   * An array of connector types (strings) or wallet connector objects that the dApp supports\n   * If not provided, will default to metamask (injected), wallet connect and walletlink (coinbase wallet) with sensible defaults\n   */\n  walletConnectors?: WalletConnector[];\n  /**\n   * A partial map of chainIds to rpc urls to use for certain chains\n   * If not provided, will default to the rpcUrls of the chain objects for the supported chains\n   */\n  chainRpc?: Partial<ChainRpc<TSupportedChain>>;\n  /**\n   * Metadata to pass to wallet connect and walletlink wallet connect. (Used to show *which* dApp is being connected to in mobile wallets that support it)\n   * Defaults to just the name being passed as `thirdweb powered dApp`.\n   */\n  dAppMeta?: DAppMetaData;\n  /**\n   * The chainId that your dApp is running on.\n   * While this *can* be `undefined` it is required to be passed. Passing `undefined` will cause no SDK to be instantiated.\n   * When passing a chainId, it **must** be part of the `supportedChains` array.\n   */\n  desiredChainId: TSupportedChain extends Chain\n    ? TSupportedChain[\"id\"]\n    : TSupportedChain | undefined;\n\n  /**\n   * The storage interface to use with the sdk.\n   */\n  storageInterface?: IStorage;\n}\n\nconst defaultChainRpc: ThirdwebProviderProps[\"chainRpc\"] = {\n  1: \"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\",\n  4: \"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\",\n  5: \"https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\",\n  137: \"https://polygon-rpc.com\",\n  250: \"https://rpc.ftm.tools\",\n  43114: \"https://api.avax.network/ext/bc/C/rpc\",\n  80001: \"https://rpc-mumbai.maticvigil.com\",\n};\n\nconst defaultdAppMeta: DAppMetaData = {\n  name: \"thirdweb powered dApp\",\n};\n\nconst defaultWalletConnectors: Required<\n  ThirdwebProviderProps[\"walletConnectors\"]\n> = [\"metamask\", \"walletConnect\", \"walletLink\"];\n\n/**\n *\n * The `<ThirdwebProvider />` component, you need to wrap your application with this provider to use the thirdweb react sdk.\n *\n *\n *\n * @example\n * Wrap your application with the Provider\n * ```jsx title=\"App.jsx\"\n * import { ThirdwebProvider, ChainId } from \"@thirdweb-dev/react\";\n *\n * const App = () => {\n *   return (\n *     <ThirdwebProvider desiredChainId={ChainId.Mainnet}>\n *       <YourApp />\n *     </ThirdwebProvider>\n *   );\n * };\n```\n *\n * @public\n *\n */\nexport const ThirdwebProvider = <\n  TSupportedChain extends SupportedChain = SupportedChain,\n>({\n  sdkOptions,\n  chainRpc = defaultChainRpc,\n  supportedChains = defaultSupportedChains.map(\n    (c) => c.id,\n  ) as TSupportedChain[],\n  walletConnectors = defaultWalletConnectors,\n  dAppMeta = defaultdAppMeta,\n  desiredChainId,\n  storageInterface,\n  children,\n}: React.PropsWithChildren<ThirdwebProviderProps<TSupportedChain>>) => {\n  // construct the wagmi options\n\n  const _supporrtedChains = useMemo(() => {\n    return supportedChains\n      .map((c) => {\n        if (typeof c === \"number\") {\n          return defaultSupportedChains.find((sc) => sc.id === c);\n        }\n        return c as Chain;\n      })\n      .filter((c) => c !== undefined) as Chain[];\n  }, [supportedChains]);\n\n  const _rpcUrlMap = useMemo(() => {\n    return _supporrtedChains.reduce((prev, curr) => {\n      prev[curr.id] =\n        curr.id in chainRpc\n          ? chainRpc[curr.id as keyof ChainRpc<TSupportedChain>] ||\n            curr.rpcUrls[0]\n          : curr.rpcUrls[0];\n      return prev;\n    }, {} as Record<number, string>);\n  }, [chainRpc, _supporrtedChains]);\n\n  const wagmiProps: WagmiproviderProps = useMemo(() => {\n    const walletConnectClientMeta = {\n      name: dAppMeta.name,\n      url: dAppMeta.url || \"\",\n      icons: [dAppMeta.logoUrl || \"\"],\n      description: dAppMeta.description || \"\",\n    };\n\n    const walletLinkClientMeta = {\n      appName: dAppMeta.name,\n      appLogoUrl: dAppMeta.logoUrl,\n      darkMode: dAppMeta.isDarkMode,\n    };\n\n    return {\n      autoConnect: true,\n      connectorStorageKey: \"tw:provider:connectors\",\n      connectors: ({ chainId }: { chainId?: number }) => {\n        return walletConnectors\n          .map((connector) => {\n            // injected connector\n            if (\n              (typeof connector === \"string\" &&\n                (connector === \"injected\" || connector === \"metamask\")) ||\n              (typeof connector === \"object\" &&\n                (connector.name === \"injected\" ||\n                  connector.name === \"metamask\"))\n            ) {\n              return new InjectedConnector({\n                options:\n                  typeof connector === \"string\"\n                    ? { shimDisconnect: true }\n                    : connector.options,\n                chains: _supporrtedChains,\n              });\n            }\n            if (\n              (typeof connector === \"string\" &&\n                connector === \"walletConnect\") ||\n              (typeof connector === \"object\" &&\n                connector.name === \"walletConnect\")\n            ) {\n              return new WalletConnectConnector({\n                options:\n                  typeof connector === \"string\"\n                    ? {\n                        chainId,\n                        rpc: _rpcUrlMap,\n                        clientMeta: walletConnectClientMeta,\n                        qrcode: true,\n                      }\n                    : {\n                        chainId,\n                        rpc: _rpcUrlMap,\n                        clientMeta: walletConnectClientMeta,\n                        qrcode: true,\n                        ...connector.options,\n                      },\n                chains: _supporrtedChains,\n              });\n            }\n            if (\n              (typeof connector === \"string\" &&\n                (connector === \"coinbase\" || connector === \"walletLink\")) ||\n              (typeof connector === \"object\" &&\n                (connector.name === \"coinbase\" ||\n                  connector.name === \"walletLink\"))\n            ) {\n              return new WalletLinkConnector({\n                chains: _supporrtedChains,\n                options:\n                  typeof connector === \"string\"\n                    ? {\n                        ...walletLinkClientMeta,\n                        jsonRpcUrl: _rpcUrlMap[chainId || -1] || undefined,\n                      }\n                    : {\n                        ...walletLinkClientMeta,\n                        jsonRpcUrl: _rpcUrlMap[chainId || -1] || undefined,\n                        ...connector.options,\n                      },\n              });\n            }\n            return null;\n          })\n          .filter((c) => c !== null);\n      },\n    } as WagmiproviderProps;\n  }, [walletConnectors, _supporrtedChains, dAppMeta]);\n\n  const defaultSdkReadUrl =\n    _rpcUrlMap[(desiredChainId || -1) as keyof typeof _rpcUrlMap];\n\n  const sdkOptionsWithDefaults = useMemo(() => {\n    const opts: SDKOptions = sdkOptions;\n    return {\n      ...opts,\n      readonlySettings: {\n        ...(opts?.readonlySettings || {}),\n        rpcUrl: opts?.readonlySettings?.rpcUrl\n          ? opts.readonlySettings.rpcUrl\n          : defaultSdkReadUrl,\n      },\n    };\n  }, [sdkOptions, defaultSdkReadUrl]);\n\n  return (\n    <WagmiProvider {...wagmiProps}>\n      <ThirdwebSDKProvider\n        desiredChainId={desiredChainId}\n        sdkOptions={sdkOptionsWithDefaults}\n        storageInterface={storageInterface}\n      >\n        {children}\n      </ThirdwebSDKProvider>\n    </WagmiProvider>\n  );\n};\n\ninterface SDKContext {\n  sdk?: ThirdwebSDK;\n  _inProvider?: true;\n  desiredChainId: number;\n}\n\nconst ThirdwebSDKContext = createContext<SDKContext>({ desiredChainId: -1 });\n\nconst ThirdwebSDKProvider: React.FC<\n  Pick<\n    ThirdwebProviderProps,\n    \"desiredChainId\" | \"sdkOptions\" | \"storageInterface\"\n  >\n> = ({ sdkOptions, desiredChainId, storageInterface, children }) => {\n  const provider = useProvider();\n  const signer = useSigner();\n\n  const sdk = useMemo(() => {\n    if (!desiredChainId || typeof window === \"undefined\") {\n      return undefined;\n    }\n    const _sdk = new ThirdwebSDK(provider, sdkOptions, storageInterface);\n    (_sdk as any)._chainId = desiredChainId;\n    return _sdk;\n  }, [provider, sdkOptions, storageInterface, desiredChainId]);\n\n  useEffect(() => {\n    if (signer && sdk && (sdk as any)._chainId === desiredChainId) {\n      sdk.updateSignerOrProvider(signer);\n    }\n  }, [signer, sdk, desiredChainId]);\n\n  const ctxValue = useMemo(\n    () => ({\n      sdk,\n      desiredChainId: desiredChainId || -1,\n      _inProvider: true as const,\n    }),\n    [sdk],\n  );\n\n  return (\n    <ThirdwebSDKContext.Provider value={ctxValue}>\n      {children}\n    </ThirdwebSDKContext.Provider>\n  );\n};\n\n/**\n *\n * @returns {@link ThirdwebSDK}\n * @internal\n */\nexport function useSDK(): ThirdwebSDK | undefined {\n  const ctx = React.useContext(ThirdwebSDKContext);\n  invariant(\n    ctx._inProvider,\n    \"useSDK must be called from within a ThirdwebProvider, did you forget to wrap your app in a <ThirdwebProvider />?\",\n  );\n  return ctx.sdk;\n}\n\n/**\n *\n * @internal\n */\nexport function useDesiredChainId(): number {\n  const ctx = React.useContext(ThirdwebSDKContext);\n  invariant(\n    ctx._inProvider,\n    \"useDesiredChainId must be called from within a ThirdwebProvider, did you forget to wrap your app in a <ThirdwebProvider />?\",\n  );\n  return ctx.desiredChainId;\n}\n","import { useAccount, useNetwork, useSigner as useWagmiSigner } from \"wagmi\";\nimport { Signer } from \"ethers\";\nimport { useEffect, useRef } from \"react\";\n\n/**\n *\n * @internal\n */\nexport function useSigner() {\n  const [signer, getSigner] = useWagmiSigner();\n  const [account] = useAccount();\n  const [network] = useNetwork();\n\n  const _getSignerPromise = useRef<ReturnType<typeof getSigner> | null>(null);\n\n  const address = account.data?.address;\n  const chainId = network.data.chain?.id;\n\n  const previousAddress = usePrevious(account.data?.address);\n  const previousChainId = usePrevious(network.data?.chain?.id);\n\n  useEffect(() => {\n    if (address !== previousAddress || chainId !== previousChainId) {\n      if (!_getSignerPromise.current) {\n        return;\n      } else {\n        _getSignerPromise.current = getSigner().finally(() => {\n          _getSignerPromise.current = null;\n        });\n      }\n    }\n  }, [address, chainId, previousAddress, previousChainId]);\n\n  return Signer.isSigner(signer.data) ? signer.data : undefined;\n}\n\nfunction usePrevious<TVal>(value: TVal): TVal | undefined {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<TVal>();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import type { Chain as WagmiChain } from \"wagmi\";\n\nexport type Chain = WagmiChain;\n\nconst chain = {\n  mainnet: {\n    id: 1,\n    name: \"Mainnet\",\n    nativeCurrency: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpcUrls: [\"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"],\n    blockExplorers: [\n      {\n        name: \"Etherscan\",\n        url: \"https://etherscan.io\",\n      },\n    ],\n  },\n  // ropsten: {\n  //   id: 3,\n  //   name: \"Ropsten\",\n  //   nativeCurrency: {\n  //     name: \"Ropsten Ether\",\n  //     symbol: \"ropETH\",\n  //     decimals: 18,\n  //   },\n  //   rpcUrls: [\"https://ropsten.infura.io/v3\"],\n  //   blockExplorers: [\n  //     {\n  //       name: \"Etherscan\",\n  //       url: \"https://ropsten.etherscan.io\",\n  //     },\n  //   ],\n  //   testnet: true,\n  // },\n  rinkeby: {\n    id: 4,\n    name: \"Rinkeby\",\n    nativeCurrency: {\n      name: \"Rinkeby Ether\",\n      symbol: \"rETH\",\n      decimals: 18,\n    },\n    rpcUrls: [\"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"],\n    blockExplorers: [\n      {\n        name: \"Etherscan\",\n        url: \"https://rinkeby.etherscan.io\",\n      },\n    ],\n    testnet: true,\n  },\n  goerli: {\n    id: 5,\n    name: \"Goerli\",\n    nativeCurrency: {\n      name: \"Goerli Ether\",\n      symbol: \"gETH\",\n      decimals: 18,\n    },\n    rpcUrls: [\"https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"],\n    blockExplorers: [\n      {\n        name: \"Etherscan\",\n        url: \"https://goerli.etherscan.io\",\n      },\n    ],\n    testnet: true,\n  },\n  // kovan: {\n  //   id: 42,\n  //   name: \"Kovan\",\n  //   nativeCurrency: {\n  //     name: \"Kovan Ether\",\n  //     symbol: \"kETH\",\n  //     decimals: 18,\n  //   },\n  //   rpcUrls: [\"https://kovan.infura.io/v3\"],\n  //   blockExplorers: [\n  //     {\n  //       name: \"Etherscan\",\n  //       url: \"https://kovan.etherscan.io\",\n  //     },\n  //   ],\n  //   testnet: true,\n  // },\n  // optimisticEthereum: {\n  //   id: 10,\n  //   name: \"Optimistic Ethereum\",\n  //   nativeCurrency: {\n  //     name: \"Optimistic Ether\",\n  //     symbol: \"OETH\",\n  //     decimals: 18,\n  //   },\n  //   rpcUrls: [\"https://mainnet.optimism.io\"],\n  //   blockExplorers: [\n  //     {\n  //       name: \"Etherscan\",\n  //       url: \"https://optimistic.etherscan.io\",\n  //     },\n  //   ],\n  // },\n  // optimisticKovan: {\n  //   id: 69,\n  //   name: \"Optimistic Kovan\",\n  //   nativeCurrency: {\n  //     name: \"Kovan Ether\",\n  //     symbol: \"KOR\",\n  //     decimals: 18,\n  //   },\n  //   rpcUrls: [\"https://kovan.optimism.io\"],\n  //   blockExplorers: [\n  //     {\n  //       name: \"Etherscan\",\n  //       url: \"https://optimistic.etherscan.io\",\n  //     },\n  //   ],\n  //   testnet: true,\n  // },\n  polygonMainnet: {\n    id: 137,\n    name: \"Polygon Mainnet\",\n    nativeCurrency: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18,\n    },\n    rpcUrls: [\n      \"https://polygon-rpc.com\",\n      \"https://rpc-mainnet.matic.network\",\n      \"https://matic-mainnet.chainstacklabs.com\",\n      \"https://rpc-mainnet.maticvigil.com\",\n      \"https://rpc-mainnet.matic.quiknode.pro\",\n      \"https://matic-mainnet-full-rpc.bwarelabs.com\",\n    ],\n    blockExplorers: [\n      {\n        name: \"Polygonscan\",\n        url: \"https://polygonscan.com\",\n      },\n    ],\n  },\n  polygonTestnetMumbai: {\n    id: 80001,\n    name: \"Polygon Testnet Mumbai\",\n    nativeCurrency: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18,\n    },\n    rpcUrls: [\n      \"https://matic-mumbai.chainstacklabs.com\",\n      \"https://rpc-mumbai.maticvigil.com\",\n      \"https://matic-testnet-archive-rpc.bwarelabs.com\",\n    ],\n    blockExplorers: [\n      {\n        name: \"Polygonscan\",\n        url: \"https://mumbai.polygonscan.com\",\n      },\n    ],\n    testnet: true,\n  },\n  // arbitrumOne: {\n  //   id: 42161,\n  //   name: \"Arbitrum One\",\n  //   nativeCurrency: {\n  //     name: \"Ether\",\n  //     symbol: \"AETH\",\n  //     decimals: 18,\n  //   },\n  //   rpcUrls: [\"https://arb1.arbitrum.io/rpc\"],\n  //   blockExplorers: [\n  //     {\n  //       name: \"Arbiscan\",\n  //       url: \"https://arbiscan.io\",\n  //     },\n  //     {\n  //       name: \"Arbitrum Explorer\",\n  //       url: \"https://explorer.arbitrum.io\",\n  //     },\n  //   ],\n  // },\n  // arbitrumRinkeby: {\n  //   id: 421611,\n  //   name: \"Rinkeby Arbitrum\",\n  //   nativeCurrency: {\n  //     name: \"Rinkeby ArbEther\",\n  //     symbol: \"rinkArbETH\",\n  //     decimals: 18,\n  //   },\n  //   rpcUrls: [\"https://rinkeby.arbitrum.io/rpc\"],\n  //   blockExplorers: [\n  //     {\n  //       name: \"Arbitrum Explorer\",\n  //       url: \"https://rinkeby-explorer.arbitrum.io\",\n  //     },\n  //   ],\n  //   testnet: true,\n  // },\n  avalanche: {\n    id: 43114,\n    name: \"Avalanche\",\n    nativeCurrency: {\n      name: \"AVAX\",\n      symbol: \"AVAX\",\n      decimals: 18,\n    },\n    rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n    blockExplorers: [\n      {\n        name: \"SnowTrace\",\n        url: \"https://snowtrace.io/\",\n      },\n    ],\n    testnet: false,\n  },\n  // avalancheFuji: {\n  //   id: 43113,\n  //   name: \"Avalanche FUJI\",\n  //   nativeCurrency: {\n  //     name: \"AVAX\",\n  //     symbol: \"AVAX\",\n  //     decimals: 18,\n  //   },\n  //   rpcUrls: [\"https://api.avax-test.network/ext/bc/C/rpc\"],\n  //   blockExplorers: [\n  //     {\n  //       name: \"SnowTrace\",\n  //       url: \"https://testnet.snowtrace.io/\",\n  //     },\n  //   ],\n  //   testnet: true,\n  // },\n  // custom added (non wagmi standard)\n  fantom: {\n    id: 250,\n    name: \"Fantom Opera\",\n    nativeCurrency: {\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18,\n    },\n    rpcUrls: [\"https://rpc.ftm.tools\"],\n    blockExplorerUrls: [\n      {\n        name: \"FTMScan\",\n        url: \"https://ftmscan.com/\",\n      },\n    ],\n    testnet: false,\n  },\n} as const;\nexport const defaultSupportedChains = Object.values(chain);\n\nexport type SupportedChainId = typeof defaultSupportedChains[number][\"id\"];\n\nexport type SupportedChain = SupportedChainId | Chain;\n","import { ContractForContractType, ContractType } from \"@thirdweb-dev/sdk\";\nimport { useSDK } from \"../../Provider\";\n\n/**\n * @internal\n * @param contractType - the module type\n * @param contractAddress - the module address\n * @returns the instance of the module for the given type and address\n */\nexport function useContract<TContractType extends ContractType>(\n  contractType: TContractType,\n  contractAddress?: string,\n): ContractForContractType<TContractType> | undefined {\n  const sdk = useSDK();\n  if (!sdk || !contractAddress) {\n    return undefined;\n  }\n  return sdk.getContract(contractAddress, contractType);\n}\n","import { EditionDrop } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a Edition Drop contract instance\n * @param contractAddress - the address of the Edition Drop contract, found in your thirdweb dashboard\n * @public\n */\nexport function useEditionDrop(\n  contractAddress?: string,\n): EditionDrop | undefined {\n  return useContract(\"edition-drop\", contractAddress);\n}\n","import { Edition } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a Edition contract instance\n * @param contractAddress - the address of the Edition contract, found in your thirdweb dashboard\n * @public\n */\nexport function useEdition(contractAddress?: string): Edition | undefined {\n  return useContract(\"edition\", contractAddress);\n}\n","import { NFTDrop } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a NFT Drop contract instance\n * @param contractAddress - the address of the NFT Drop contract, found in your thirdweb dashboard\n * @public\n */\nexport function useNFTDrop(contractAddress?: string): NFTDrop | undefined {\n  return useContract(\"nft-drop\", contractAddress);\n}\n","import { Marketplace } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a Marketplace contract instance\n * @param contractAddress - the address of the Marketplace contract, found in your thirdweb dashboard\n * @public\n */\nexport function useMarketplace(\n  contractAddress?: string,\n): Marketplace | undefined {\n  return useContract(\"marketplace\", contractAddress);\n}\n","import { NFTCollection } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a NFT Collection contract instance\n * @param contractAddress - the address of the NFT Collection contract, found in your thirdweb dashboard\n * @public\n */\nexport function useNFTCollection(\n  contractAddress?: string,\n): NFTCollection | undefined {\n  return useContract(\"nft-collection\", contractAddress);\n}\n","import { Pack } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a Pack contract instance\n * @param contractAddress - the address of the Pack contract, found in your thirdweb dashboard\n * @public\n */\nexport function usePack(contractAddress?: string): Pack | undefined {\n  return useContract(\"pack\", contractAddress);\n}\n","import { Token } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a Token contract instance\n * @param contractAddress - the address of the Token contract, found in your thirdweb dashboard\n * @public\n */\nexport function useToken(contractAddress?: string): Token | undefined {\n  return useContract(\"token\", contractAddress);\n}\n","import { Vote } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a Vote contract instance\n * @param contractAddress - the address of the Vote contract, found in your thirdweb dashboard\n * @public\n */\nexport function useVote(contractAddress?: string): Vote | undefined {\n  return useContract(\"vote\", contractAddress);\n}\n","import { Split } from \"@thirdweb-dev/sdk\";\nimport { useContract } from \"./useContract\";\n\n/**\n * Returns a Split contract instance\n * @param contractAddress - the address of the Split contract, found in your thirdweb dashboard\n * @public\n */\nexport function useSplit(contractAddress?: string): Split | undefined {\n  return useContract(\"split\", contractAddress);\n}\n","import { useAccount } from \"wagmi\";\n\n/**\n *\n * @returns a function to call to disconnect the connected wallet\n * @public\n */\nexport function useDisconnect() {\n  const [, disconnect] = useAccount();\n\n  return disconnect;\n}\n","import { useConnect as useWagmiConnect } from \"wagmi\";\n\n/**\n * for now just re-exported\n * @internal\n */\nexport function useConnect() {\n  return useWagmiConnect();\n}\n","import { useAccount } from \"wagmi\";\n\n/**\n *\n * @returns the address of the connected wallet\n * @public\n */\nexport function useAddress(): string | undefined {\n  const [account] = useAccount();\n  return account.data?.address;\n}\n","import { IStorage, SDKOptions, ThirdwebSDK } from \"@thirdweb-dev/sdk\";\nimport { useMemo } from \"react\";\n\n/**\n * @internal\n */\nexport function useReadonlySDK(\n  readonlyRpcUrl: string,\n  sdkOptions: SDKOptions,\n  storageInterface?: IStorage,\n): ThirdwebSDK {\n  return useMemo(() => {\n    return new ThirdwebSDK(\n      readonlyRpcUrl,\n      {\n        ...sdkOptions,\n        readonlySettings: {\n          ...sdkOptions?.readonlySettings,\n          rpcUrl: readonlyRpcUrl,\n        },\n      },\n      storageInterface,\n    );\n  }, [readonlyRpcUrl, sdkOptions]);\n}\n","import invariant from \"tiny-invariant\";\nimport { useConnect } from \"../useConnect\";\n\n/**\n * Convienience hook for connecting to a metamask (or any injected) wallet\n * @returns a function that will prompt the user to connect their metamask wallet\n * @public\n */\nexport function useMetamask() {\n  const [connectors, connect] = useConnect();\n  if (connectors.loading) {\n    return () => Promise.reject(\"Metamask connector not ready to be used, yet\");\n  }\n  const connector = connectors.data.connectors.find((c) => c.id === \"injected\");\n  invariant(\n    connector,\n    \"Metamask connector not found, please make sure it is provided to your <ThirdwebProvider />\",\n  );\n\n  return () => connect(connector);\n}\n","import invariant from \"tiny-invariant\";\nimport { useConnect } from \"../useConnect\";\n\n/**\n * Convienience hook for connecting to a wallet via WalletConnect\n * @returns a function that will prompt the user to connect their wallet via WalletConnect\n * @public\n */\nexport function useWalletConnect() {\n  const [connectors, connect] = useConnect();\n  if (connectors.loading) {\n    return () =>\n      Promise.reject(\"WalletConnect connector not ready to be used, yet\");\n  }\n  const connector = connectors.data.connectors.find(\n    (c) => c.id === \"walletConnect\",\n  );\n  invariant(\n    connector,\n    \"WalletConnect connector not found, please make sure it is provided to your <ThirdwebProvider />\",\n  );\n\n  return () => connect(connector);\n}\n","import invariant from \"tiny-invariant\";\nimport { useConnect } from \"../useConnect\";\n\n/**\n * Convienience hook for connecting to a wallet via WalletLink (coinbase wallet)\n * @returns a function that will prompt the user to connect their wallet via WalletLink (coinbase wallet)\n * @internal\n */\nexport function useWalletLink() {\n  const [connectors, connect] = useConnect();\n  if (connectors.loading) {\n    return () =>\n      Promise.reject(\n        \"WalletLink / Coinbase connector not ready to be used, yet\",\n      );\n  }\n  const connector = connectors.data.connectors.find(\n    (c) => c.id === \"walletLink\",\n  );\n  invariant(\n    connector,\n    \"WalletLink / Coinbase connector not found, please make sure it is provided to your <ThirdwebProvider />\",\n  );\n\n  return () => connect(connector);\n}\n\n/**\n * Convienience hook for connecting to a wallet via Coinbase Wallet\n * @returns a function that will prompt the user to connect their wallet via Coinbase Wallet\n * @public\n */\nexport function useCoinbaseWallet() {\n  return useWalletLink();\n}\n","import { useNetwork } from \"wagmi\";\n\n/**\n *\n * @returns the chainId of the connected network\n * @public\n */\nexport function useChainId(): number | undefined {\n  return useNetwork()[\"0\"].data.chain?.id;\n}\n","import { useDesiredChainId } from \"../Provider\";\nimport { useChainId } from \"./useChainId\";\n\n/**\n *\n * @returns `true` if the chainId of the connected wallet is different from the desired chainId passed into <ThirdwebProvider />\n * @returns `false` if the chainId of the wallet is the same as the desired chainId passed into <ThirdwebProvider />\n * @public\n */\nexport function useNetworkMismatch() {\n  const desiredChainId = useDesiredChainId();\n  const activeChainId = useChainId();\n\n  if (desiredChainId === -1) {\n    console.warn(\n      \"useNetworkMismatch: desiredChainId is -1, this is not a valid chainId, please provide a valid chainId to the <ThirdwebProvider />\",\n    );\n    return false;\n  }\n  if (!activeChainId) {\n    console.debug(\n      \"useNetworkMismatch: activeChainId is undefined, this means there is no wallet connected yet\",\n    );\n    return false;\n  }\n  // check if the chainIds are different\n  return desiredChainId !== activeChainId;\n}\n","export * from \"./Provider\";\nexport * from \"./hooks/contracts\";\nexport * from \"./hooks/useDisconnect\";\nexport * from \"./hooks/useConnect\";\nexport * from \"./hooks/useSigner\";\nexport * from \"./hooks/useAddress\";\nexport * from \"./hooks/useReadonlySDK\";\nexport * from \"./hooks/connectors/useMetamask\";\nexport * from \"./hooks/connectors/useWalletConnect\";\nexport * from \"./hooks/connectors/useWalletLink\";\nexport * from \"./hooks/useChainId\";\nexport * from \"./hooks/useNetworkMismatch\";\n\n// re-exports\nexport { defaultChains, defaultL2Chains, useAccount, useNetwork } from \"wagmi\";\nexport { ChainId, IpfsStorage } from \"@thirdweb-dev/sdk\";\n"],"mappings":"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","names":[]}