{"version":3,"sources":["../typechain/ERC20VotesUpgradeable.ts"],"sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport { FunctionFragment, Result, EventFragment } from \"@ethersproject/abi\";\nimport { Listener, Provider } from \"@ethersproject/providers\";\nimport { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from \"./common\";\n\nexport declare namespace ERC20VotesUpgradeable {\n  export type CheckpointStruct = {\n    fromBlock: BigNumberish;\n    votes: BigNumberish;\n  };\n\n  export type CheckpointStructOutput = [number, BigNumber] & {\n    fromBlock: number;\n    votes: BigNumber;\n  };\n}\n\nexport interface ERC20VotesUpgradeableInterface extends utils.Interface {\n  contractName: string | \"ERC20VotesUpgradeable\";\n  functions: {\n    \"DOMAIN_SEPARATOR()\": FunctionFragment;\n    \"allowance(address,address)\": FunctionFragment;\n    \"approve(address,uint256)\": FunctionFragment;\n    \"balanceOf(address)\": FunctionFragment;\n    \"checkpoints(address,uint32)\": FunctionFragment;\n    \"decimals()\": FunctionFragment;\n    \"decreaseAllowance(address,uint256)\": FunctionFragment;\n    \"delegate(address)\": FunctionFragment;\n    \"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\": FunctionFragment;\n    \"delegates(address)\": FunctionFragment;\n    \"getPastTotalSupply(uint256)\": FunctionFragment;\n    \"getPastVotes(address,uint256)\": FunctionFragment;\n    \"getVotes(address)\": FunctionFragment;\n    \"increaseAllowance(address,uint256)\": FunctionFragment;\n    \"name()\": FunctionFragment;\n    \"nonces(address)\": FunctionFragment;\n    \"numCheckpoints(address)\": FunctionFragment;\n    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": FunctionFragment;\n    \"symbol()\": FunctionFragment;\n    \"totalSupply()\": FunctionFragment;\n    \"transfer(address,uint256)\": FunctionFragment;\n    \"transferFrom(address,address,uint256)\": FunctionFragment;\n  };\n\n  encodeFunctionData(\n    functionFragment: \"DOMAIN_SEPARATOR\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"allowance\",\n    values: [string, string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"approve\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"balanceOf\", values: [string]): string;\n  encodeFunctionData(\n    functionFragment: \"checkpoints\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"decimals\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"decreaseAllowance\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"delegate\", values: [string]): string;\n  encodeFunctionData(\n    functionFragment: \"delegateBySig\",\n    values: [\n      string,\n      BigNumberish,\n      BigNumberish,\n      BigNumberish,\n      BytesLike,\n      BytesLike\n    ]\n  ): string;\n  encodeFunctionData(functionFragment: \"delegates\", values: [string]): string;\n  encodeFunctionData(\n    functionFragment: \"getPastTotalSupply\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getPastVotes\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"getVotes\", values: [string]): string;\n  encodeFunctionData(\n    functionFragment: \"increaseAllowance\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"name\", values?: undefined): string;\n  encodeFunctionData(functionFragment: \"nonces\", values: [string]): string;\n  encodeFunctionData(\n    functionFragment: \"numCheckpoints\",\n    values: [string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"permit\",\n    values: [\n      string,\n      string,\n      BigNumberish,\n      BigNumberish,\n      BigNumberish,\n      BytesLike,\n      BytesLike\n    ]\n  ): string;\n  encodeFunctionData(functionFragment: \"symbol\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"totalSupply\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transfer\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transferFrom\",\n    values: [string, string, BigNumberish]\n  ): string;\n\n  decodeFunctionResult(\n    functionFragment: \"DOMAIN_SEPARATOR\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"allowance\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"approve\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"balanceOf\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"checkpoints\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"decimals\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"decreaseAllowance\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"delegate\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"delegateBySig\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"delegates\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"getPastTotalSupply\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"getPastVotes\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"getVotes\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"increaseAllowance\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"name\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"nonces\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"numCheckpoints\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"permit\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"symbol\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"totalSupply\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"transfer\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"transferFrom\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"Approval(address,address,uint256)\": EventFragment;\n    \"DelegateChanged(address,address,address)\": EventFragment;\n    \"DelegateVotesChanged(address,uint256,uint256)\": EventFragment;\n    \"Transfer(address,address,uint256)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"Approval\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"DelegateChanged\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"DelegateVotesChanged\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Transfer\"): EventFragment;\n}\n\nexport type ApprovalEvent = TypedEvent<\n  [string, string, BigNumber],\n  { owner: string; spender: string; value: BigNumber }\n>;\n\nexport type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;\n\nexport type DelegateChangedEvent = TypedEvent<\n  [string, string, string],\n  { delegator: string; fromDelegate: string; toDelegate: string }\n>;\n\nexport type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;\n\nexport type DelegateVotesChangedEvent = TypedEvent<\n  [string, BigNumber, BigNumber],\n  { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }\n>;\n\nexport type DelegateVotesChangedEventFilter =\n  TypedEventFilter<DelegateVotesChangedEvent>;\n\nexport type TransferEvent = TypedEvent<\n  [string, string, BigNumber],\n  { from: string; to: string; value: BigNumber }\n>;\n\nexport type TransferEventFilter = TypedEventFilter<TransferEvent>;\n\nexport interface ERC20VotesUpgradeable extends BaseContract {\n  contractName: string | \"ERC20VotesUpgradeable\";\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: ERC20VotesUpgradeableInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;\n\n    allowance(\n      owner: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    checkpoints(\n      account: string,\n      pos: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[ERC20VotesUpgradeable.CheckpointStructOutput]>;\n\n    decimals(overrides?: CallOverrides): Promise<[number]>;\n\n    decreaseAllowance(\n      spender: string,\n      subtractedValue: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    delegate(\n      delegatee: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    delegateBySig(\n      delegatee: string,\n      nonce: BigNumberish,\n      expiry: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    delegates(account: string, overrides?: CallOverrides): Promise<[string]>;\n\n    getPastTotalSupply(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    getPastVotes(\n      account: string,\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    increaseAllowance(\n      spender: string,\n      addedValue: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    name(overrides?: CallOverrides): Promise<[string]>;\n\n    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    numCheckpoints(\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<[number]>;\n\n    permit(\n      owner: string,\n      spender: string,\n      value: BigNumberish,\n      deadline: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    symbol(overrides?: CallOverrides): Promise<[string]>;\n\n    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n  };\n\n  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;\n\n  allowance(\n    owner: string,\n    spender: string,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  approve(\n    spender: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  checkpoints(\n    account: string,\n    pos: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<ERC20VotesUpgradeable.CheckpointStructOutput>;\n\n  decimals(overrides?: CallOverrides): Promise<number>;\n\n  decreaseAllowance(\n    spender: string,\n    subtractedValue: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  delegate(\n    delegatee: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  delegateBySig(\n    delegatee: string,\n    nonce: BigNumberish,\n    expiry: BigNumberish,\n    v: BigNumberish,\n    r: BytesLike,\n    s: BytesLike,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  delegates(account: string, overrides?: CallOverrides): Promise<string>;\n\n  getPastTotalSupply(\n    blockNumber: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  getPastVotes(\n    account: string,\n    blockNumber: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  increaseAllowance(\n    spender: string,\n    addedValue: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  name(overrides?: CallOverrides): Promise<string>;\n\n  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;\n\n  permit(\n    owner: string,\n    spender: string,\n    value: BigNumberish,\n    deadline: BigNumberish,\n    v: BigNumberish,\n    r: BytesLike,\n    s: BytesLike,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  symbol(overrides?: CallOverrides): Promise<string>;\n\n  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n  transfer(\n    to: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  transferFrom(\n    from: string,\n    to: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;\n\n    allowance(\n      owner: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    checkpoints(\n      account: string,\n      pos: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<ERC20VotesUpgradeable.CheckpointStructOutput>;\n\n    decimals(overrides?: CallOverrides): Promise<number>;\n\n    decreaseAllowance(\n      spender: string,\n      subtractedValue: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;\n\n    delegateBySig(\n      delegatee: string,\n      nonce: BigNumberish,\n      expiry: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    delegates(account: string, overrides?: CallOverrides): Promise<string>;\n\n    getPastTotalSupply(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getPastVotes(\n      account: string,\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    increaseAllowance(\n      spender: string,\n      addedValue: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    name(overrides?: CallOverrides): Promise<string>;\n\n    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;\n\n    permit(\n      owner: string,\n      spender: string,\n      value: BigNumberish,\n      deadline: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    symbol(overrides?: CallOverrides): Promise<string>;\n\n    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n  };\n\n  filters: {\n    \"Approval(address,address,uint256)\"(\n      owner?: string | null,\n      spender?: string | null,\n      value?: null\n    ): ApprovalEventFilter;\n    Approval(\n      owner?: string | null,\n      spender?: string | null,\n      value?: null\n    ): ApprovalEventFilter;\n\n    \"DelegateChanged(address,address,address)\"(\n      delegator?: string | null,\n      fromDelegate?: string | null,\n      toDelegate?: string | null\n    ): DelegateChangedEventFilter;\n    DelegateChanged(\n      delegator?: string | null,\n      fromDelegate?: string | null,\n      toDelegate?: string | null\n    ): DelegateChangedEventFilter;\n\n    \"DelegateVotesChanged(address,uint256,uint256)\"(\n      delegate?: string | null,\n      previousBalance?: null,\n      newBalance?: null\n    ): DelegateVotesChangedEventFilter;\n    DelegateVotesChanged(\n      delegate?: string | null,\n      previousBalance?: null,\n      newBalance?: null\n    ): DelegateVotesChangedEventFilter;\n\n    \"Transfer(address,address,uint256)\"(\n      from?: string | null,\n      to?: string | null,\n      value?: null\n    ): TransferEventFilter;\n    Transfer(\n      from?: string | null,\n      to?: string | null,\n      value?: null\n    ): TransferEventFilter;\n  };\n\n  estimateGas: {\n    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;\n\n    allowance(\n      owner: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    checkpoints(\n      account: string,\n      pos: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    decimals(overrides?: CallOverrides): Promise<BigNumber>;\n\n    decreaseAllowance(\n      spender: string,\n      subtractedValue: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    delegate(\n      delegatee: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    delegateBySig(\n      delegatee: string,\n      nonce: BigNumberish,\n      expiry: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    getPastTotalSupply(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getPastVotes(\n      account: string,\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    increaseAllowance(\n      spender: string,\n      addedValue: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    name(overrides?: CallOverrides): Promise<BigNumber>;\n\n    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    numCheckpoints(\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    permit(\n      owner: string,\n      spender: string,\n      value: BigNumberish,\n      deadline: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    symbol(overrides?: CallOverrides): Promise<BigNumber>;\n\n    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    allowance(\n      owner: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    balanceOf(\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    checkpoints(\n      account: string,\n      pos: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    decreaseAllowance(\n      spender: string,\n      subtractedValue: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    delegate(\n      delegatee: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    delegateBySig(\n      delegatee: string,\n      nonce: BigNumberish,\n      expiry: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    delegates(\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getPastTotalSupply(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getPastVotes(\n      account: string,\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getVotes(\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    increaseAllowance(\n      spender: string,\n      addedValue: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    nonces(\n      owner: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    numCheckpoints(\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    permit(\n      owner: string,\n      spender: string,\n      value: BigNumberish,\n      deadline: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"],"mappings":"odAAA","names":[]}