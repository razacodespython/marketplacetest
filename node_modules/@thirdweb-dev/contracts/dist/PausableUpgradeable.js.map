{"version":3,"sources":["../typechain/PausableUpgradeable.ts"],"sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport { FunctionFragment, Result, EventFragment } from \"@ethersproject/abi\";\nimport { Listener, Provider } from \"@ethersproject/providers\";\nimport { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from \"./common\";\n\nexport interface PausableUpgradeableInterface extends utils.Interface {\n  contractName: string | \"PausableUpgradeable\";\n  functions: {\n    \"paused()\": FunctionFragment;\n  };\n\n  encodeFunctionData(functionFragment: \"paused\", values?: undefined): string;\n\n  decodeFunctionResult(functionFragment: \"paused\", data: BytesLike): Result;\n\n  events: {\n    \"Paused(address)\": EventFragment;\n    \"Unpaused(address)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"Paused\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Unpaused\"): EventFragment;\n}\n\nexport type PausedEvent = TypedEvent<[string], { account: string }>;\n\nexport type PausedEventFilter = TypedEventFilter<PausedEvent>;\n\nexport type UnpausedEvent = TypedEvent<[string], { account: string }>;\n\nexport type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;\n\nexport interface PausableUpgradeable extends BaseContract {\n  contractName: string | \"PausableUpgradeable\";\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: PausableUpgradeableInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    paused(overrides?: CallOverrides): Promise<[boolean]>;\n  };\n\n  paused(overrides?: CallOverrides): Promise<boolean>;\n\n  callStatic: {\n    paused(overrides?: CallOverrides): Promise<boolean>;\n  };\n\n  filters: {\n    \"Paused(address)\"(account?: null): PausedEventFilter;\n    Paused(account?: null): PausedEventFilter;\n\n    \"Unpaused(address)\"(account?: null): UnpausedEventFilter;\n    Unpaused(account?: null): UnpausedEventFilter;\n  };\n\n  estimateGas: {\n    paused(overrides?: CallOverrides): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n  };\n}\n"],"mappings":"odAAA","names":[]}