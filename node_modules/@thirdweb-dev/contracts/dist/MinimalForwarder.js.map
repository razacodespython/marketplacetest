{"version":3,"sources":["../typechain/MinimalForwarder.ts"],"sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  PayableOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport { FunctionFragment, Result } from \"@ethersproject/abi\";\nimport { Listener, Provider } from \"@ethersproject/providers\";\nimport { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from \"./common\";\n\nexport declare namespace MinimalForwarder {\n  export type ForwardRequestStruct = {\n    from: string;\n    to: string;\n    value: BigNumberish;\n    gas: BigNumberish;\n    nonce: BigNumberish;\n    data: BytesLike;\n  };\n\n  export type ForwardRequestStructOutput = [\n    string,\n    string,\n    BigNumber,\n    BigNumber,\n    BigNumber,\n    string\n  ] & {\n    from: string;\n    to: string;\n    value: BigNumber;\n    gas: BigNumber;\n    nonce: BigNumber;\n    data: string;\n  };\n}\n\nexport interface MinimalForwarderInterface extends utils.Interface {\n  contractName: string | \"MinimalForwarder\";\n  functions: {\n    \"execute((address,address,uint256,uint256,uint256,bytes),bytes)\": FunctionFragment;\n    \"getNonce(address)\": FunctionFragment;\n    \"verify((address,address,uint256,uint256,uint256,bytes),bytes)\": FunctionFragment;\n  };\n\n  encodeFunctionData(\n    functionFragment: \"execute\",\n    values: [MinimalForwarder.ForwardRequestStruct, BytesLike]\n  ): string;\n  encodeFunctionData(functionFragment: \"getNonce\", values: [string]): string;\n  encodeFunctionData(\n    functionFragment: \"verify\",\n    values: [MinimalForwarder.ForwardRequestStruct, BytesLike]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"execute\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"getNonce\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"verify\", data: BytesLike): Result;\n\n  events: {};\n}\n\nexport interface MinimalForwarder extends BaseContract {\n  contractName: string | \"MinimalForwarder\";\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: MinimalForwarderInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    execute(\n      req: MinimalForwarder.ForwardRequestStruct,\n      signature: BytesLike,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    verify(\n      req: MinimalForwarder.ForwardRequestStruct,\n      signature: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n  };\n\n  execute(\n    req: MinimalForwarder.ForwardRequestStruct,\n    signature: BytesLike,\n    overrides?: PayableOverrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  verify(\n    req: MinimalForwarder.ForwardRequestStruct,\n    signature: BytesLike,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  callStatic: {\n    execute(\n      req: MinimalForwarder.ForwardRequestStruct,\n      signature: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<[boolean, string]>;\n\n    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    verify(\n      req: MinimalForwarder.ForwardRequestStruct,\n      signature: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n  };\n\n  filters: {};\n\n  estimateGas: {\n    execute(\n      req: MinimalForwarder.ForwardRequestStruct,\n      signature: BytesLike,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    verify(\n      req: MinimalForwarder.ForwardRequestStruct,\n      signature: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    execute(\n      req: MinimalForwarder.ForwardRequestStruct,\n      signature: BytesLike,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    getNonce(\n      from: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    verify(\n      req: MinimalForwarder.ForwardRequestStruct,\n      signature: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"],"mappings":"odAAA","names":[]}