{"version":3,"sources":["../typechain/IMultiwrap.ts"],"sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PayableOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport { FunctionFragment, Result, EventFragment } from \"@ethersproject/abi\";\nimport { Listener, Provider } from \"@ethersproject/providers\";\nimport { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from \"./common\";\n\nexport declare namespace MultiTokenTransferLib {\n  export type MultiTokenStruct = {\n    erc1155AssetContracts: string[];\n    erc1155TokensToWrap: BigNumberish[][];\n    erc1155AmountsToWrap: BigNumberish[][];\n    erc721AssetContracts: string[];\n    erc721TokensToWrap: BigNumberish[][];\n    erc20AssetContracts: string[];\n    erc20AmountsToWrap: BigNumberish[];\n  };\n\n  export type MultiTokenStructOutput = [\n    string[],\n    BigNumber[][],\n    BigNumber[][],\n    string[],\n    BigNumber[][],\n    string[],\n    BigNumber[]\n  ] & {\n    erc1155AssetContracts: string[];\n    erc1155TokensToWrap: BigNumber[][];\n    erc1155AmountsToWrap: BigNumber[][];\n    erc721AssetContracts: string[];\n    erc721TokensToWrap: BigNumber[][];\n    erc20AssetContracts: string[];\n    erc20AmountsToWrap: BigNumber[];\n  };\n}\n\nexport interface IMultiwrapInterface extends utils.Interface {\n  contractName: string | \"IMultiwrap\";\n  functions: {\n    \"contractType()\": FunctionFragment;\n    \"contractURI()\": FunctionFragment;\n    \"contractVersion()\": FunctionFragment;\n    \"getDefaultRoyaltyInfo()\": FunctionFragment;\n    \"getRoyaltyInfoForToken(uint256)\": FunctionFragment;\n    \"owner()\": FunctionFragment;\n    \"royaltyInfo(uint256,uint256)\": FunctionFragment;\n    \"setContractURI(string)\": FunctionFragment;\n    \"setDefaultRoyaltyInfo(address,uint256)\": FunctionFragment;\n    \"setOwner(address)\": FunctionFragment;\n    \"setRoyaltyInfoForToken(uint256,address,uint256)\": FunctionFragment;\n    \"supportsInterface(bytes4)\": FunctionFragment;\n    \"unwrap(uint256,uint256,address)\": FunctionFragment;\n    \"wrap((address[],uint256[][],uint256[][],address[],uint256[][],address[],uint256[]),uint256,string)\": FunctionFragment;\n  };\n\n  encodeFunctionData(\n    functionFragment: \"contractType\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"contractURI\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"contractVersion\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getDefaultRoyaltyInfo\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getRoyaltyInfoForToken\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"owner\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"royaltyInfo\",\n    values: [BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setContractURI\",\n    values: [string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setDefaultRoyaltyInfo\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"setOwner\", values: [string]): string;\n  encodeFunctionData(\n    functionFragment: \"setRoyaltyInfoForToken\",\n    values: [BigNumberish, string, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"supportsInterface\",\n    values: [BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"unwrap\",\n    values: [BigNumberish, BigNumberish, string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"wrap\",\n    values: [MultiTokenTransferLib.MultiTokenStruct, BigNumberish, string]\n  ): string;\n\n  decodeFunctionResult(\n    functionFragment: \"contractType\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"contractURI\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"contractVersion\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"getDefaultRoyaltyInfo\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"getRoyaltyInfoForToken\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"owner\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"royaltyInfo\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setContractURI\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setDefaultRoyaltyInfo\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"setOwner\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"setRoyaltyInfoForToken\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"supportsInterface\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"unwrap\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"wrap\", data: BytesLike): Result;\n\n  events: {\n    \"DefaultRoyalty(address,uint256)\": EventFragment;\n    \"OwnerUpdated(address,address)\": EventFragment;\n    \"RoyaltyForToken(uint256,address,uint256)\": EventFragment;\n    \"TokensUnwrapped(address,address,uint256,uint256,tuple)\": EventFragment;\n    \"TokensWrapped(address,uint256,tuple)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"DefaultRoyalty\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"OwnerUpdated\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"RoyaltyForToken\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"TokensUnwrapped\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"TokensWrapped\"): EventFragment;\n}\n\nexport type DefaultRoyaltyEvent = TypedEvent<\n  [string, BigNumber],\n  { newRoyaltyRecipient: string; newRoyaltyBps: BigNumber }\n>;\n\nexport type DefaultRoyaltyEventFilter = TypedEventFilter<DefaultRoyaltyEvent>;\n\nexport type OwnerUpdatedEvent = TypedEvent<\n  [string, string],\n  { prevOwner: string; newOwner: string }\n>;\n\nexport type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;\n\nexport type RoyaltyForTokenEvent = TypedEvent<\n  [BigNumber, string, BigNumber],\n  { tokenId: BigNumber; royaltyRecipient: string; royaltyBps: BigNumber }\n>;\n\nexport type RoyaltyForTokenEventFilter = TypedEventFilter<RoyaltyForTokenEvent>;\n\nexport type TokensUnwrappedEvent = TypedEvent<\n  [\n    string,\n    string,\n    BigNumber,\n    BigNumber,\n    MultiTokenTransferLib.MultiTokenStructOutput\n  ],\n  {\n    wrapper: string;\n    sentTo: string;\n    tokenIdOfShares: BigNumber;\n    sharesUnwrapped: BigNumber;\n    wrappedContents: MultiTokenTransferLib.MultiTokenStructOutput;\n  }\n>;\n\nexport type TokensUnwrappedEventFilter = TypedEventFilter<TokensUnwrappedEvent>;\n\nexport type TokensWrappedEvent = TypedEvent<\n  [string, BigNumber, MultiTokenTransferLib.MultiTokenStructOutput],\n  {\n    wrapper: string;\n    tokenIdOfShares: BigNumber;\n    wrappedContents: MultiTokenTransferLib.MultiTokenStructOutput;\n  }\n>;\n\nexport type TokensWrappedEventFilter = TypedEventFilter<TokensWrappedEvent>;\n\nexport interface IMultiwrap extends BaseContract {\n  contractName: string | \"IMultiwrap\";\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: IMultiwrapInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    contractType(overrides?: CallOverrides): Promise<[string]>;\n\n    contractURI(overrides?: CallOverrides): Promise<[string]>;\n\n    contractVersion(overrides?: CallOverrides): Promise<[number]>;\n\n    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;\n\n    getRoyaltyInfoForToken(\n      tokenId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[string, number]>;\n\n    owner(overrides?: CallOverrides): Promise<[string]>;\n\n    royaltyInfo(\n      tokenId: BigNumberish,\n      salePrice: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<\n      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }\n    >;\n\n    setContractURI(\n      _uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setDefaultRoyaltyInfo(\n      _royaltyRecipient: string,\n      _royaltyBps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setOwner(\n      _newOwner: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setRoyaltyInfoForToken(\n      tokenId: BigNumberish,\n      recipient: string,\n      bps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n\n    unwrap(\n      tokenId: BigNumberish,\n      amountToRedeem: BigNumberish,\n      _sendTo: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    wrap(\n      wrappedContents: MultiTokenTransferLib.MultiTokenStruct,\n      shares: BigNumberish,\n      uriForShares: string,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n  };\n\n  contractType(overrides?: CallOverrides): Promise<string>;\n\n  contractURI(overrides?: CallOverrides): Promise<string>;\n\n  contractVersion(overrides?: CallOverrides): Promise<number>;\n\n  getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;\n\n  getRoyaltyInfoForToken(\n    tokenId: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<[string, number]>;\n\n  owner(overrides?: CallOverrides): Promise<string>;\n\n  royaltyInfo(\n    tokenId: BigNumberish,\n    salePrice: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<\n    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }\n  >;\n\n  setContractURI(\n    _uri: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setDefaultRoyaltyInfo(\n    _royaltyRecipient: string,\n    _royaltyBps: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setOwner(\n    _newOwner: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setRoyaltyInfoForToken(\n    tokenId: BigNumberish,\n    recipient: string,\n    bps: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  supportsInterface(\n    interfaceId: BytesLike,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  unwrap(\n    tokenId: BigNumberish,\n    amountToRedeem: BigNumberish,\n    _sendTo: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  wrap(\n    wrappedContents: MultiTokenTransferLib.MultiTokenStruct,\n    shares: BigNumberish,\n    uriForShares: string,\n    overrides?: PayableOverrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    contractType(overrides?: CallOverrides): Promise<string>;\n\n    contractURI(overrides?: CallOverrides): Promise<string>;\n\n    contractVersion(overrides?: CallOverrides): Promise<number>;\n\n    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;\n\n    getRoyaltyInfoForToken(\n      tokenId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[string, number]>;\n\n    owner(overrides?: CallOverrides): Promise<string>;\n\n    royaltyInfo(\n      tokenId: BigNumberish,\n      salePrice: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<\n      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }\n    >;\n\n    setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;\n\n    setDefaultRoyaltyInfo(\n      _royaltyRecipient: string,\n      _royaltyBps: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;\n\n    setRoyaltyInfoForToken(\n      tokenId: BigNumberish,\n      recipient: string,\n      bps: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    unwrap(\n      tokenId: BigNumberish,\n      amountToRedeem: BigNumberish,\n      _sendTo: string,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    wrap(\n      wrappedContents: MultiTokenTransferLib.MultiTokenStruct,\n      shares: BigNumberish,\n      uriForShares: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  filters: {\n    \"DefaultRoyalty(address,uint256)\"(\n      newRoyaltyRecipient?: null,\n      newRoyaltyBps?: null\n    ): DefaultRoyaltyEventFilter;\n    DefaultRoyalty(\n      newRoyaltyRecipient?: null,\n      newRoyaltyBps?: null\n    ): DefaultRoyaltyEventFilter;\n\n    \"OwnerUpdated(address,address)\"(\n      prevOwner?: null,\n      newOwner?: null\n    ): OwnerUpdatedEventFilter;\n    OwnerUpdated(prevOwner?: null, newOwner?: null): OwnerUpdatedEventFilter;\n\n    \"RoyaltyForToken(uint256,address,uint256)\"(\n      tokenId?: BigNumberish | null,\n      royaltyRecipient?: null,\n      royaltyBps?: null\n    ): RoyaltyForTokenEventFilter;\n    RoyaltyForToken(\n      tokenId?: BigNumberish | null,\n      royaltyRecipient?: null,\n      royaltyBps?: null\n    ): RoyaltyForTokenEventFilter;\n\n    \"TokensUnwrapped(address,address,uint256,uint256,tuple)\"(\n      wrapper?: string | null,\n      sentTo?: null,\n      tokenIdOfShares?: BigNumberish | null,\n      sharesUnwrapped?: null,\n      wrappedContents?: null\n    ): TokensUnwrappedEventFilter;\n    TokensUnwrapped(\n      wrapper?: string | null,\n      sentTo?: null,\n      tokenIdOfShares?: BigNumberish | null,\n      sharesUnwrapped?: null,\n      wrappedContents?: null\n    ): TokensUnwrappedEventFilter;\n\n    \"TokensWrapped(address,uint256,tuple)\"(\n      wrapper?: string | null,\n      tokenIdOfShares?: BigNumberish | null,\n      wrappedContents?: null\n    ): TokensWrappedEventFilter;\n    TokensWrapped(\n      wrapper?: string | null,\n      tokenIdOfShares?: BigNumberish | null,\n      wrappedContents?: null\n    ): TokensWrappedEventFilter;\n  };\n\n  estimateGas: {\n    contractType(overrides?: CallOverrides): Promise<BigNumber>;\n\n    contractURI(overrides?: CallOverrides): Promise<BigNumber>;\n\n    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getRoyaltyInfoForToken(\n      tokenId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    owner(overrides?: CallOverrides): Promise<BigNumber>;\n\n    royaltyInfo(\n      tokenId: BigNumberish,\n      salePrice: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    setContractURI(\n      _uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setDefaultRoyaltyInfo(\n      _royaltyRecipient: string,\n      _royaltyBps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setOwner(\n      _newOwner: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setRoyaltyInfoForToken(\n      tokenId: BigNumberish,\n      recipient: string,\n      bps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    unwrap(\n      tokenId: BigNumberish,\n      amountToRedeem: BigNumberish,\n      _sendTo: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    wrap(\n      wrappedContents: MultiTokenTransferLib.MultiTokenStruct,\n      shares: BigNumberish,\n      uriForShares: string,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    contractType(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getDefaultRoyaltyInfo(\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getRoyaltyInfoForToken(\n      tokenId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    royaltyInfo(\n      tokenId: BigNumberish,\n      salePrice: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    setContractURI(\n      _uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setDefaultRoyaltyInfo(\n      _royaltyRecipient: string,\n      _royaltyBps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setOwner(\n      _newOwner: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setRoyaltyInfoForToken(\n      tokenId: BigNumberish,\n      recipient: string,\n      bps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    unwrap(\n      tokenId: BigNumberish,\n      amountToRedeem: BigNumberish,\n      _sendTo: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    wrap(\n      wrappedContents: MultiTokenTransferLib.MultiTokenStruct,\n      shares: BigNumberish,\n      uriForShares: string,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"],"mappings":"odAAA","names":[]}