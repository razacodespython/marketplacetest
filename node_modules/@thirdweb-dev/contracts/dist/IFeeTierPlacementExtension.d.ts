import { utils, BytesLike, BaseContract, Signer, CallOverrides, BigNumber, PopulatedTransaction } from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Provider, Listener } from '@ethersproject/providers';
import { TypedEvent, TypedEventFilter, TypedListener, OnEvent } from './common';

interface IFeeTierPlacementExtensionInterface extends utils.Interface {
    contractName: string | "IFeeTierPlacementExtension";
    functions: {
        "getFeeTier(address,address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "getFeeTier", values: [string, string]): string;
    decodeFunctionResult(functionFragment: "getFeeTier", data: BytesLike): Result;
    events: {};
}
interface IFeeTierPlacementExtension extends BaseContract {
    contractName: string | "IFeeTierPlacementExtension";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IFeeTierPlacementExtensionInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFeeTier(deployer: string, proxy: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            tierId: BigNumber;
            validUntilTimestamp: BigNumber;
        }>;
    };
    getFeeTier(deployer: string, proxy: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        tierId: BigNumber;
        validUntilTimestamp: BigNumber;
    }>;
    callStatic: {
        getFeeTier(deployer: string, proxy: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            tierId: BigNumber;
            validUntilTimestamp: BigNumber;
        }>;
    };
    filters: {};
    estimateGas: {
        getFeeTier(deployer: string, proxy: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getFeeTier(deployer: string, proxy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

export { IFeeTierPlacementExtension, IFeeTierPlacementExtensionInterface };
