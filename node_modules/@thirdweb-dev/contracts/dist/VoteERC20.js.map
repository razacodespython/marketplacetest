{"version":3,"sources":["../typechain/VoteERC20.ts"],"sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PayableOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport { FunctionFragment, Result, EventFragment } from \"@ethersproject/abi\";\nimport { Listener, Provider } from \"@ethersproject/providers\";\nimport { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from \"./common\";\n\nexport declare namespace VoteERC20 {\n  export type ProposalStruct = {\n    proposalId: BigNumberish;\n    proposer: string;\n    targets: string[];\n    values: BigNumberish[];\n    signatures: string[];\n    calldatas: BytesLike[];\n    startBlock: BigNumberish;\n    endBlock: BigNumberish;\n    description: string;\n  };\n\n  export type ProposalStructOutput = [\n    BigNumber,\n    string,\n    string[],\n    BigNumber[],\n    string[],\n    string[],\n    BigNumber,\n    BigNumber,\n    string\n  ] & {\n    proposalId: BigNumber;\n    proposer: string;\n    targets: string[];\n    values: BigNumber[];\n    signatures: string[];\n    calldatas: string[];\n    startBlock: BigNumber;\n    endBlock: BigNumber;\n    description: string;\n  };\n}\n\nexport interface VoteERC20Interface extends utils.Interface {\n  contractName: string | \"VoteERC20\";\n  functions: {\n    \"BALLOT_TYPEHASH()\": FunctionFragment;\n    \"COUNTING_MODE()\": FunctionFragment;\n    \"castVote(uint256,uint8)\": FunctionFragment;\n    \"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\": FunctionFragment;\n    \"castVoteWithReason(uint256,uint8,string)\": FunctionFragment;\n    \"contractType()\": FunctionFragment;\n    \"contractURI()\": FunctionFragment;\n    \"contractVersion()\": FunctionFragment;\n    \"execute(address[],uint256[],bytes[],bytes32)\": FunctionFragment;\n    \"getAllProposals()\": FunctionFragment;\n    \"getVotes(address,uint256)\": FunctionFragment;\n    \"hasVoted(uint256,address)\": FunctionFragment;\n    \"hashProposal(address[],uint256[],bytes[],bytes32)\": FunctionFragment;\n    \"initialize(string,string,address[],address,uint256,uint256,uint256,uint256)\": FunctionFragment;\n    \"isTrustedForwarder(address)\": FunctionFragment;\n    \"name()\": FunctionFragment;\n    \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\": FunctionFragment;\n    \"onERC1155Received(address,address,uint256,uint256,bytes)\": FunctionFragment;\n    \"onERC721Received(address,address,uint256,bytes)\": FunctionFragment;\n    \"proposalDeadline(uint256)\": FunctionFragment;\n    \"proposalIndex()\": FunctionFragment;\n    \"proposalSnapshot(uint256)\": FunctionFragment;\n    \"proposalThreshold()\": FunctionFragment;\n    \"proposalVotes(uint256)\": FunctionFragment;\n    \"proposals(uint256)\": FunctionFragment;\n    \"propose(address[],uint256[],bytes[],string)\": FunctionFragment;\n    \"quorum(uint256)\": FunctionFragment;\n    \"quorumDenominator()\": FunctionFragment;\n    \"quorumNumerator()\": FunctionFragment;\n    \"relay(address,uint256,bytes)\": FunctionFragment;\n    \"setContractURI(string)\": FunctionFragment;\n    \"setProposalThreshold(uint256)\": FunctionFragment;\n    \"setVotingDelay(uint256)\": FunctionFragment;\n    \"setVotingPeriod(uint256)\": FunctionFragment;\n    \"state(uint256)\": FunctionFragment;\n    \"supportsInterface(bytes4)\": FunctionFragment;\n    \"token()\": FunctionFragment;\n    \"updateQuorumNumerator(uint256)\": FunctionFragment;\n    \"version()\": FunctionFragment;\n    \"votingDelay()\": FunctionFragment;\n    \"votingPeriod()\": FunctionFragment;\n  };\n\n  encodeFunctionData(\n    functionFragment: \"BALLOT_TYPEHASH\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"COUNTING_MODE\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"castVote\",\n    values: [BigNumberish, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"castVoteBySig\",\n    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"castVoteWithReason\",\n    values: [BigNumberish, BigNumberish, string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"contractType\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"contractURI\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"contractVersion\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"execute\",\n    values: [string[], BigNumberish[], BytesLike[], BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getAllProposals\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getVotes\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"hasVoted\",\n    values: [BigNumberish, string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"hashProposal\",\n    values: [string[], BigNumberish[], BytesLike[], BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"initialize\",\n    values: [\n      string,\n      string,\n      string[],\n      string,\n      BigNumberish,\n      BigNumberish,\n      BigNumberish,\n      BigNumberish\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"isTrustedForwarder\",\n    values: [string]\n  ): string;\n  encodeFunctionData(functionFragment: \"name\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"onERC1155BatchReceived\",\n    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"onERC1155Received\",\n    values: [string, string, BigNumberish, BigNumberish, BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"onERC721Received\",\n    values: [string, string, BigNumberish, BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"proposalDeadline\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"proposalIndex\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"proposalSnapshot\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"proposalThreshold\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"proposalVotes\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"proposals\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"propose\",\n    values: [string[], BigNumberish[], BytesLike[], string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"quorum\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"quorumDenominator\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"quorumNumerator\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"relay\",\n    values: [string, BigNumberish, BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setContractURI\",\n    values: [string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setProposalThreshold\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setVotingDelay\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setVotingPeriod\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"state\", values: [BigNumberish]): string;\n  encodeFunctionData(\n    functionFragment: \"supportsInterface\",\n    values: [BytesLike]\n  ): string;\n  encodeFunctionData(functionFragment: \"token\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"updateQuorumNumerator\",\n    values: [BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"version\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"votingDelay\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"votingPeriod\",\n    values?: undefined\n  ): string;\n\n  decodeFunctionResult(\n    functionFragment: \"BALLOT_TYPEHASH\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"COUNTING_MODE\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"castVote\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"castVoteBySig\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"castVoteWithReason\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"contractType\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"contractURI\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"contractVersion\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"execute\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"getAllProposals\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"getVotes\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"hasVoted\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"hashProposal\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"initialize\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"isTrustedForwarder\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"name\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"onERC1155BatchReceived\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"onERC1155Received\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"onERC721Received\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"proposalDeadline\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"proposalIndex\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"proposalSnapshot\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"proposalThreshold\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"proposalVotes\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"proposals\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"propose\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"quorum\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"quorumDenominator\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"quorumNumerator\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"relay\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"setContractURI\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setProposalThreshold\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setVotingDelay\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setVotingPeriod\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"state\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"supportsInterface\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"token\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"updateQuorumNumerator\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"version\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"votingDelay\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"votingPeriod\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"ProposalCanceled(uint256)\": EventFragment;\n    \"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)\": EventFragment;\n    \"ProposalExecuted(uint256)\": EventFragment;\n    \"ProposalThresholdSet(uint256,uint256)\": EventFragment;\n    \"QuorumNumeratorUpdated(uint256,uint256)\": EventFragment;\n    \"VoteCast(address,uint256,uint8,uint256,string)\": EventFragment;\n    \"VotingDelaySet(uint256,uint256)\": EventFragment;\n    \"VotingPeriodSet(uint256,uint256)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"ProposalCanceled\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"ProposalCreated\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"ProposalExecuted\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"ProposalThresholdSet\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"QuorumNumeratorUpdated\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"VoteCast\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"VotingDelaySet\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"VotingPeriodSet\"): EventFragment;\n}\n\nexport type ProposalCanceledEvent = TypedEvent<\n  [BigNumber],\n  { proposalId: BigNumber }\n>;\n\nexport type ProposalCanceledEventFilter =\n  TypedEventFilter<ProposalCanceledEvent>;\n\nexport type ProposalCreatedEvent = TypedEvent<\n  [\n    BigNumber,\n    string,\n    string[],\n    BigNumber[],\n    string[],\n    string[],\n    BigNumber,\n    BigNumber,\n    string\n  ],\n  {\n    proposalId: BigNumber;\n    proposer: string;\n    targets: string[];\n    values: BigNumber[];\n    signatures: string[];\n    calldatas: string[];\n    startBlock: BigNumber;\n    endBlock: BigNumber;\n    description: string;\n  }\n>;\n\nexport type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;\n\nexport type ProposalExecutedEvent = TypedEvent<\n  [BigNumber],\n  { proposalId: BigNumber }\n>;\n\nexport type ProposalExecutedEventFilter =\n  TypedEventFilter<ProposalExecutedEvent>;\n\nexport type ProposalThresholdSetEvent = TypedEvent<\n  [BigNumber, BigNumber],\n  { oldProposalThreshold: BigNumber; newProposalThreshold: BigNumber }\n>;\n\nexport type ProposalThresholdSetEventFilter =\n  TypedEventFilter<ProposalThresholdSetEvent>;\n\nexport type QuorumNumeratorUpdatedEvent = TypedEvent<\n  [BigNumber, BigNumber],\n  { oldQuorumNumerator: BigNumber; newQuorumNumerator: BigNumber }\n>;\n\nexport type QuorumNumeratorUpdatedEventFilter =\n  TypedEventFilter<QuorumNumeratorUpdatedEvent>;\n\nexport type VoteCastEvent = TypedEvent<\n  [string, BigNumber, number, BigNumber, string],\n  {\n    voter: string;\n    proposalId: BigNumber;\n    support: number;\n    weight: BigNumber;\n    reason: string;\n  }\n>;\n\nexport type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;\n\nexport type VotingDelaySetEvent = TypedEvent<\n  [BigNumber, BigNumber],\n  { oldVotingDelay: BigNumber; newVotingDelay: BigNumber }\n>;\n\nexport type VotingDelaySetEventFilter = TypedEventFilter<VotingDelaySetEvent>;\n\nexport type VotingPeriodSetEvent = TypedEvent<\n  [BigNumber, BigNumber],\n  { oldVotingPeriod: BigNumber; newVotingPeriod: BigNumber }\n>;\n\nexport type VotingPeriodSetEventFilter = TypedEventFilter<VotingPeriodSetEvent>;\n\nexport interface VoteERC20 extends BaseContract {\n  contractName: string | \"VoteERC20\";\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: VoteERC20Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;\n\n    COUNTING_MODE(overrides?: CallOverrides): Promise<[string]>;\n\n    castVote(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    castVoteBySig(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    castVoteWithReason(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      reason: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    contractType(overrides?: CallOverrides): Promise<[string]>;\n\n    contractURI(overrides?: CallOverrides): Promise<[string]>;\n\n    contractVersion(overrides?: CallOverrides): Promise<[number]>;\n\n    execute(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      descriptionHash: BytesLike,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    getAllProposals(\n      overrides?: CallOverrides\n    ): Promise<\n      [VoteERC20.ProposalStructOutput[]] & {\n        allProposals: VoteERC20.ProposalStructOutput[];\n      }\n    >;\n\n    getVotes(\n      account: string,\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    hasVoted(\n      proposalId: BigNumberish,\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n\n    hashProposal(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      descriptionHash: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    initialize(\n      _name: string,\n      _contractURI: string,\n      _trustedForwarders: string[],\n      _token: string,\n      _initialVotingDelay: BigNumberish,\n      _initialVotingPeriod: BigNumberish,\n      _initialProposalThreshold: BigNumberish,\n      _initialVoteQuorumFraction: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    isTrustedForwarder(\n      forwarder: string,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n\n    name(overrides?: CallOverrides): Promise<[string]>;\n\n    onERC1155BatchReceived(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish[],\n      arg3: BigNumberish[],\n      arg4: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    onERC1155Received(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish,\n      arg3: BigNumberish,\n      arg4: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    onERC721Received(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish,\n      arg3: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    proposalDeadline(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    proposalIndex(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    proposalSnapshot(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    proposalThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    proposalVotes(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, BigNumber, BigNumber] & {\n        againstVotes: BigNumber;\n        forVotes: BigNumber;\n        abstainVotes: BigNumber;\n      }\n    >;\n\n    proposals(\n      arg0: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, string, BigNumber, BigNumber, string] & {\n        proposalId: BigNumber;\n        proposer: string;\n        startBlock: BigNumber;\n        endBlock: BigNumber;\n        description: string;\n      }\n    >;\n\n    propose(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      description: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    quorum(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    quorumDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    quorumNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    relay(\n      target: string,\n      value: BigNumberish,\n      data: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setContractURI(\n      uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setProposalThreshold(\n      newProposalThreshold: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setVotingDelay(\n      newVotingDelay: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setVotingPeriod(\n      newVotingPeriod: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    state(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[number]>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n\n    token(overrides?: CallOverrides): Promise<[string]>;\n\n    updateQuorumNumerator(\n      newQuorumNumerator: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    version(overrides?: CallOverrides): Promise<[string]>;\n\n    votingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;\n  };\n\n  BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;\n\n  COUNTING_MODE(overrides?: CallOverrides): Promise<string>;\n\n  castVote(\n    proposalId: BigNumberish,\n    support: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  castVoteBySig(\n    proposalId: BigNumberish,\n    support: BigNumberish,\n    v: BigNumberish,\n    r: BytesLike,\n    s: BytesLike,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  castVoteWithReason(\n    proposalId: BigNumberish,\n    support: BigNumberish,\n    reason: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  contractType(overrides?: CallOverrides): Promise<string>;\n\n  contractURI(overrides?: CallOverrides): Promise<string>;\n\n  contractVersion(overrides?: CallOverrides): Promise<number>;\n\n  execute(\n    targets: string[],\n    values: BigNumberish[],\n    calldatas: BytesLike[],\n    descriptionHash: BytesLike,\n    overrides?: PayableOverrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  getAllProposals(\n    overrides?: CallOverrides\n  ): Promise<VoteERC20.ProposalStructOutput[]>;\n\n  getVotes(\n    account: string,\n    blockNumber: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  hasVoted(\n    proposalId: BigNumberish,\n    account: string,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  hashProposal(\n    targets: string[],\n    values: BigNumberish[],\n    calldatas: BytesLike[],\n    descriptionHash: BytesLike,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  initialize(\n    _name: string,\n    _contractURI: string,\n    _trustedForwarders: string[],\n    _token: string,\n    _initialVotingDelay: BigNumberish,\n    _initialVotingPeriod: BigNumberish,\n    _initialProposalThreshold: BigNumberish,\n    _initialVoteQuorumFraction: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  isTrustedForwarder(\n    forwarder: string,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  name(overrides?: CallOverrides): Promise<string>;\n\n  onERC1155BatchReceived(\n    arg0: string,\n    arg1: string,\n    arg2: BigNumberish[],\n    arg3: BigNumberish[],\n    arg4: BytesLike,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  onERC1155Received(\n    arg0: string,\n    arg1: string,\n    arg2: BigNumberish,\n    arg3: BigNumberish,\n    arg4: BytesLike,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  onERC721Received(\n    arg0: string,\n    arg1: string,\n    arg2: BigNumberish,\n    arg3: BytesLike,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  proposalDeadline(\n    proposalId: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;\n\n  proposalSnapshot(\n    proposalId: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;\n\n  proposalVotes(\n    proposalId: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<\n    [BigNumber, BigNumber, BigNumber] & {\n      againstVotes: BigNumber;\n      forVotes: BigNumber;\n      abstainVotes: BigNumber;\n    }\n  >;\n\n  proposals(\n    arg0: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<\n    [BigNumber, string, BigNumber, BigNumber, string] & {\n      proposalId: BigNumber;\n      proposer: string;\n      startBlock: BigNumber;\n      endBlock: BigNumber;\n      description: string;\n    }\n  >;\n\n  propose(\n    targets: string[],\n    values: BigNumberish[],\n    calldatas: BytesLike[],\n    description: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  quorum(\n    blockNumber: BigNumberish,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  quorumDenominator(overrides?: CallOverrides): Promise<BigNumber>;\n\n  quorumNumerator(overrides?: CallOverrides): Promise<BigNumber>;\n\n  relay(\n    target: string,\n    value: BigNumberish,\n    data: BytesLike,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setContractURI(\n    uri: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setProposalThreshold(\n    newProposalThreshold: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setVotingDelay(\n    newVotingDelay: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setVotingPeriod(\n    newVotingPeriod: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;\n\n  supportsInterface(\n    interfaceId: BytesLike,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  token(overrides?: CallOverrides): Promise<string>;\n\n  updateQuorumNumerator(\n    newQuorumNumerator: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  version(overrides?: CallOverrides): Promise<string>;\n\n  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;\n\n  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;\n\n  callStatic: {\n    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;\n\n    COUNTING_MODE(overrides?: CallOverrides): Promise<string>;\n\n    castVote(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    castVoteBySig(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    castVoteWithReason(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      reason: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    contractType(overrides?: CallOverrides): Promise<string>;\n\n    contractURI(overrides?: CallOverrides): Promise<string>;\n\n    contractVersion(overrides?: CallOverrides): Promise<number>;\n\n    execute(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      descriptionHash: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getAllProposals(\n      overrides?: CallOverrides\n    ): Promise<VoteERC20.ProposalStructOutput[]>;\n\n    getVotes(\n      account: string,\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    hasVoted(\n      proposalId: BigNumberish,\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    hashProposal(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      descriptionHash: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    initialize(\n      _name: string,\n      _contractURI: string,\n      _trustedForwarders: string[],\n      _token: string,\n      _initialVotingDelay: BigNumberish,\n      _initialVotingPeriod: BigNumberish,\n      _initialProposalThreshold: BigNumberish,\n      _initialVoteQuorumFraction: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    isTrustedForwarder(\n      forwarder: string,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    name(overrides?: CallOverrides): Promise<string>;\n\n    onERC1155BatchReceived(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish[],\n      arg3: BigNumberish[],\n      arg4: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    onERC1155Received(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish,\n      arg3: BigNumberish,\n      arg4: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    onERC721Received(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish,\n      arg3: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    proposalDeadline(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;\n\n    proposalSnapshot(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;\n\n    proposalVotes(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, BigNumber, BigNumber] & {\n        againstVotes: BigNumber;\n        forVotes: BigNumber;\n        abstainVotes: BigNumber;\n      }\n    >;\n\n    proposals(\n      arg0: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, string, BigNumber, BigNumber, string] & {\n        proposalId: BigNumber;\n        proposer: string;\n        startBlock: BigNumber;\n        endBlock: BigNumber;\n        description: string;\n      }\n    >;\n\n    propose(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      description: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    quorum(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    quorumDenominator(overrides?: CallOverrides): Promise<BigNumber>;\n\n    quorumNumerator(overrides?: CallOverrides): Promise<BigNumber>;\n\n    relay(\n      target: string,\n      value: BigNumberish,\n      data: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    setContractURI(uri: string, overrides?: CallOverrides): Promise<void>;\n\n    setProposalThreshold(\n      newProposalThreshold: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    setVotingDelay(\n      newVotingDelay: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    setVotingPeriod(\n      newVotingPeriod: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    token(overrides?: CallOverrides): Promise<string>;\n\n    updateQuorumNumerator(\n      newQuorumNumerator: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    version(overrides?: CallOverrides): Promise<string>;\n\n    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;\n\n    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;\n  };\n\n  filters: {\n    \"ProposalCanceled(uint256)\"(proposalId?: null): ProposalCanceledEventFilter;\n    ProposalCanceled(proposalId?: null): ProposalCanceledEventFilter;\n\n    \"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)\"(\n      proposalId?: null,\n      proposer?: null,\n      targets?: null,\n      values?: null,\n      signatures?: null,\n      calldatas?: null,\n      startBlock?: null,\n      endBlock?: null,\n      description?: null\n    ): ProposalCreatedEventFilter;\n    ProposalCreated(\n      proposalId?: null,\n      proposer?: null,\n      targets?: null,\n      values?: null,\n      signatures?: null,\n      calldatas?: null,\n      startBlock?: null,\n      endBlock?: null,\n      description?: null\n    ): ProposalCreatedEventFilter;\n\n    \"ProposalExecuted(uint256)\"(proposalId?: null): ProposalExecutedEventFilter;\n    ProposalExecuted(proposalId?: null): ProposalExecutedEventFilter;\n\n    \"ProposalThresholdSet(uint256,uint256)\"(\n      oldProposalThreshold?: null,\n      newProposalThreshold?: null\n    ): ProposalThresholdSetEventFilter;\n    ProposalThresholdSet(\n      oldProposalThreshold?: null,\n      newProposalThreshold?: null\n    ): ProposalThresholdSetEventFilter;\n\n    \"QuorumNumeratorUpdated(uint256,uint256)\"(\n      oldQuorumNumerator?: null,\n      newQuorumNumerator?: null\n    ): QuorumNumeratorUpdatedEventFilter;\n    QuorumNumeratorUpdated(\n      oldQuorumNumerator?: null,\n      newQuorumNumerator?: null\n    ): QuorumNumeratorUpdatedEventFilter;\n\n    \"VoteCast(address,uint256,uint8,uint256,string)\"(\n      voter?: string | null,\n      proposalId?: null,\n      support?: null,\n      weight?: null,\n      reason?: null\n    ): VoteCastEventFilter;\n    VoteCast(\n      voter?: string | null,\n      proposalId?: null,\n      support?: null,\n      weight?: null,\n      reason?: null\n    ): VoteCastEventFilter;\n\n    \"VotingDelaySet(uint256,uint256)\"(\n      oldVotingDelay?: null,\n      newVotingDelay?: null\n    ): VotingDelaySetEventFilter;\n    VotingDelaySet(\n      oldVotingDelay?: null,\n      newVotingDelay?: null\n    ): VotingDelaySetEventFilter;\n\n    \"VotingPeriodSet(uint256,uint256)\"(\n      oldVotingPeriod?: null,\n      newVotingPeriod?: null\n    ): VotingPeriodSetEventFilter;\n    VotingPeriodSet(\n      oldVotingPeriod?: null,\n      newVotingPeriod?: null\n    ): VotingPeriodSetEventFilter;\n  };\n\n  estimateGas: {\n    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;\n\n    COUNTING_MODE(overrides?: CallOverrides): Promise<BigNumber>;\n\n    castVote(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    castVoteBySig(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    castVoteWithReason(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      reason: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    contractType(overrides?: CallOverrides): Promise<BigNumber>;\n\n    contractURI(overrides?: CallOverrides): Promise<BigNumber>;\n\n    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;\n\n    execute(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      descriptionHash: BytesLike,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    getAllProposals(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getVotes(\n      account: string,\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    hasVoted(\n      proposalId: BigNumberish,\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    hashProposal(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      descriptionHash: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    initialize(\n      _name: string,\n      _contractURI: string,\n      _trustedForwarders: string[],\n      _token: string,\n      _initialVotingDelay: BigNumberish,\n      _initialVotingPeriod: BigNumberish,\n      _initialProposalThreshold: BigNumberish,\n      _initialVoteQuorumFraction: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    isTrustedForwarder(\n      forwarder: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    name(overrides?: CallOverrides): Promise<BigNumber>;\n\n    onERC1155BatchReceived(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish[],\n      arg3: BigNumberish[],\n      arg4: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    onERC1155Received(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish,\n      arg3: BigNumberish,\n      arg4: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    onERC721Received(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish,\n      arg3: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    proposalDeadline(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    proposalIndex(overrides?: CallOverrides): Promise<BigNumber>;\n\n    proposalSnapshot(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;\n\n    proposalVotes(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    proposals(\n      arg0: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    propose(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      description: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    quorum(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    quorumDenominator(overrides?: CallOverrides): Promise<BigNumber>;\n\n    quorumNumerator(overrides?: CallOverrides): Promise<BigNumber>;\n\n    relay(\n      target: string,\n      value: BigNumberish,\n      data: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setContractURI(\n      uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setProposalThreshold(\n      newProposalThreshold: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setVotingDelay(\n      newVotingDelay: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setVotingPeriod(\n      newVotingPeriod: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    state(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    token(overrides?: CallOverrides): Promise<BigNumber>;\n\n    updateQuorumNumerator(\n      newQuorumNumerator: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    version(overrides?: CallOverrides): Promise<BigNumber>;\n\n    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;\n\n    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    COUNTING_MODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    castVote(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    castVoteBySig(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      v: BigNumberish,\n      r: BytesLike,\n      s: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    castVoteWithReason(\n      proposalId: BigNumberish,\n      support: BigNumberish,\n      reason: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    contractType(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    execute(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      descriptionHash: BytesLike,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    getAllProposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getVotes(\n      account: string,\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    hasVoted(\n      proposalId: BigNumberish,\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    hashProposal(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      descriptionHash: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    initialize(\n      _name: string,\n      _contractURI: string,\n      _trustedForwarders: string[],\n      _token: string,\n      _initialVotingDelay: BigNumberish,\n      _initialVotingPeriod: BigNumberish,\n      _initialProposalThreshold: BigNumberish,\n      _initialVoteQuorumFraction: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    isTrustedForwarder(\n      forwarder: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    onERC1155BatchReceived(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish[],\n      arg3: BigNumberish[],\n      arg4: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    onERC1155Received(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish,\n      arg3: BigNumberish,\n      arg4: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    onERC721Received(\n      arg0: string,\n      arg1: string,\n      arg2: BigNumberish,\n      arg3: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    proposalDeadline(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    proposalIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    proposalSnapshot(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    proposalThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    proposalVotes(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    proposals(\n      arg0: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    propose(\n      targets: string[],\n      values: BigNumberish[],\n      calldatas: BytesLike[],\n      description: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    quorum(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    quorumDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    quorumNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    relay(\n      target: string,\n      value: BigNumberish,\n      data: BytesLike,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setContractURI(\n      uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setProposalThreshold(\n      newProposalThreshold: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setVotingDelay(\n      newVotingDelay: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setVotingPeriod(\n      newVotingPeriod: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    state(\n      proposalId: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    supportsInterface(\n      interfaceId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    updateQuorumNumerator(\n      newQuorumNumerator: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n  };\n}\n"],"mappings":"odAAA","names":[]}