{"version":3,"sources":["../typechain/IDropERC20.ts"],"sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PayableOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport { FunctionFragment, Result, EventFragment } from \"@ethersproject/abi\";\nimport { Listener, Provider } from \"@ethersproject/providers\";\nimport { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from \"./common\";\n\nexport declare namespace IDropClaimCondition {\n  export type ClaimConditionStruct = {\n    startTimestamp: BigNumberish;\n    maxClaimableSupply: BigNumberish;\n    supplyClaimed: BigNumberish;\n    quantityLimitPerTransaction: BigNumberish;\n    waitTimeInSecondsBetweenClaims: BigNumberish;\n    merkleRoot: BytesLike;\n    pricePerToken: BigNumberish;\n    currency: string;\n  };\n\n  export type ClaimConditionStructOutput = [\n    BigNumber,\n    BigNumber,\n    BigNumber,\n    BigNumber,\n    BigNumber,\n    string,\n    BigNumber,\n    string\n  ] & {\n    startTimestamp: BigNumber;\n    maxClaimableSupply: BigNumber;\n    supplyClaimed: BigNumber;\n    quantityLimitPerTransaction: BigNumber;\n    waitTimeInSecondsBetweenClaims: BigNumber;\n    merkleRoot: string;\n    pricePerToken: BigNumber;\n    currency: string;\n  };\n}\n\nexport interface IDropERC20Interface extends utils.Interface {\n  contractName: string | \"IDropERC20\";\n  functions: {\n    \"allowance(address,address)\": FunctionFragment;\n    \"approve(address,uint256)\": FunctionFragment;\n    \"balanceOf(address)\": FunctionFragment;\n    \"claim(address,uint256,address,uint256,bytes32[],uint256)\": FunctionFragment;\n    \"contractType()\": FunctionFragment;\n    \"contractURI()\": FunctionFragment;\n    \"contractVersion()\": FunctionFragment;\n    \"getPlatformFeeInfo()\": FunctionFragment;\n    \"primarySaleRecipient()\": FunctionFragment;\n    \"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\": FunctionFragment;\n    \"setContractURI(string)\": FunctionFragment;\n    \"setPlatformFeeInfo(address,uint256)\": FunctionFragment;\n    \"setPrimarySaleRecipient(address)\": FunctionFragment;\n    \"totalSupply()\": FunctionFragment;\n    \"transfer(address,uint256)\": FunctionFragment;\n    \"transferFrom(address,address,uint256)\": FunctionFragment;\n  };\n\n  encodeFunctionData(\n    functionFragment: \"allowance\",\n    values: [string, string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"approve\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(functionFragment: \"balanceOf\", values: [string]): string;\n  encodeFunctionData(\n    functionFragment: \"claim\",\n    values: [\n      string,\n      BigNumberish,\n      string,\n      BigNumberish,\n      BytesLike[],\n      BigNumberish\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"contractType\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"contractURI\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"contractVersion\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getPlatformFeeInfo\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"primarySaleRecipient\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setClaimConditions\",\n    values: [IDropClaimCondition.ClaimConditionStruct[], boolean]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setContractURI\",\n    values: [string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setPlatformFeeInfo\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setPrimarySaleRecipient\",\n    values: [string]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"totalSupply\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transfer\",\n    values: [string, BigNumberish]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transferFrom\",\n    values: [string, string, BigNumberish]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"allowance\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"approve\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"balanceOf\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"claim\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"contractType\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"contractURI\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"contractVersion\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"getPlatformFeeInfo\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"primarySaleRecipient\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setClaimConditions\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setContractURI\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setPlatformFeeInfo\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setPrimarySaleRecipient\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"totalSupply\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"transfer\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"transferFrom\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"Approval(address,address,uint256)\": EventFragment;\n    \"ClaimConditionsUpdated(tuple[])\": EventFragment;\n    \"MaxTotalSupplyUpdated(uint256)\": EventFragment;\n    \"MaxWalletClaimCountUpdated(uint256)\": EventFragment;\n    \"PlatformFeeInfoUpdated(address,uint256)\": EventFragment;\n    \"PrimarySaleRecipientUpdated(address)\": EventFragment;\n    \"TokensClaimed(uint256,address,address,uint256)\": EventFragment;\n    \"Transfer(address,address,uint256)\": EventFragment;\n    \"WalletClaimCountUpdated(address,uint256)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"Approval\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"ClaimConditionsUpdated\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"MaxTotalSupplyUpdated\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"MaxWalletClaimCountUpdated\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"PlatformFeeInfoUpdated\"): EventFragment;\n  getEvent(\n    nameOrSignatureOrTopic: \"PrimarySaleRecipientUpdated\"\n  ): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"TokensClaimed\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Transfer\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"WalletClaimCountUpdated\"): EventFragment;\n}\n\nexport type ApprovalEvent = TypedEvent<\n  [string, string, BigNumber],\n  { owner: string; spender: string; value: BigNumber }\n>;\n\nexport type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;\n\nexport type ClaimConditionsUpdatedEvent = TypedEvent<\n  [IDropClaimCondition.ClaimConditionStructOutput[]],\n  { claimConditions: IDropClaimCondition.ClaimConditionStructOutput[] }\n>;\n\nexport type ClaimConditionsUpdatedEventFilter =\n  TypedEventFilter<ClaimConditionsUpdatedEvent>;\n\nexport type MaxTotalSupplyUpdatedEvent = TypedEvent<\n  [BigNumber],\n  { maxTotalSupply: BigNumber }\n>;\n\nexport type MaxTotalSupplyUpdatedEventFilter =\n  TypedEventFilter<MaxTotalSupplyUpdatedEvent>;\n\nexport type MaxWalletClaimCountUpdatedEvent = TypedEvent<\n  [BigNumber],\n  { count: BigNumber }\n>;\n\nexport type MaxWalletClaimCountUpdatedEventFilter =\n  TypedEventFilter<MaxWalletClaimCountUpdatedEvent>;\n\nexport type PlatformFeeInfoUpdatedEvent = TypedEvent<\n  [string, BigNumber],\n  { platformFeeRecipient: string; platformFeeBps: BigNumber }\n>;\n\nexport type PlatformFeeInfoUpdatedEventFilter =\n  TypedEventFilter<PlatformFeeInfoUpdatedEvent>;\n\nexport type PrimarySaleRecipientUpdatedEvent = TypedEvent<\n  [string],\n  { recipient: string }\n>;\n\nexport type PrimarySaleRecipientUpdatedEventFilter =\n  TypedEventFilter<PrimarySaleRecipientUpdatedEvent>;\n\nexport type TokensClaimedEvent = TypedEvent<\n  [BigNumber, string, string, BigNumber],\n  {\n    claimConditionIndex: BigNumber;\n    claimer: string;\n    receiver: string;\n    quantityClaimed: BigNumber;\n  }\n>;\n\nexport type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;\n\nexport type TransferEvent = TypedEvent<\n  [string, string, BigNumber],\n  { from: string; to: string; value: BigNumber }\n>;\n\nexport type TransferEventFilter = TypedEventFilter<TransferEvent>;\n\nexport type WalletClaimCountUpdatedEvent = TypedEvent<\n  [string, BigNumber],\n  { wallet: string; count: BigNumber }\n>;\n\nexport type WalletClaimCountUpdatedEventFilter =\n  TypedEventFilter<WalletClaimCountUpdatedEvent>;\n\nexport interface IDropERC20 extends BaseContract {\n  contractName: string | \"IDropERC20\";\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: IDropERC20Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    allowance(\n      owner: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    claim(\n      _receiver: string,\n      _quantity: BigNumberish,\n      _currency: string,\n      _pricePerToken: BigNumberish,\n      _proofs: BytesLike[],\n      _proofMaxQuantityPerTransaction: BigNumberish,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    contractType(overrides?: CallOverrides): Promise<[string]>;\n\n    contractURI(overrides?: CallOverrides): Promise<[string]>;\n\n    contractVersion(overrides?: CallOverrides): Promise<[number]>;\n\n    getPlatformFeeInfo(\n      overrides?: CallOverrides\n    ): Promise<\n      [string, number] & {\n        platformFeeRecipient: string;\n        platformFeeBps: number;\n      }\n    >;\n\n    primarySaleRecipient(overrides?: CallOverrides): Promise<[string]>;\n\n    setClaimConditions(\n      _phases: IDropClaimCondition.ClaimConditionStruct[],\n      _resetLimitRestriction: boolean,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setContractURI(\n      _uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setPlatformFeeInfo(\n      _platformFeeRecipient: string,\n      _platformFeeBps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    setPrimarySaleRecipient(\n      _saleRecipient: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<ContractTransaction>;\n  };\n\n  allowance(\n    owner: string,\n    spender: string,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  approve(\n    spender: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  claim(\n    _receiver: string,\n    _quantity: BigNumberish,\n    _currency: string,\n    _pricePerToken: BigNumberish,\n    _proofs: BytesLike[],\n    _proofMaxQuantityPerTransaction: BigNumberish,\n    overrides?: PayableOverrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  contractType(overrides?: CallOverrides): Promise<string>;\n\n  contractURI(overrides?: CallOverrides): Promise<string>;\n\n  contractVersion(overrides?: CallOverrides): Promise<number>;\n\n  getPlatformFeeInfo(\n    overrides?: CallOverrides\n  ): Promise<\n    [string, number] & { platformFeeRecipient: string; platformFeeBps: number }\n  >;\n\n  primarySaleRecipient(overrides?: CallOverrides): Promise<string>;\n\n  setClaimConditions(\n    _phases: IDropClaimCondition.ClaimConditionStruct[],\n    _resetLimitRestriction: boolean,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setContractURI(\n    _uri: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setPlatformFeeInfo(\n    _platformFeeRecipient: string,\n    _platformFeeBps: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  setPrimarySaleRecipient(\n    _saleRecipient: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n  transfer(\n    to: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  transferFrom(\n    from: string,\n    to: string,\n    amount: BigNumberish,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    allowance(\n      owner: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    claim(\n      _receiver: string,\n      _quantity: BigNumberish,\n      _currency: string,\n      _pricePerToken: BigNumberish,\n      _proofs: BytesLike[],\n      _proofMaxQuantityPerTransaction: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    contractType(overrides?: CallOverrides): Promise<string>;\n\n    contractURI(overrides?: CallOverrides): Promise<string>;\n\n    contractVersion(overrides?: CallOverrides): Promise<number>;\n\n    getPlatformFeeInfo(\n      overrides?: CallOverrides\n    ): Promise<\n      [string, number] & {\n        platformFeeRecipient: string;\n        platformFeeBps: number;\n      }\n    >;\n\n    primarySaleRecipient(overrides?: CallOverrides): Promise<string>;\n\n    setClaimConditions(\n      _phases: IDropClaimCondition.ClaimConditionStruct[],\n      _resetLimitRestriction: boolean,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;\n\n    setPlatformFeeInfo(\n      _platformFeeRecipient: string,\n      _platformFeeBps: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    setPrimarySaleRecipient(\n      _saleRecipient: string,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n  };\n\n  filters: {\n    \"Approval(address,address,uint256)\"(\n      owner?: string | null,\n      spender?: string | null,\n      value?: null\n    ): ApprovalEventFilter;\n    Approval(\n      owner?: string | null,\n      spender?: string | null,\n      value?: null\n    ): ApprovalEventFilter;\n\n    \"ClaimConditionsUpdated(tuple[])\"(\n      claimConditions?: null\n    ): ClaimConditionsUpdatedEventFilter;\n    ClaimConditionsUpdated(\n      claimConditions?: null\n    ): ClaimConditionsUpdatedEventFilter;\n\n    \"MaxTotalSupplyUpdated(uint256)\"(\n      maxTotalSupply?: null\n    ): MaxTotalSupplyUpdatedEventFilter;\n    MaxTotalSupplyUpdated(\n      maxTotalSupply?: null\n    ): MaxTotalSupplyUpdatedEventFilter;\n\n    \"MaxWalletClaimCountUpdated(uint256)\"(\n      count?: null\n    ): MaxWalletClaimCountUpdatedEventFilter;\n    MaxWalletClaimCountUpdated(\n      count?: null\n    ): MaxWalletClaimCountUpdatedEventFilter;\n\n    \"PlatformFeeInfoUpdated(address,uint256)\"(\n      platformFeeRecipient?: null,\n      platformFeeBps?: null\n    ): PlatformFeeInfoUpdatedEventFilter;\n    PlatformFeeInfoUpdated(\n      platformFeeRecipient?: null,\n      platformFeeBps?: null\n    ): PlatformFeeInfoUpdatedEventFilter;\n\n    \"PrimarySaleRecipientUpdated(address)\"(\n      recipient?: string | null\n    ): PrimarySaleRecipientUpdatedEventFilter;\n    PrimarySaleRecipientUpdated(\n      recipient?: string | null\n    ): PrimarySaleRecipientUpdatedEventFilter;\n\n    \"TokensClaimed(uint256,address,address,uint256)\"(\n      claimConditionIndex?: BigNumberish | null,\n      claimer?: string | null,\n      receiver?: string | null,\n      quantityClaimed?: null\n    ): TokensClaimedEventFilter;\n    TokensClaimed(\n      claimConditionIndex?: BigNumberish | null,\n      claimer?: string | null,\n      receiver?: string | null,\n      quantityClaimed?: null\n    ): TokensClaimedEventFilter;\n\n    \"Transfer(address,address,uint256)\"(\n      from?: string | null,\n      to?: string | null,\n      value?: null\n    ): TransferEventFilter;\n    Transfer(\n      from?: string | null,\n      to?: string | null,\n      value?: null\n    ): TransferEventFilter;\n\n    \"WalletClaimCountUpdated(address,uint256)\"(\n      wallet?: string | null,\n      count?: null\n    ): WalletClaimCountUpdatedEventFilter;\n    WalletClaimCountUpdated(\n      wallet?: string | null,\n      count?: null\n    ): WalletClaimCountUpdatedEventFilter;\n  };\n\n  estimateGas: {\n    allowance(\n      owner: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    claim(\n      _receiver: string,\n      _quantity: BigNumberish,\n      _currency: string,\n      _pricePerToken: BigNumberish,\n      _proofs: BytesLike[],\n      _proofMaxQuantityPerTransaction: BigNumberish,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    contractType(overrides?: CallOverrides): Promise<BigNumber>;\n\n    contractURI(overrides?: CallOverrides): Promise<BigNumber>;\n\n    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getPlatformFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;\n\n    primarySaleRecipient(overrides?: CallOverrides): Promise<BigNumber>;\n\n    setClaimConditions(\n      _phases: IDropClaimCondition.ClaimConditionStruct[],\n      _resetLimitRestriction: boolean,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setContractURI(\n      _uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setPlatformFeeInfo(\n      _platformFeeRecipient: string,\n      _platformFeeBps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    setPrimarySaleRecipient(\n      _saleRecipient: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    allowance(\n      owner: string,\n      spender: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    approve(\n      spender: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    balanceOf(\n      account: string,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    claim(\n      _receiver: string,\n      _quantity: BigNumberish,\n      _currency: string,\n      _pricePerToken: BigNumberish,\n      _proofs: BytesLike[],\n      _proofMaxQuantityPerTransaction: BigNumberish,\n      overrides?: PayableOverrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    contractType(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getPlatformFeeInfo(\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    primarySaleRecipient(\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    setClaimConditions(\n      _phases: IDropClaimCondition.ClaimConditionStruct[],\n      _resetLimitRestriction: boolean,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setContractURI(\n      _uri: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setPlatformFeeInfo(\n      _platformFeeRecipient: string,\n      _platformFeeBps: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setPrimarySaleRecipient(\n      _saleRecipient: string,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    transfer(\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n\n    transferFrom(\n      from: string,\n      to: string,\n      amount: BigNumberish,\n      overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"],"mappings":"odAAA","names":[]}