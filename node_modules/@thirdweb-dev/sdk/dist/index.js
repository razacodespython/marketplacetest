var on=Object.create;var Yt=Object.defineProperty,nn=Object.defineProperties,sn=Object.getOwnPropertyDescriptor,cn=Object.getOwnPropertyDescriptors,pn=Object.getOwnPropertyNames,Pa=Object.getOwnPropertySymbols,dn=Object.getPrototypeOf,Ra=Object.prototype.hasOwnProperty,mn=Object.prototype.propertyIsEnumerable;var Or=(o,t,e)=>t in o?Yt(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e,T=(o,t)=>{for(var e in t||(t={}))Ra.call(t,e)&&Or(o,e,t[e]);if(Pa)for(var e of Pa(t))mn.call(t,e)&&Or(o,e,t[e]);return o},P=(o,t)=>nn(o,cn(t)),p=(o,t)=>Yt(o,"name",{value:t,configurable:!0});var ln=(o,t)=>{for(var e in t)Yt(o,e,{get:t[e],enumerable:!0})},Fa=(o,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of pn(t))!Ra.call(o,a)&&a!==e&&Yt(o,a,{get:()=>t[a],enumerable:!(r=sn(t,a))||r.enumerable});return o};var tt=(o,t,e)=>(e=o!=null?on(dn(o)):{},Fa(t||!o||!o.__esModule?Yt(e,"default",{value:o,enumerable:!0}):e,o)),un=o=>Fa(Yt({},"__esModule",{value:!0}),o);var f=(o,t,e)=>(Or(o,typeof t!="symbol"?t+"":t,e),e);var rs={};ln(rs,{AdminRoleMissingError:()=>zr,AssetNotFoundError:()=>Lr,AuctionAlreadyStartedError:()=>ve,AuctionHasNotEndedError:()=>xe,CONTRACTS_MAP:()=>Je,CONTRACT_ADDRESSES:()=>pr,ChainId:()=>h,ChainlinkVrf:()=>ce,ClaimConditionInputArray:()=>Yr,ClaimConditionInputSchema:()=>re,ClaimConditionOutputSchema:()=>nr,ClaimEligibility:()=>A,CommonContractOutputSchema:()=>I,CommonContractSchema:()=>x,CommonPlatformFeeSchema:()=>K,CommonPrimarySaleSchema:()=>dt,CommonRoyaltySchema:()=>_,CommonSymbolSchema:()=>J,CommonTrustedForwarderSchema:()=>D,ContractDeployer:()=>Ye,ContractEncoder:()=>W,ContractMetadata:()=>v,ContractPrimarySale:()=>mt,ContractRoles:()=>z,ContractRoyalty:()=>et,CurrencySchema:()=>La,CurrencyValueSchema:()=>Qr,DEFAULT_IPFS_GATEWAY:()=>ca,DEFAULT_QUERY_ALL_COUNT:()=>Oe,DelayedReveal:()=>Ke,DropErc1155ClaimConditions:()=>De,DropErc721ClaimConditions:()=>_e,DuplicateFileNameError:()=>be,DuplicateLeafsError:()=>We,Edition:()=>G,EditionDrop:()=>k,EditionMetadataInputSchema:()=>Dn,EditionMetadataOutputSchema:()=>Cr,EditionMetadataWithOwnerOutputSchema:()=>_n,Erc1155:()=>Zt,Erc1155SignatureMinting:()=>Me,Erc20:()=>Ne,Erc721:()=>zt,Erc721SignatureMinting:()=>Be,EventType:()=>lt,FetchError:()=>Ae,FileNameMissingError:()=>Ur,FunctionDeprecatedError:()=>Hr,GasCostEstimator:()=>E,InterfaceId_IERC1155:()=>Ft,InterfaceId_IERC721:()=>Rt,InvalidAddressError:()=>Mr,IpfsStorage:()=>Xe,ListingNotFoundError:()=>ht,ListingType:()=>N,Marketplace:()=>B,MarketplaceAuction:()=>Ue,MarketplaceDirect:()=>Le,MerkleSchema:()=>Ut,MintRequest1155:()=>oa,MintRequest721:()=>aa,MissingOwnerRoleError:()=>Vr,MissingRoleError:()=>Te,NATIVE_TOKENS:()=>Ma,NATIVE_TOKEN_ADDRESS:()=>Tt,NFTCollection:()=>V,NFTDrop:()=>L,NotEnoughTokensError:()=>$r,NotFoundError:()=>ct,OZ_DEFENDER_FORWARDER_ADDRESS:()=>ae,OptionalPropertiesInput:()=>Xr,OptionalPropertiesOutput:()=>ta,PINATA_IPFS_URL:()=>da,Pack:()=>M,PartialClaimConditionInputSchema:()=>wn,ProposalState:()=>la,QuantityAboveLimitError:()=>Gr,REMOTE_CONTRACT_NAME:()=>Wa,REMOTE_CONTRACT_TO_CONTRACT_TYPE:()=>va,RestrictedTransferError:()=>jr,SUPPORTED_CHAIN_IDS:()=>qr,Signature1155PayloadInput:()=>ea,Signature1155PayloadOutput:()=>ra,SignaturePayloadInput:()=>Pe,SignaturePayloadOutput:()=>cr,SnapshotAddress:()=>or,SnapshotInfoSchema:()=>yn,SnapshotInputSchema:()=>$t,SnapshotSchema:()=>te,Split:()=>j,TW_IPFS_SERVER_URL:()=>pa,ThirdwebSDK:()=>ka,Token:()=>O,TokenMintInputSchema:()=>es,TransactionError:()=>tr,UnderlyingType:()=>ya,UploadError:()=>Se,Vote:()=>H,VoteType:()=>Gt,WrongListingTypeError:()=>Ot,convertToTWError:()=>Zr,createSnapshot:()=>ma,getContractAddressByChainId:()=>oe,getNativeTokenByChainId:()=>Jr,getRoleHash:()=>R,hashLeafNode:()=>to});module.exports=un(rs);var Om=require("cross-fetch/polyfill");var W=class{constructor(t){this.contractWrapper=t}encode(t,e){return this.contractWrapper.readContract.interface.encodeFunctionData(t,e)}decode(t,e){return this.contractWrapper.readContract.interface.decodeFunctionData(t,e)}};p(W,"ContractEncoder");var v=class{constructor(t,e,r){this.contractWrapper=t,this.schema=e,this.storage=r}parseOutputMetadata(t){return this.schema.output.parse(t)}parseInputMetadata(t){return this.schema.input.parse(t)}async get(){let t=await this.contractWrapper.readContract.contractURI(),e=await this.storage.get(t);return this.parseOutputMetadata(e)}async set(t){let e=await this._parseAndUploadMetadata(t);return{receipt:await this.contractWrapper.sendTransaction("setContractURI",[e]),data:this.get}}async update(t){return await this.set(T(T({},await this.get()),t))}async _parseAndUploadMetadata(t){let e=this.parseInputMetadata(t);return this.storage.uploadMetadata(e)}};p(v,"ContractMetadata");var Br=require("ethers"),hn={admin:"",transfer:"TRANSFER_ROLE",minter:"MINTER_ROLE",pauser:"PAUSER_ROLE",editor:"EDITOR_ROLE",lister:"LISTER_ROLE",asset:"ASSET_ROLE"};function R(o){return o==="admin"?Br.ethers.utils.hexZeroPad([0],32):Br.ethers.utils.id(hn[o])}p(R,"getRoleHash");var Bt=tt(require("tiny-invariant"));var ct=class extends Error{constructor(t){super(t?`Object with id ${t} NOT FOUND`:"NOT_FOUND")}};p(ct,"NotFoundError");var Mr=class extends Error{constructor(t){super(t?`'${t}' is an invalid address`:"Invalid address passed")}};p(Mr,"InvalidAddressError");var Te=class extends Error{constructor(t,e){super(`MISSING ROLE: ${t} does not have the '${e}' role`)}};p(Te,"MissingRoleError");var Lr=class extends Error{constructor(t="The asset you're trying to use could not be found."){super(`message: ${t}`)}};p(Lr,"AssetNotFoundError");var Se=class extends Error{constructor(t){super(`UPLOAD_FAILED: ${t}`)}};p(Se,"UploadError");var Ur=class extends Error{constructor(){super("File name is required when object is not a `File` type object.")}};p(Ur,"FileNameMissingError");var be=class extends Error{constructor(t){super(`DUPLICATE_FILE_NAME_ERROR: File name ${t} was passed for more than one file.`)}};p(be,"DuplicateFileNameError");var $r=class extends Error{constructor(t,e,r){super(`BALANCE ERROR: you do not have enough balance on contract ${t} to use ${e} tokens. You have ${r} tokens available.`)}};p($r,"NotEnoughTokensError");var Vr=class extends Error{constructor(){super("LIST ERROR: you should be the owner of the token to list it.")}};p(Vr,"MissingOwnerRoleError");var Gr=class extends Error{constructor(t){super(`BUY ERROR: You cannot buy more than ${t} tokens`)}};p(Gr,"QuantityAboveLimitError");var Ae=class extends Error{constructor(t,e){super(`FETCH_FAILED: ${t}`);this.innerError=e}};p(Ae,"FetchError");var We=class extends Error{constructor(t){super(`DUPLICATE_LEAFS${t?` : ${t}`:""}`)}};p(We,"DuplicateLeafsError");var ve=class extends Error{constructor(t){super(`Auction already started with existing bid${t?`, id: ${t}`:""}`)}};p(ve,"AuctionAlreadyStartedError");var Hr=class extends Error{constructor(t){super(`FUNCTION DEPRECATED. ${t?`Use ${t} instead`:""}`)}};p(Hr,"FunctionDeprecatedError");var ht=class extends Error{constructor(t,e){super(`Could not find listing.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}`)}};p(ht,"ListingNotFoundError");var Ot=class extends Error{constructor(t,e,r,a){super(`Incorrect listing type. Are you sure you're using the right method?.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}${a?` expected type: ${a}`:""}${r?` actual type: ${r}`:""}`)}};p(Ot,"WrongListingTypeError");var jr=class extends Error{constructor(t){super(`Failed to transfer asset, transfer is restricted.${t?` Address : ${t}`:""}`)}};p(jr,"RestrictedTransferError");var zr=class extends Error{constructor(t,e,r="Failed to execute transaction"){super(`${r}, admin role is missing${t?` on address: ${t}`:""}${e?` on contract: ${e}`:""}`)}};p(zr,"AdminRoleMissingError");var xe=class extends Error{constructor(t,e){super(`Auction has not ended yet${t?`, id: ${t}`:""}${e?`, end time: ${e.toString()}`:""}`)}};p(xe,"AuctionHasNotEndedError");var tr=class extends Error{constructor(t,e,r,a,n,s,i){let c=`Contract transaction failed

`;c+=`Message: ${t}`,c+=`

| Transaction info |
`,c+=we("from",e),c+=we("to",r),c+=we("data",a),c+=we("chain",`${n.name} (${n.chainId})`);try{let d=new URL(s);c+=we("RPC",d.hostname)}catch{}c+=`

`,c+="Need help with this error? Join our community: https://discord.gg/thirdweb",c+=`



`,c+="| Raw error |",c+=`

`,c+=i;super(c);this.reason=t,this.from=e,this.to=r,this.data=a,this.chain=n,this.rpcUrl=s}};p(tr,"TransactionError");async function Zr(o,t,e,r){let a;if(o.data)a=JSON.stringify(o.data);else if(o instanceof Error)a=o.message;else return o;let n=Ce(/.*?"message[^a-zA-Z0-9]*([^"\\]*).*?/,a),s=Ce(/.*?"data[^a-zA-Z0-9]*([^"\\]*).*?/,a),i=Ce(/.*?"url[^a-zA-Z0-9]*([^"\\]*).*?/,a),c=Ce(/.*?"from[^a-zA-Z0-9]*([^"\\]*).*?/,a),d=Ce(/.*?"to[^a-zA-Z0-9]*([^"\\]*).*?/,a);return d===""&&(d=r),c===""&&(c=e),new tr(n,c,d,s,t,i,a)}p(Zr,"convertToTWError");function we(o,t){if(t==="")return t;let e=Array(10-o.length).fill(" ").join("");return`
${o}:${e}${t}`}p(we,"withSpaces");function Ce(o,t){let e=t.match(o)||[],r="";return(e==null?void 0:e.length)>0&&(r+=e[1]),r}p(Ce,"parseMessageParts");var z=class{constructor(t,e){this.contractWrapper=t,this.roles=e}async getAll(){(0,Bt.default)(this.roles.length,"this contract has no support for roles");let t={};for(let e of this.roles)t[e]=await this.get(e);return t}async get(t){(0,Bt.default)(this.roles.includes(t),`this contract does not support the "${t}" role`);let e=R(t),r=(await this.contractWrapper.readContract.getRoleMemberCount(e)).toNumber();return await Promise.all(Array.from(Array(r).keys()).map(a=>this.contractWrapper.readContract.getRoleMember(e,a)))}async setAll(t){let e=Object.keys(t);(0,Bt.default)(e.length,"you must provide at least one role to set"),(0,Bt.default)(e.every(n=>this.roles.includes(n)),"this contract does not support the given role");let r=await this.getAll(),a=[];return e.sort(n=>n==="admin"?1:-1).forEach(async n=>{let s=t[n]||[],i=r[n]||[],c=s.filter(m=>!i.includes(m)),d=i.filter(m=>!s.includes(m));c.length&&c.forEach(m=>{a.push(this.contractWrapper.readContract.interface.encodeFunctionData("grantRole",[R(n),m]))}),d.length&&d.forEach(async m=>{let u=await this.getRevokeRoleFunctionName(m);a.push(this.contractWrapper.readContract.interface.encodeFunctionData(u,[R(n),m]))})}),{receipt:await this.contractWrapper.multiCall(a)}}async verify(t,e){await Promise.all(t.map(async r=>{if(!(await this.get(r)).map(n=>n.toLowerCase()).includes(e.toLowerCase()))throw new Te(e,r)}))}async grant(t,e){return(0,Bt.default)(this.roles.includes(t),`this contract does not support the "${t}" role`),{receipt:await this.contractWrapper.sendTransaction("grantRole",[R(t),e])}}async revoke(t,e){(0,Bt.default)(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=await this.getRevokeRoleFunctionName(e);return{receipt:await this.contractWrapper.sendTransaction(r,[R(t),e])}}async getRevokeRoleFunctionName(t){return(await this.contractWrapper.getSignerAddress()).toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}};p(z,"ContractRoles");var er=require("ethers"),Ia=require("ethers/lib/utils"),y=require("zod");globalThis.File||(globalThis.File=require("@web-std/file").File);var Kr=1e4,fn=p(()=>typeof window<"u","isBrowser"),gn=fn()?[y.z.instanceof(File),y.z.string()]:[y.z.instanceof(Buffer),y.z.string()],Lt=y.z.union(gn),_a=y.z.union([y.z.array(y.z.number()),y.z.string()]),S=y.z.union([y.z.string(),y.z.number(),y.z.bigint(),y.z.instanceof(er.BigNumber)]).transform(o=>er.BigNumber.from(o)),pt=S.transform(o=>o.toString()),xt=y.z.number().max(Kr,"Cannot exeed 100%").min(0,"Cannot be below 0%"),Da=y.z.number().max(100,"Cannot exeed 100%").min(0,"Cannot be below 0%"),rr=y.z.union([y.z.string(),y.z.number(),y.z.boolean(),y.z.null()]),Mt=y.z.lazy(()=>y.z.union([rr,y.z.array(Mt),y.z.record(Mt)])),ms=y.z.record(Mt),Na=y.z.union([y.z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,"Invalid hex color").transform(o=>o.replace("#","")),y.z.string().length(0)]),nt=y.z.string().refine(o=>(0,Ia.isAddress)(o),o=>({message:`${o} is not a valid address`})),Et=y.z.union([y.z.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/,"Invalid price"),y.z.number().min(0,"Price cannot be negative")]).transform(o=>typeof o=="number"?o.toString():o),Oa=y.z.date().transform(o=>er.BigNumber.from(Math.floor(o.getTime()/1e3))),ar=Oa.default(new Date),Ba=Oa.default(new Date(Date.now()+1e3*60*60*24*365*10));var na=require("@ethersproject/constants"),Y=require("zod");var ee=require("zod"),Ee=require("ethers");var Ua=require("ethers/lib/utils");var h;(function(o){o[o.Mainnet=1]="Mainnet",o[o.Ropsten=3]="Ropsten",o[o.Rinkeby=4]="Rinkeby",o[o.Goerli=5]="Goerli",o[o.Kovan=42]="Kovan",o[o.BSC=56]="BSC",o[o.xDai=100]="xDai",o[o.Polygon=137]="Polygon",o[o.Moonriver=1285]="Moonriver",o[o.Mumbai=80001]="Mumbai",o[o.Harmony=16666e5]="Harmony",o[o.Localhost=1337]="Localhost",o[o.Hardhat=31337]="Hardhat",o[o.Fantom=250]="Fantom",o[o.FantomTestnet=4002]="FantomTestnet",o[o.Avalanche=43114]="Avalanche",o[o.AvalancheFujiTestnet=43113]="AvalancheFujiTestnet"})(h||(h={}));var qr=[h.Mainnet,h.Rinkeby,h.Goerli,h.Polygon,h.Mumbai,h.Fantom,h.FantomTestnet,h.Avalanche,h.AvalancheFujiTestnet];var Tt="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",Ma={[h.Mainnet]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",name:"Wrapped Ether",symbol:"WETH"}},[h.Rinkeby]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xc778417E063141139Fce010982780140Aa0cD5Ab",name:"Wrapped Ether",symbol:"WETH"}},[h.Goerli]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7",name:"Wrapped Ether",symbol:"WETH"}},[h.Polygon]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",name:"Wrapped Matic",symbol:"WMATIC"}},[h.Mumbai]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",name:"Wrapped Matic",symbol:"WMATIC"}},[h.Avalanche]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",name:"Wrapped AVAX",symbol:"WAVAX"}},[h.AvalancheFujiTestnet]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xd00ae08403B9bbb9124bB305C09058E32C39A48c",name:"Wrapped AVAX",symbol:"WAVAX"}},[h.Fantom]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",name:"Wrapped Fantom",symbol:"WFTM"}},[h.FantomTestnet]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0xf1277d1Ed8AD466beddF92ef448A132661956621",name:"Wrapped Fantom",symbol:"WFTM"}},[h.Hardhat]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x5FbDB2315678afecb367f032d93F642f64180aa3",name:"Wrapped Ether",symbol:"WETH"}}};function Jr(o){return Ma[o]}p(Jr,"getNativeTokenByChainId");var Xt=require("zod");var La=Xt.z.object({name:Xt.z.string(),symbol:Xt.z.string(),decimals:Xt.z.number()}),Qr=La.extend({value:S,displayValue:Xt.z.string()});var F=require("zod"),Ut=F.z.object({merkle:F.z.record(F.z.string()).default({})}),or=F.z.object({address:F.z.string(),maxClaimable:F.z.number().default(0)}),$t=F.z.union([F.z.array(F.z.string()).transform(o=>o.map(t=>or.parse({address:t}))),F.z.array(or)]),te=F.z.object({merkleRoot:F.z.string(),claims:F.z.array(or.extend({proof:F.z.array(F.z.string())}))}),yn=F.z.object({merkleRoot:F.z.string(),snapshotUri:F.z.string(),snapshot:te});var re=ee.z.object({startTime:ar,currencyAddress:ee.z.string().default(Tt),price:Et.default(0),maxQuantity:pt.default(Ee.ethers.constants.MaxUint256),quantityLimitPerTransaction:pt.default(Ee.ethers.constants.MaxUint256),waitInSeconds:pt.default(0),merkleRootHash:_a.default((0,Ua.hexZeroPad)([0],32)),snapshot:ee.z.optional($t)}),Yr=ee.z.array(re),wn=re.partial(),nr=re.extend({availableSupply:ee.z.string().default(""),currencyMetadata:Qr.default({value:Ee.BigNumber.from("0"),displayValue:"0",symbol:"",decimals:18,name:""}),price:S,maxQuantity:S,quantityLimitPerTransaction:S,waitInSeconds:S,startTime:S.transform(o=>new Date(o.toNumber()*1e3))});var kt=require("zod");var ft=require("zod");var St=require("zod");var $a=rr.or(Lt),Cn=St.z.union([St.z.array(St.z.object({key:St.z.string(),value:$a})).superRefine((o,t)=>{if(!o)return;let e={};o.forEach(({key:r},a)=>{e[r]||(e[r]=0),e[r]++,e[r]>1&&t.addIssue({code:St.z.ZodIssueCode.custom,message:`Duplicate key: ${r}`,path:[a,"key"]})})}),St.z.record($a)]).optional(),Xr=St.z.preprocess(o=>{let t=o;return Array.isArray(t)?t.filter(e=>e.value):t},Cn).transform(o=>Array.isArray(o)?o.reduce((t,e)=>P(T({},t),{[e.key]:e.value}),{}):o),ta=St.z.record(rr).optional();var Va=ft.z.object({name:ft.z.string().nonempty({message:"A name is required."}),description:ft.z.string().optional(),image:Lt.optional(),external_url:ft.z.string().optional()}).catchall(ft.z.lazy(()=>Mt)),Tn=Va.extend({id:S,uri:ft.z.string(),image:ft.z.string().optional(),external_url:ft.z.string().optional()}),Z=Va.extend({animation_url:Lt.optional(),background_color:Na.optional(),properties:Xr}),sr=Tn.extend({animation_url:ft.z.string().optional(),properties:ta});var ir=require("@ethersproject/constants"),ja=require("ethers");var Ga=require("uuid"),ke=require("ethers/lib/utils");function Ha(o){if(o===void 0){let t=Buffer.alloc(16);return(0,Ga.v4)({},t),(0,ke.hexlify)((0,ke.toUtf8Bytes)(t.toString("hex")))}else return(0,ke.hexlify)(o)}p(Ha,"resolveOrGenerateId");var Pe=kt.z.object({metadata:Z,to:kt.z.string().default(ir.AddressZero),price:Et.default(0),currencyAddress:kt.z.string().default(Tt),mintStartTime:ar,mintEndTime:Ba,uid:kt.z.string().optional().transform(o=>Ha(o)),royaltyRecipient:kt.z.string().default(ir.AddressZero),royaltyBps:xt.default(0),primarySaleRecipient:kt.z.string().default(ir.AddressZero)}),cr=Pe.extend({uri:kt.z.string(),royaltyBps:S,mintStartTime:S,mintEndTime:S}),ea=Pe.extend({tokenId:pt.default(ja.ethers.constants.MaxUint256),quantity:pt}),ra=cr.extend({tokenId:S,quantity:S}),aa=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"uri",type:"string"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],oa=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"tokenId",type:"uint256"},{name:"uri",type:"string"},{name:"quantity",type:"uint256"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}];var x=Y.z.object({name:Y.z.string(),description:Y.z.string().optional(),image:Lt.optional(),external_link:Y.z.string().url().optional()}),I=x.extend({image:Y.z.string().optional()}).catchall(Y.z.lazy(()=>Mt)),_=Y.z.object({seller_fee_basis_points:xt.default(0),fee_recipient:nt.default(na.AddressZero)}),dt=Y.z.object({primary_sale_recipient:nt}),K=Y.z.object({platform_fee_basis_points:xt.default(0),platform_fee_recipient:nt.default(na.AddressZero)}),D=Y.z.object({trusted_forwarders:Y.z.array(nt).default([])}),J=Y.z.object({symbol:Y.z.string().optional().default("")});var et=class{constructor(t,e){this.contractWrapper=t,this.metadata=e}async getDefaultRoyaltyInfo(){let[t,e]=await this.contractWrapper.readContract.getDefaultRoyaltyInfo();return _.parse({fee_recipient:t,seller_fee_basis_points:e})}async getTokenRoyaltyInfo(t){let[e,r]=await this.contractWrapper.readContract.getRoyaltyInfoForToken(t);return _.parse({fee_recipient:e,seller_fee_basis_points:r})}async setDefaultRoyaltyInfo(t){let e=await this.metadata.get(),r=this.metadata.parseInputMetadata(T(T({},e),t)),a=await this.metadata._parseAndUploadMetadata(r),n=[this.contractWrapper.readContract.interface.encodeFunctionData("setDefaultRoyaltyInfo",[r.fee_recipient,r.seller_fee_basis_points]),this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[a])];return{receipt:await this.contractWrapper.multiCall(n),data:()=>this.getDefaultRoyaltyInfo()}}async setTokenRoyaltyInfo(t,e){return{receipt:await this.contractWrapper.sendTransaction("setRoyaltyInfoForToken",[t,e.fee_recipient,e.seller_fee_basis_points]),data:()=>this.getDefaultRoyaltyInfo()}}};p(et,"ContractRoyalty");var mt=class{constructor(t){this.contractWrapper=t}async getRecipient(){return await this.contractWrapper.readContract.primarySaleRecipient()}async setRecipient(t){return{receipt:await this.contractWrapper.sendTransaction("setPrimarySaleRecipient",[t])}}};p(mt,"ContractPrimarySale");var so=require("@thirdweb-dev/contracts"),me=require("ethers");var ro=require("@ethersproject/constants");var b=require("ethers");var ne=require("@ethersproject/providers"),gt=require("ethers"),za=require("eventemitter2");var Re=require("@ethersproject/constants");var ae="0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81",bt="0x7c487845f98938Bb955B1D5AD069d9a30e4131fd",At="0x11c34F062Cb10a20B9F463E12Ff9dA62D76FDf65",pr={[h.Mainnet]:{biconomyForwarder:"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693",twFactory:At,twRegistry:bt},[h.Rinkeby]:{biconomyForwarder:"0xFD4973FeB2031D4409fB57afEE5dF2051b171104",twFactory:At,twRegistry:bt},[h.Goerli]:{biconomyForwarder:Re.AddressZero,twFactory:At,twRegistry:bt},[h.Polygon]:{biconomyForwarder:"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8",twFactory:At,twRegistry:bt},[h.Mumbai]:{biconomyForwarder:"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",twFactory:At,twRegistry:bt},[h.Avalanche]:{biconomyForwarder:"0x64CD353384109423a966dCd3Aa30D884C9b2E057",twFactory:At,twRegistry:bt},[h.AvalancheFujiTestnet]:{biconomyForwarder:"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF",twFactory:At,twRegistry:bt},[h.Fantom]:{biconomyForwarder:Re.AddressZero,twFactory:At,twRegistry:bt},[h.FantomTestnet]:{biconomyForwarder:Re.AddressZero,twFactory:At,twRegistry:bt}};function oe(o,t){return o===h.Hardhat?t==="twFactory"?process.env.factoryAddress:t==="twRegistry"?process.env.registryAddress:Re.AddressZero:pr[o][t]}p(oe,"getContractAddressByChainId");var U=require("zod"),st=U.z.object({readonlySettings:U.z.object({rpcUrl:U.z.string().url(),chainId:U.z.number().optional()}).optional(),gasSettings:U.z.object({maxPriceInGwei:U.z.number().min(1,"gas price cannot be less than 1").default(300),speed:U.z.enum(["standard","fast","fastest"]).default("fastest")}).default({maxPriceInGwei:300,speed:"fastest"}),gasless:U.z.union([U.z.object({openzeppelin:U.z.object({relayerUrl:U.z.string().url(),relayerForwarderAddress:U.z.string().default(ae)})}),U.z.object({biconomy:U.z.object({apiId:U.z.string(),apiKey:U.z.string(),deadlineSeconds:U.z.number().min(1,"deadlineSeconds cannot be les than 1").default(3600)})})]).optional()}).default({gasSettings:{maxPriceInGwei:300,speed:"fastest"}});var Pt=class extends za.EventEmitter2{constructor(t,e){super();let[r,a]=this.getSignerAndProvider(t,e);this.signer=r,this.provider=a;try{this.options=st.parse(e)}catch(n){console.error("invalid sdk options object passed, falling back to default options",n),this.options=st.parse({})}}updateSignerOrProvider(t){let[e,r]=this.getSignerAndProvider(t,this.options);this.signer=e,this.provider=r}isReadOnly(){return!gt.Signer.isSigner(this.signer)}getSigner(){return this.signer}getProvider(){return this.provider}getSignerOrProvider(){return this.getSigner()||this.getProvider()}getSignerAndProvider(t,e){var n;let r,a;return gt.Signer.isSigner(t)&&(r=t,t.provider&&(a=t.provider)),e!=null&&e.readonlySettings&&(a=this.getReadOnlyProvider(e.readonlySettings.rpcUrl,e.readonlySettings.chainId)),a||(ne.Provider.isProvider(t)?a=t:gt.Signer.isSigner(t)||(typeof t=="string"?a=this.getReadOnlyProvider(t,(n=e==null?void 0:e.readonlySettings)==null?void 0:n.chainId):a=gt.ethers.getDefaultProvider(t))),a||(a=gt.ethers.getDefaultProvider(),console.error("No provider found, using default provider on default chain!")),[r,a]}getReadOnlyProvider(t,e){try{let r=t.match(/^(ws|http)s?:/i);if(r)switch(r[1]){case"http":return new ne.JsonRpcBatchProvider(t,e);case"ws":return new ne.WebSocketProvider(t,e);default:return gt.ethers.getDefaultProvider(t)}else return gt.ethers.getDefaultProvider(t)}catch{return gt.ethers.getDefaultProvider(t)}}};p(Pt,"RPCConnectionHandler");var lt;(function(o){o.Transaction="transaction",o.Signature="signature"})(lt||(lt={}));var Vt=tt(require("tiny-invariant"));var dr=require("ethers"),Ka=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],qa=[{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"batchId",type:"uint256"}],name:"getNonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],se={},Za={};async function sa(o,t,e){let r=e.join("|"),a=Za[r],n=Date.now()-a>=2e3;if(!(r in se)||n){let i=await o.functions[t](...e);Array.isArray(i)&&i.length>0?se[r]=dr.BigNumber.from(i[0]):se[r]=dr.BigNumber.from(i),Za[r]=Date.now()}let s=se[r];return se[r]=dr.BigNumber.from(se[r]).add(1),s}p(sa,"getAndIncrementNonce");var eo=require("@thirdweb-dev/contracts");var yt=require("ethers");var mr=require("ethers");async function Fe(o,t,e,r){var i,c;let a=o==null?void 0:o.provider;if(!a)throw new Error("missing provider");let n=mr.ethers.utils._TypedDataEncoder.getPayload(t,e,r),s="";if((i=a==null?void 0:a.provider)!=null&&i.isWalletConnect)s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else try{s=await o._signTypedData(t,e,r)}catch(d){if((c=d==null?void 0:d.message)!=null&&c.includes("Method eth_signTypedData_v4 not supported"))s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else throw d}return{payload:n,signature:mr.ethers.utils.joinSignature(mr.ethers.utils.splitSignature(s))}}p(Fe,"signTypedDataInternal");var Sn=[{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],bn=[{constant:!0,inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],name:"getDomainSeperator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}],An=[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNonce",outputs:[{internalType:"uint256",name:"nonce",type:"uint256"}],stateMutability:"view",type:"function"}];async function Wn(o,t){let e=new yt.Contract(t,An,o);try{return await e.nonces(await o.getAddress())}catch{return await e.getNonce(await o.getAddress())}}p(Wn,"getSignerNonce");async function vn(o,t){let e=new yt.Contract(t,bn,o);try{return await e.DOMAIN_SEPARATOR()}catch{return await e.getDomainSeperator()}}p(vn,"getDomainSeperator");async function xn(o,t){return new yt.Contract(t,Sn,o).name()}p(xn,"getTokenName");async function En(o,t){let e=await vn(o,t.verifyingContract),r={name:t.name,version:t.version,verifyingContract:t.verifyingContract,salt:yt.ethers.utils.hexZeroPad(yt.BigNumber.from(t.chainId).toHexString(),32)};return yt.ethers.utils._TypedDataEncoder.hashDomain(r)===e?r:t}p(En,"getChainDomainSeperator");async function Ja(o,t,e,r,a,n,s){let i=await En(o,{name:await xn(o,t),version:"1",chainId:await o.getChainId(),verifyingContract:t});s=s!=null?s:(await Wn(o,t)).toString(),n=n!=null?n:yt.ethers.constants.MaxUint256;let c={owner:e,spender:r,value:a,nonce:s,deadline:n},d={Permit:[{name:"owner",type:"address"},{name:"spender",type:"address"},{name:"value",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]},{signature:m}=await Fe(o,i,d,c);return{message:c,signature:m}}p(Ja,"signEIP2612Permit");var lr=require("ethers");function kn(o){switch(o){case h.Polygon:return"https://gasstation-mainnet.matic.network/v2";case h.Mumbai:return"https://gasstation-mumbai.matic.today/v2"}}p(kn,"getGasStationUrl");var Pn=lr.ethers.utils.parseUnits("31","gwei"),Rn=lr.ethers.utils.parseUnits("1","gwei");function Fn(o){switch(o){case h.Polygon:return Pn;case h.Mumbai:return Rn}}p(Fn,"getDefaultGasFee");async function Qa(o){let t=kn(o);try{let r=(await(await fetch(t)).json()).standard.maxPriorityFee;if(r>0){let a=parseFloat(r).toFixed(9);return lr.ethers.utils.parseUnits(a,"gwei")}}catch(e){console.error("failed to fetch gas",e)}return Fn(o)}p(Qa,"getPolygonGasPriorityFee");var ie=require("ethers");var ce={[h.Polygon]:{vrfCoordinator:"0x3d2341ADb2D31f1c5530cDC622016af293177AE0",linkTokenAddress:"0xb0897686c545045aFc77CF20eC7A532E3120E0F1",keyHash:"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",fees:ie.ethers.utils.parseEther("0.0001")},[h.Mumbai]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:ie.ethers.utils.parseEther("0.0001")},[h.Rinkeby]:{vrfCoordinator:"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",linkTokenAddress:"0x01be23585060835e02b77ef475b0cc51aa1e0709",keyHash:"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",fees:ie.ethers.utils.parseEther("0.1")},[h.Mainnet]:{vrfCoordinator:"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",linkTokenAddress:"0x514910771AF9Ca656af840dff83E8264EcF986CA",keyHash:"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",fees:ie.ethers.utils.parseEther("2")},[h.Hardhat]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:ie.ethers.utils.parseEther("0.0001")}};var ia=require("ethers/lib/utils"),Rt=(0,ia.arrayify)("0x80ac58cd"),Ft=(0,ia.arrayify)("0xd9b67a26");var ca="https://gateway.ipfscdn.io/ipfs/",pa="https://upload.nftlabs.co",da="https://api.pinata.cloud/pinning/pinFileToIPFS";var Ya=tt(require("merkletreejs"));var Xa=tt(require("keccak256")),ur=require("ethers");async function ma(o,t){let e=$t.parse(o),r=e.map(d=>d.address);if(new Set(r).size<r.length)throw new We;let n=e.map(d=>to(d.address,d.maxClaimable)),s=new Ya.default(n,Xa.default,{sort:!0}),i=te.parse({merkleRoot:s.getHexRoot(),claims:e.map((d,m)=>{let u=s.getHexProof(n[m]);return{address:d.address,maxClaimable:d.maxClaimable,proof:u}})}),c=await t.uploadMetadata(i);return{merkleRoot:s.getHexRoot(),snapshotUri:c,snapshot:i}}p(ma,"createSnapshot");function to(o,t){return ur.ethers.utils.solidityKeccak256(["address","uint256"],[o,ur.BigNumber.from(t)])}p(to,"hashLeafNode");var w=class extends Pt{constructor(t,e,r,a){super(t,a);this.writeContract=new b.Contract(e,r,this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.writeContract=this.writeContract.connect(this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}async getChainID(){let t=this.getProvider(),{chainId:e}=await t.getNetwork();return e}async getSignerAddress(){let t=this.getSigner();if(!t)throw new Error("This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.");return await t.getAddress()}callStatic(){return this.writeContract.callStatic}async getCallOverrides(){let t=await this.getProvider().getFeeData();if(t.maxFeePerGas&&t.maxPriorityFeePerGas){let r=await this.getChainID(),a=await this.getProvider().getBlock("latest"),n=a&&a.baseFeePerGas?a.baseFeePerGas:b.ethers.utils.parseUnits("1","gwei"),s;r===h.Mumbai||r===h.Polygon?s=await Qa(r):s=b.BigNumber.from(t.maxPriorityFeePerGas);let i=this.getPreferredPriorityFee(s);return{maxFeePerGas:n.mul(2).add(i),maxPriorityFeePerGas:i}}else return{gasPrice:await this.getPreferredGasPrice()}}getPreferredPriorityFee(t){let e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a;switch(e){case"standard":a=b.BigNumber.from(0);break;case"fast":a=t.div(100).mul(5);break;case"fastest":a=t.div(100).mul(10);break}let n=t.add(a),s=b.ethers.utils.parseUnits(r.toString(),"gwei"),i=b.ethers.utils.parseUnits("2.5","gwei");return n.gt(s)&&(n=s),n.lt(i)&&(n=i),n}async getPreferredGasPrice(){let t=await this.getProvider().getGasPrice(),e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a=t,n;switch(e){case"standard":n=b.BigNumber.from(1);break;case"fast":n=t.div(100).mul(5);break;case"fastest":n=t.div(100).mul(10);break}a=a.add(n);let s=b.ethers.utils.parseUnits(r.toString(),"gwei");return a.gt(s)&&(a=s),a}emitTransactionEvent(t,e){this.emit(lt.Transaction,{status:t,transactionHash:e})}async multiCall(t){return this.sendTransaction("multicall",[t])}async estimateGas(t,e){return this.writeContract.estimateGas[t](...e)}async sendTransaction(t,e,r){var a;if(r||(r=await this.getCallOverrides()),((a=this.options)==null?void 0:a.gasless)&&("openzeppelin"in this.options.gasless||"biconomy"in this.options.gasless)){let n=this.getProvider(),s=await this.sendGaslessTransaction(t,e,r);this.emitTransactionEvent("submitted",s);let i=await n.waitForTransaction(s);return this.emitTransactionEvent("completed",s),i}else{let n=await this.sendTransactionByFunction(t,e,r);this.emitTransactionEvent("submitted",n.hash);let s=n.wait();return this.emitTransactionEvent("completed",n.hash),s}}async sendTransactionByFunction(t,e,r){let a=this.writeContract.functions[t];if(!a)throw new Error("invalid function");try{return await a(...e,r)}catch(n){let s=await this.getProvider().getNetwork(),i=await this.getSignerAddress(),c=await this.readContract.address;throw await Zr(n,s,i,c)}}async sendGaslessTransaction(t,e=[],r){let a=this.getSigner();(0,Vt.default)(a,"Cannot execute gasless transaction without valid signer");let n=await this.getChainID(),s=await this.getSignerAddress(),i=this.writeContract.address,c=(r==null?void 0:r.value)||0;if(b.BigNumber.from(c).gt(0))throw new Error("Cannot send native token value with gasless transaction");let d=this.writeContract.interface.encodeFunctionData(t,e),m=await this.writeContract.estimateGas[t](...e),u=m.mul(2);m.lt(25e3)&&(u=b.BigNumber.from(5e5));let g={from:s,to:i,data:d,chainId:n,gasLimit:u,functionName:t.toString(),functionArgs:e,callOverrides:r};return await this.defaultGaslessSendFunction(g)}async signTypedData(t,e,r,a){this.emit(lt.Signature,{status:"submitted",message:a,signature:""});let{signature:n}=await Fe(t,e,r,a);return this.emit(lt.Signature,{status:"completed",message:a,signature:n}),n}parseLogs(t,e){if(!e||e.length===0)return[];let r=this.writeContract.interface.getEventTopic(t);return e.filter(n=>n.topics.indexOf(r)>=0).map(n=>this.writeContract.interface.parseLog(n))}async defaultGaslessSendFunction(t){return this.options.gasless&&"biconomy"in this.options.gasless?this.biconomySendFunction(t):this.defenderSendFunction(t)}async biconomySendFunction(t){var u,g;(0,Vt.default)(this.options.gasless&&"biconomy"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();(0,Vt.default)(e&&r,"signer and provider must be set");let a=new b.ethers.Contract(oe(t.chainId,"biconomyForwarder"),qa,r),n=0,s=await sa(a,"getNonce",[t.from,n]),i={from:t.from,to:t.to,token:b.ethers.constants.AddressZero,txGas:t.gasLimit.toNumber(),tokenGasPrice:"0",batchId:n,batchNonce:s.toNumber(),deadline:Math.floor(Date.now()/1e3+(((u=this.options)==null?void 0:u.gasless)&&"biconomy"in this.options.gasless&&((g=this.options.gasless.biconomy)==null?void 0:g.deadlineSeconds)||3600)),data:t.data},c=b.ethers.utils.arrayify(b.ethers.utils.solidityKeccak256(["address","address","address","uint256","uint256","uint256","uint256","uint256","bytes32"],[i.from,i.to,i.token,i.txGas,i.tokenGasPrice,i.batchId,i.batchNonce,i.deadline,b.ethers.utils.keccak256(i.data)]));this.emit(lt.Signature,{status:"submitted",message:c,signature:""});let d=await e.signMessage(c);this.emit(lt.Signature,{status:"completed",message:c,signature:d});let m=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:JSON.stringify({from:t.from,apiId:this.options.gasless.biconomy.apiId,params:[i,d],to:t.to,gasLimit:t.gasLimit.toHexString()}),headers:{"x-api-key":this.options.gasless.biconomy.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(m.ok){let C=await m.json();if(!C.txHash)throw new Error(`relay transaction failed: ${C.log}`);return C.txHash}throw new Error(`relay transaction failed with status: ${m.status} (${m.statusText})`)}async defenderSendFunction(t){(0,Vt.default)(this.options.gasless&&"openzeppelin"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();(0,Vt.default)(e,"provider is not set"),(0,Vt.default)(r,"provider is not set");let a=this.options.gasless.openzeppelin.relayerForwarderAddress,n=eo.Forwarder__factory.connect(a,r),s=await sa(n,"getNonce",[t.from]),i={name:"GSNv2 Forwarder",version:"0.0.1",chainId:t.chainId,verifyingContract:a},c={ForwardRequest:Ka},d={from:t.from,to:t.to,value:b.BigNumber.from(0).toString(),gas:b.BigNumber.from(t.gasLimit).toString(),nonce:b.BigNumber.from(s).toString(),data:t.data},m;if(this.emit(lt.Signature,{status:"submitted",message:d,signature:""}),t.functionName==="approve"&&t.functionArgs.length===2){let Q=t.functionArgs[0],ut=t.functionArgs[1],{message:it,signature:ot}=await Ja(e,this.writeContract.address,t.from,Q,ut),{r:en,s:rn,v:an}=b.ethers.utils.splitSignature(ot);d={to:this.readContract.address,owner:it.owner,spender:it.spender,value:b.BigNumber.from(it.value).toString(),nonce:b.BigNumber.from(it.nonce).toString(),deadline:b.BigNumber.from(it.deadline).toString(),r:en,s:rn,v:an},m=ot}else{let{signature:Q}=await Fe(e,i,c,d);m=Q}let u="forward";d!=null&&d.owner&&(u="permit");let g=JSON.stringify({request:d,signature:m,type:u});this.emit(lt.Signature,{status:"completed",message:d,signature:m});let C=await fetch(this.options.gasless.openzeppelin.relayerUrl,{method:"POST",body:g});if(C.ok){let Q=await C.json();return JSON.parse(Q.result).txHash}throw new Error(`relay transaction failed with status: ${C.status} (${C.statusText})`)}};p(w,"ContractWrapper");var pe=require("ethers"),Ie=require("@thirdweb-dev/contracts");var ao=require("ethers/lib/utils");function wt(o){return o.toLowerCase()===Tt||o.toLowerCase()===ro.AddressZero}p(wt,"isNativeToken");async function rt(o,t,e){let r=await It(o,e);return pe.ethers.utils.parseUnits(Et.parse(t),r.decimals)}p(rt,"normalizePriceValue");async function It(o,t){if(wt(t)){let e=await o.getNetwork(),r=Jr(e.chainId);return{name:r.name,symbol:r.symbol,decimals:r.decimals}}else{let e=Ie.TokenERC20__factory.connect(t,o),[r,a,n]=await Promise.all([e.name(),e.symbol(),e.decimals()]);return{name:r,symbol:a,decimals:n}}}p(It,"fetchCurrencyMetadata");async function q(o,t,e){let r=await It(o,t);return P(T({},r),{value:pe.BigNumber.from(e),displayValue:(0,ao.formatUnits)(e,r.decimals)})}p(q,"fetchCurrencyValue");async function Wt(o,t,e,r){if(wt(e))r.value=t;else{let a=o.getSigner(),n=o.getProvider(),s=new w(a||n,e,Ie.IERC20__factory.abi,{}),i=await o.getSignerAddress(),c=o.readContract.address,d=await s.readContract.allowance(i,c);return d.lt(t)&&await s.sendTransaction("approve",[c,t.sub(d)]),r}}p(Wt,"setErc20Allowance");async function oo(o,t,e,r){let a=o.getSigner(),n=o.getProvider(),s=new w(a||n,t,Ie.IERC20__factory.abi,{}),i=await o.getSignerAddress(),c=o.readContract.address,d=await s.readContract.allowance(i,c),m=pe.BigNumber.from(e).mul(pe.BigNumber.from(r));d.lt(m)&&await s.sendTransaction("approve",[c,d.add(m)])}p(oo,"approveErc20Allowance");var io=tt(require("deep-equal"));var N;(function(o){o[o.Direct=0]="Direct",o[o.Auction=1]="Auction"})(N||(N={}));var la;(function(o){o[o.Pending=0]="Pending",o[o.Active=1]="Active",o[o.Canceled=2]="Canceled",o[o.Defeated=3]="Defeated",o[o.Succeeded=4]="Succeeded",o[o.Queued=5]="Queued",o[o.Expired=6]="Expired",o[o.Executed=7]="Executed"})(la||(la={}));var Gt;(function(o){o[o.Against=0]="Against",o[o.For=1]="For",o[o.Abstain=2]="Abstain"})(Gt||(Gt={}));var A;(function(o){o.NotEnoughSupply="There is not enough supply to claim.",o.AddressNotAllowed="This address is not on the allowlist.",o.WaitBeforeNextClaimTransaction="Not enough time since last claim transaction. Please wait.",o.AlreadyClaimed="You have already claimed the token.",o.NotEnoughTokens="There are not enough tokens in the wallet to pay for the claim.",o.NoActiveClaimPhase="There is no active claim phase at the moment. Please check back in later.",o.NoClaimConditionSet="There is no claim condition set.",o.Unknown="No claim conditions found."})(A||(A={}));var Ht=require("ethers"),no=require("@ethersproject/bytes"),ua=require("@ethersproject/constants");async function hr(o,t,e,r,a,n=[(0,no.hexZeroPad)([0],32)]){let s=await r.getSignerAddress(),i=0;try{if(!t.merkleRootHash.toString().startsWith(ua.AddressZero)){let u=await ha(t.merkleRootHash.toString(),e,a),g=u&&u.find(C=>C.address.toLowerCase()===s.toLowerCase());if(g===void 0)throw new Error("No claim found for this address");n=g.proof,i=g.maxClaimable}}catch(u){if((u==null?void 0:u.message)==="No claim found for this address")throw u;console.warn("failed to check claim condition merkle root hash, continuing anyways",u)}let c=await r.getCallOverrides()||{},d=t.price,m=t.currencyAddress;return d.gt(0)&&(wt(m)?c.value=Ht.BigNumber.from(d).mul(o):await oo(r,m,d,o)),{overrides:c,proofs:n,maxQuantityPerTransaction:Ht.BigNumber.from(i),price:d,currencyAddress:m}}p(hr,"prepareClaim");async function ha(o,t,e){let r=t[o],a;if(r){let n=await e.get(r),s=te.parse(n);o===s.merkleRoot&&(a=s.claims)}return a}p(ha,"fetchSnapshot");function fr(o,t,e){if(o>=e.length)throw Error(`Index out of bounds - got index: ${o} with ${e.length} conditions`);let r=re.parse(T(P(T({},e[o]),{price:e[o].price.toString()}),t)),a=nr.parse(r);return e.map((n,s)=>{let i;return s===o?i=a:i=n,P(T({},i),{price:i.price.toString()})})}p(fr,"updateExsitingClaimConditions");async function gr(o,t,e,r){let a=await ha(t,e,r);if(a===void 0)return{proof:[],maxClaimable:0};let n=a.find(s=>s.address.toLowerCase()===(o==null?void 0:o.toLowerCase()));return n===void 0?{proof:[],maxClaimable:0}:{proof:n.proof,maxClaimable:n.maxClaimable}}p(gr,"getClaimerProofs");async function yr(o,t,e){let r=[],a=await Promise.all(o.map(async i=>{if(i.snapshot){let c=await ma($t.parse(i.snapshot),e);r.push(c),i.merkleRootHash=c.merkleRoot}return i})),n=Yr.parse(a),s=(await Promise.all(n.map(i=>In(i,t)))).sort((i,c)=>{let d=Ht.BigNumber.from(i.startTimestamp),m=Ht.BigNumber.from(c.startTimestamp);return d.eq(m)?0:d.gt(m)?1:-1});return{snapshotInfos:r,sortedConditions:s}}p(yr,"processClaimConditionInputs");async function In(o,t){let e=o.currencyAddress===ua.AddressZero?Tt:o.currencyAddress;return{startTimestamp:o.startTime,maxClaimableSupply:o.maxQuantity,supplyClaimed:0,quantityLimitPerTransaction:o.quantityLimitPerTransaction,waitTimeInSecondsBetweenClaims:o.waitInSeconds,pricePerToken:await rt(t,o.price,e),currency:e,merkleRoot:o.merkleRootHash}}p(In,"convertToContractModel");async function de(o,t,e,r){let a=await q(t,o.currency,o.pricePerToken),n=await ha(o.merkleRoot,e,r);return nr.parse({startTime:o.startTimestamp,maxQuantity:o.maxClaimableSupply.toString(),currentMintSupply:o.supplyClaimed.toString(),availableSupply:Ht.BigNumber.from(o.maxClaimableSupply).sub(o.supplyClaimed).toString(),quantityLimitPerTransaction:o.quantityLimitPerTransaction.toString(),waitInSeconds:o.waitTimeInSecondsBetweenClaims.toString(),price:Ht.BigNumber.from(o.pricePerToken),currency:o.currency,currencyAddress:o.currency,currencyMetadata:a,merkleRootHash:o.merkleRoot,snapshot:n})}p(de,"transformResultToClaimCondition");var _e=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(){let t=await this.contractWrapper.readContract.getActiveClaimConditionId(),e=await this.contractWrapper.readContract.getClaimConditionById(t),r=await this.metadata.get();return await de(e,this.contractWrapper.getProvider(),r.merkle,this.storage)}async getAll(){let t=await this.contractWrapper.readContract.claimCondition(),e=t.currentStartId.toNumber(),r=t.count.toNumber(),a=[];for(let s=e;s<e+r;s++)a.push(await this.contractWrapper.readContract.getClaimConditionById(s));let n=await this.metadata.get();return Promise.all(a.map(s=>de(s,this.contractWrapper.getProvider(),n.merkle,this.storage)))}async canClaim(t,e){return e===void 0&&(e=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e)).length===0}async getClaimIneligibilityReasons(t,e){let r=[],a,n;if(e===void 0)throw new Error("addressToCheck is required");try{[a,n]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(),this.getActive()])}catch(d){return d.message.includes("no public mint condition.")?(r.push(A.NoClaimConditionSet),r):d.message.includes("no active mint condition.")?(r.push(A.NoActiveClaimPhase),r):(r.push(A.Unknown),r)}if(me.BigNumber.from(n.availableSupply).lt(t)&&r.push(A.NotEnoughSupply),me.ethers.utils.stripZeros(n.merkleRootHash).length>0){let d=n.merkleRootHash.toString(),m=await this.metadata.get(),u=await gr(e,d,m.merkle,this.storage);try{let[g]=await this.contractWrapper.readContract.verifyClaimMerkleProof(a,e,t,u.proof,u.maxClaimable);if(!g)return r.push(A.AddressNotAllowed),r}catch{return r.push(A.AddressNotAllowed),r}}let[,i]=await this.contractWrapper.readContract.getClaimTimestamp(a,e);if(me.BigNumber.from(Date.now()).div(1e3).lt(i)&&(me.BigNumber.from(n.waitInSeconds).eq(i)?(await this.contractWrapper.readContract.balanceOf(e)).gte(1)&&r.push(A.AlreadyClaimed):r.push(A.WaitBeforeNextClaimTransaction)),n.price.gt(0)){let d=n.price.mul(t),m=this.contractWrapper.getProvider();wt(n.currencyAddress)?(await m.getBalance(e)).lt(d)&&r.push(A.NotEnoughTokens):(await new w(m,n.currencyAddress,so.IERC20__factory.abi,{}).readContract.balanceOf(e)).lt(d)&&r.push(A.NotEnoughTokens)}return r}async set(t,e=!1){let{snapshotInfos:r,sortedConditions:a}=await yr(t,this.contractWrapper.getProvider(),this.storage),n={};r.forEach(c=>{n[c.merkleRoot]=c.snapshotUri});let s=await this.metadata.get(),i=[];if(!(0,io.default)(s.merkle,n)){let c=this.metadata.parseInputMetadata(P(T({},s),{merkle:n})),d=await this.metadata._parseAndUploadMetadata(c);i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[d]))}return i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[a,e])),{receipt:await this.contractWrapper.multiCall(i)}}async update(t,e){let r=await this.getAll(),a=fr(t,e,r);return await this.set(a)}};p(_e,"DropErc721ClaimConditions");var co=require("@thirdweb-dev/contracts"),le=require("ethers");var po=tt(require("deep-equal"));var De=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(t){let e=await this.contractWrapper.readContract.getActiveClaimConditionId(t),r=await this.contractWrapper.readContract.getClaimConditionById(t,e),a=await this.metadata.get();return await de(r,this.contractWrapper.getProvider(),a.merkle,this.storage)}async getAll(t){let e=await this.contractWrapper.readContract.claimCondition(t),r=e.currentStartId.toNumber(),a=e.count.toNumber(),n=[];for(let i=r;i<r+a;i++)n.push(await this.contractWrapper.readContract.getClaimConditionById(t,i));let s=await this.metadata.get();return Promise.all(n.map(i=>de(i,this.contractWrapper.getProvider(),s.merkle,this.storage)))}async canClaim(t,e,r){return r===void 0&&(r=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e,r)).length===0}async getClaimIneligibilityReasons(t,e,r){let a=[],n,s;if(r===void 0)throw new Error("addressToCheck is required");try{[n,s]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(t),this.getActive(t)])}catch(m){return m.message.includes("no active mint condition.")?(a.push(A.NoActiveClaimPhase),a):(a.push(A.Unknown),a)}if(le.BigNumber.from(s.availableSupply).lt(e)&&a.push(A.NotEnoughSupply),le.ethers.utils.stripZeros(s.merkleRootHash).length>0){let m=s.merkleRootHash.toString(),u=await this.metadata.get(),g=await gr(r,m,u.merkle,this.storage);try{let[C]=await this.contractWrapper.readContract.verifyClaimMerkleProof(n,r,t,e,g.proof,g.maxClaimable);if(!C)return a.push(A.AddressNotAllowed),a}catch{return a.push(A.AddressNotAllowed),a}}let[,c]=await this.contractWrapper.readContract.getClaimTimestamp(t,n,r);if(le.BigNumber.from(Date.now()).div(1e3).lt(c)&&(le.BigNumber.from(s.waitInSeconds).eq(c)?(await this.contractWrapper.readContract.balanceOf(r,t)).gte(1)&&a.push(A.AlreadyClaimed):a.push(A.WaitBeforeNextClaimTransaction)),s.price.gt(0)){let m=s.price.mul(e),u=this.contractWrapper.getProvider();wt(s.currencyAddress)?(await u.getBalance(r)).lt(m)&&a.push(A.NotEnoughTokens):(await new w(u,s.currencyAddress,co.IERC20__factory.abi,{}).readContract.balanceOf(r)).lt(m)&&a.push(A.NotEnoughTokens)}return a}async set(t,e,r=!1){let{snapshotInfos:a,sortedConditions:n}=await yr(e,this.contractWrapper.getProvider(),this.storage),s={};a.forEach(d=>{s[d.merkleRoot]=d.snapshotUri});let i=await this.metadata.get(),c=[];for(let d of Object.keys(i.merkle))s[d]=i.merkle[d];if(!(0,po.default)(i.merkle,s)){let d=this.metadata.parseInputMetadata(P(T({},i),{merkle:s})),m=await this.metadata._parseAndUploadMetadata(d);c.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[m]))}return c.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[t,n,r])),{receipt:await this.contractWrapper.multiCall(c)}}async update(t,e,r){let a=await this.getAll(t),n=fr(e,r,a);return await this.set(t,n)}};p(De,"DropErc1155ClaimConditions");var at=require("ethers");var mo=require("@ethersproject/constants"),Ne=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=st.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=st.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(){return await It(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.readContract.balanceOf(t))}async totalSupply(){return await this.getValue(await this.contractWrapper.readContract.totalSupply())}async allowance(t){return await this.allowanceOf(await this.contractWrapper.getSignerAddress(),t)}async allowanceOf(t,e){return await this.getValue(await this.contractWrapper.readContract.allowance(t,e))}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(R("transfer"),mo.AddressZero)}async transfer(t,e){let r=at.ethers.utils.parseUnits(at.BigNumber.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transfer",[t,r])}}async transferFrom(t,e,r){let a=at.ethers.utils.parseUnits(at.BigNumber.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transferFrom",[t,e,a])}}async setAllowance(t,e){let r=at.ethers.utils.parseUnits(at.BigNumber.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("approve",[t,r])}}async transferBatch(t){let e=t.map(r=>this.contractWrapper.readContract.interface.encodeFunctionData("transfer",[r.toAddress,r.amount]));await this.contractWrapper.multiCall(e)}async burn(t){let e=at.ethers.utils.parseUnits(at.BigNumber.from(t).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burn",[e])}}async burnFrom(t,e){let r=at.ethers.utils.parseUnits(at.BigNumber.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burnFrom",[t,r])}}async getValue(t){return await q(this.contractWrapper.getProvider(),this.getAddress(),at.BigNumber.from(t))}};p(Ne,"Erc20");var fa=require("ethers"),ga=require("@ethersproject/constants");var Oe=100;var lo=require("ethers");var ue=require("@thirdweb-dev/contracts");async function jt(o,t,e){let r=await e.get(t);return sr.parse(T({id:lo.BigNumber.from(o),uri:t},r))}p(jt,"fetchTokenMetadata");async function _t(o,t,e,r){let a,n=ue.ERC165__factory.connect(o,t),s=await n.supportsInterface(Rt),i=await n.supportsInterface(Ft);if(s)a=await ue.TokenERC721__factory.connect(o,t).tokenURI(e);else if(i)a=await ue.TokenERC1155__factory.connect(o,t).uri(e);else throw Error("Contract must implement ERC 1155 or ERC 721.");if(!a)throw new ct;return jt(e,a,r)}p(_t,"fetchTokenMetadataForContract");var zt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=st.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=st.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.ownerOf(t).catch(()=>ga.AddressZero),this.getTokenMetadata(t)]);return{owner:e,metadata:r}}async getAll(t){let e=fa.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=fa.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.balanceOf(e),a=Array.from(Array(r.toNumber()).keys()),n=await Promise.all(a.map(s=>this.contractWrapper.readContract.tokenOfOwnerByIndex(e,s)));return await Promise.all(n.map(s=>this.get(s.toString())))}async ownerOf(t){return await this.contractWrapper.readContract.ownerOf(t)}async totalSupply(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async balanceOf(t){return await this.contractWrapper.readContract.balanceOf(t)}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(R("transfer"),ga.AddressZero)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom(address,address,uint256)",[r,t,e])}}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[t])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);if(!e)throw new ct;return jt(t,e,this.storage)}};p(zt,"Erc721");var Tr=require("ethers");var wr=require("zod");var Cr=wr.z.object({supply:S,metadata:sr}),_n=Cr.extend({owner:wr.z.string(),quantityOwned:S}),Dn=wr.z.object({supply:pt,metadata:Z});var uo=require("@ethersproject/constants");var ya;(function(o){o[o.None=0]="None",o[o.ERC20=1]="ERC20",o[o.ERC721=2]="ERC721"})(ya||(ya={}));var Zt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=st.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=st.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalSupply(t).catch(()=>Tr.BigNumber.from(0)),this.getTokenMetadata(t)]);return Cr.parse({supply:e,metadata:r})}async getAll(t){let e=Tr.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=Tr.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenIdToMint(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async s=>{let i=await this.get(s.tokenId.toString());return P(T({},i),{owner:e,quantityOwned:s.balance})}))}async totalSupply(t){return await this.contractWrapper.readContract.totalSupply(t)}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(R("transfer"),uo.AddressZero)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e,r,a=[0]){let n=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[n,t,e,r,a])}}async burn(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("burn",[r,t,e])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.uri(t);if(!e)throw new ct;return jt(t,e,this.storage)}};p(Zt,"Erc1155");var ho=require("ethers"),fo=tt(require("tiny-invariant")),Be=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await Wt(this.contractWrapper,ho.BigNumber.from(a.price),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(s=>Pe.parse(s)),{metadataUris:r}=await this.storage.uploadMetadataBatch(e.map(s=>s.metadata)),a=await this.contractWrapper.getChainID(),n=this.contractWrapper.getSigner();return(0,fo.default)(n,"No signer available"),await Promise.all(e.map(async(s,i)=>{let c=r[i],d=cr.parse(P(T({},s),{uri:c})),m=await this.contractWrapper.signTypedData(n,{name:"TokenERC721",version:"1",chainId:a,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:aa},await this.mapPayloadToContractStruct(d));return{payload:d,signature:m.toString()}}))}async mapPayloadToContractStruct(t){let e=await rt(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:e,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};p(Be,"Erc721SignatureMinting");var go=tt(require("tiny-invariant")),Me=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await Wt(this.contractWrapper,a.pricePerToken.mul(a.quantity),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(s=>ea.parse(s)),{metadataUris:r}=await this.storage.uploadMetadataBatch(e.map(s=>s.metadata)),a=await this.contractWrapper.getChainID(),n=this.contractWrapper.getSigner();return(0,go.default)(n,"No signer available"),await Promise.all(e.map(async(s,i)=>{let c=r[i],d=ra.parse(P(T({},s),{uri:c})),m=await this.contractWrapper.signTypedData(n,{name:"TokenERC1155",version:"1",chainId:a,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:oa},await this.mapPayloadToContractStruct(d));return{payload:d,signature:m.toString()}}))}async mapPayloadToContractStruct(t){let e=await rt(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:e,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};p(Me,"Erc1155SignatureMinting");var he=require("@thirdweb-dev/contracts"),Ct=require("ethers"),wa=require("@ethersproject/constants");var Sr=require("ethers"),vt=require("@thirdweb-dev/contracts");var Dt=tt(require("tiny-invariant"));async function yo(o,t,e,r,a){try{let n=vt.ERC165__factory.connect(e,o),s=await n.supportsInterface(Rt),i=await n.supportsInterface(Ft);if(s){let c=vt.IERC721__factory.connect(e,o);return await c.isApprovedForAll(a,t)?!0:(await c.getApproved(r)).toLowerCase()===t.toLowerCase()}else return i?await vt.IERC1155__factory.connect(e,o).isApprovedForAll(a,t):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}catch(n){return console.error("Failed to check if token is approved",n),!1}}p(yo,"isTokenApprovedForMarketplace");async function br(o,t,e,r,a){let n=vt.ERC165__factory.connect(e,o),s=await n.supportsInterface(Rt),i=await n.supportsInterface(Ft);if(s){let c=new w(o,e,vt.IERC721__factory.abi,{});await c.readContract.isApprovedForAll(a,t)||(await c.readContract.getApproved(r)).toLowerCase()===t.toLowerCase()||await c.sendTransaction("setApprovalForAll",[t,!0])}else if(i){let c=new w(o,e,vt.IERC1155__factory.abi,{});await c.readContract.isApprovedForAll(a,t)||await c.sendTransaction("setApprovalForAll",[t,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}p(br,"handleTokenApproval");function Ar(o){switch((0,Dt.default)(o.assetContractAddress!==void 0&&o.assetContractAddress!==null,"Asset contract address is required"),(0,Dt.default)(o.buyoutPricePerToken!==void 0&&o.buyoutPricePerToken!==null,"Buyout price is required"),(0,Dt.default)(o.listingDurationInSeconds!==void 0&&o.listingDurationInSeconds!==null,"Listing duration is required"),(0,Dt.default)(o.startTimeInSeconds!==void 0&&o.startTimeInSeconds!==null,"Start time is required"),(0,Dt.default)(o.tokenId!==void 0&&o.tokenId!==null,"Token ID is required"),(0,Dt.default)(o.quantity!==void 0&&o.quantity!==null,"Quantity is required"),o.type){case"NewAuctionListing":(0,Dt.default)(o.reservePricePerToken!==void 0&&o.reservePricePerToken!==null,"Reserve price is required")}}p(Ar,"validateNewListingParam");async function Wr(o,t,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await q(o,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:t}}p(Wr,"mapOffer");function wo(o,t,e){return e=Sr.BigNumber.from(e),o=Sr.BigNumber.from(o),t=Sr.BigNumber.from(t),t.sub(o).mul(Kr).div(o).gte(e)}p(wo,"isWinningBid");var Co=tt(require("tiny-invariant")),To=require("ethers/lib/utils"),Le=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===wa.AddressZero)throw new ht(this.getAddress(),t.toString());if(e.listingType!==N.Direct)throw new Ot(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(e)}async getActiveOffer(t,e){await this.validateListing(Ct.BigNumber.from(t)),(0,Co.default)((0,To.isAddress)(e),"Address must be a valid address");let r=await this.contractWrapper.readContract.offers(t,e);if(r.offeror!==wa.AddressZero)return await Wr(this.contractWrapper.getProvider(),Ct.BigNumber.from(t),r)}async createListing(t){Ar(t),await br(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await rt(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:N.Direct,quantityToList:t.quantity,reservePricePerToken:e,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",r==null?void 0:r.logs)[0].args.listingId,receipt:r}}async makeOffer(t,e,r,a){if(wt(r))throw new Error("You must use the wrapped native token address when making an offer with a native token");let n=await rt(this.contractWrapper.getProvider(),a,r);try{await this.getListing(t)}catch(d){throw console.error("Failed to get listing, err =",d),new Error(`Error getting the listing with id ${t}`)}let s=Ct.BigNumber.from(e),i=Ct.BigNumber.from(n).mul(s),c=await this.contractWrapper.getCallOverrides()||{};return await Wt(this.contractWrapper,i,r,c),{receipt:await this.contractWrapper.sendTransaction("offer",[t,e,r,n],c)}}async acceptOffer(t,e){await this.validateListing(Ct.BigNumber.from(t));let r=await this.contractWrapper.readContract.offers(t,e);return{receipt:await this.contractWrapper.sendTransaction("acceptOffer",[t,e,r.currency,r.pricePerToken])}}async buyoutListing(t,e,r){let a=await this.validateListing(Ct.BigNumber.from(t));if(!await this.isStillValidListing(a,e))throw new Error("The asset on this listing has been moved from the lister's wallet, this listing is now invalid");let s=r||await this.contractWrapper.getSignerAddress(),i=Ct.BigNumber.from(e),c=Ct.BigNumber.from(a.buyoutPrice).mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await Wt(this.contractWrapper,c,a.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("buy",[t,s,i,a.currencyContractAddress,c],d)}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInSeconds,t.secondsUntilEnd])}}async cancelListing(t){return{receipt:await this.contractWrapper.sendTransaction("cancelDirectListing",[t])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:Ct.BigNumber.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await q(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await _t(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:N.Direct}}async isStillValidListing(t,e){if(!await yo(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return!1;let a=this.contractWrapper.getProvider(),n=he.ERC165__factory.connect(t.assetContractAddress,a),s=await n.supportsInterface(Rt),i=await n.supportsInterface(Ft);return s?(await he.IERC721__factory.connect(t.assetContractAddress,a).ownerOf(t.tokenId)).toLowerCase()===t.sellerAddress.toLowerCase():i?(await he.IERC1155__factory.connect(t.assetContractAddress,a).balanceOf(t.sellerAddress,t.tokenId)).gte(e||t.quantity):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}};p(Le,"MarketplaceDirect");var $=require("ethers");var Ca=require("@ethersproject/constants");var Ta=tt(require("tiny-invariant")),Ue=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.listingId.toString()!==t.toString())throw new ht(this.getAddress(),t.toString());if(e.listingType!==N.Auction)throw new Ot(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(e)}async getWinningBid(t){await this.validateListing($.BigNumber.from(t));let e=await this.contractWrapper.readContract.winningBid(t);if(e.offeror!==Ca.AddressZero)return await Wr(this.contractWrapper.getProvider(),$.BigNumber.from(t),e)}async getWinner(t){let r=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find(a=>a.args.listingId.eq($.BigNumber.from(t)));if(!r)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return r.args.winningBidder}async createListing(t){Ar(t),await br(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await rt(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await rt(this.contractWrapper.getProvider(),t.reservePricePerToken,t.currencyContractAddress),a=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:N.Auction,quantityToList:t.quantity,reservePricePerToken:r,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs)[0].args.listingId,receipt:a}}async buyoutListing(t){let e=await this.validateListing($.BigNumber.from(t)),r=await It(this.contractWrapper.getProvider(),e.currencyContractAddress);return this.makeBid(t,$.ethers.utils.formatUnits(e.buyoutPrice,r.decimals))}async makeBid(t,e){let r=await this.validateListing($.BigNumber.from(t)),a=await rt(this.contractWrapper.getProvider(),e,r.currencyContractAddress),n=await this.contractWrapper.readContract.bidBufferBps(),s=await this.getWinningBid(t);if(s){let m=wo(s.pricePerToken,a,n);(0,Ta.default)(m,"Bid price is too low based on the current winning bid and the bid buffer")}else{let m=a,u=$.BigNumber.from(r.reservePrice);(0,Ta.default)(m.gte(u),"Bid price is too low based on reserve price")}let i=$.BigNumber.from(r.quantity),c=a.mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await Wt(this.contractWrapper,c,r.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("offer",[t,r.quantity,r.currencyContractAddress,a],d)}}async cancelListing(t){let e=await this.validateListing($.BigNumber.from(t)),r=$.BigNumber.from(Math.floor(Date.now()/1e3)),a=$.BigNumber.from(e.startTimeInEpochSeconds),n=await this.contractWrapper.readContract.winningBid(t);if(r.gt(a)&&n.offeror!==Ca.AddressZero)throw new ve(t.toString());return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[$.BigNumber.from(t),await this.contractWrapper.getSignerAddress()])}}async closeListing(t,e){e||(e=await this.contractWrapper.getSignerAddress());let r=await this.validateListing($.BigNumber.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[$.BigNumber.from(t),e])}}catch(a){throw a.message.includes("cannot close auction before it has ended")?new xe(t.toString(),r.endTimeInEpochSeconds.toString()):a}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:$.BigNumber.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await q(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await _t(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await q(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:$.BigNumber.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:N.Auction}}};p(Ue,"MarketplaceAuction");var So=require("@thirdweb-dev/contracts");var bo=require("ethers/lib/utils"),Ao=require("@ethersproject/constants"),vr=class extends w{constructor(t,e,r){super(e,t,So.TWRegistry__factory.abi,r)}async getContractAddresses(t){return(await this.readContract.getAll(t)).filter(e=>(0,bo.isAddress)(e)&&e.toLowerCase()!==Ao.AddressZero)}};p(vr,"ContractRegistry");var Qo=require("@thirdweb-dev/contracts"),Qe=require("ethers");var Wo=x.merge(_).merge(J),Nn=I.merge(_).merge(J),On=Wo.merge(K).merge(dt).merge(D),vo={deploy:On,output:Nn,input:Wo};var xo=require("@thirdweb-dev/contracts");var $e=class extends zt{constructor(t,e,r,a={},n=new w(t,e,$e.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,$e.schema,this.storage),this.roles=new z(this.contractWrapper,$e.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.primarySale=new mt(this.contractWrapper),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.signature=new Be(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await this.storage.uploadMetadata(Z.parse(e)),a=await this.contractWrapper.sendTransaction("mintTo",[t,r]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let{metadataUris:r}=await this.storage.uploadMetadataBatch(e.map(i=>Z.parse(i))),a=r.map(i=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,i])),n=await this.contractWrapper.multiCall(a),s=this.contractWrapper.parseLogs("TokensMinted",n.logs);if(s.length===0||s.length<e.length)throw new Error("TokenMinted event not found, minting failed");return s.map(i=>{let c=i.args.tokenIdMinted;return{id:c,receipt:n,data:()=>this.get(c)}})}addTransferEventListener(t){this.contractWrapper.readContract.on("Transfer",(e,r,a)=>{t(e,r,a)})}removeTransferEventListeners(){this.contractWrapper.readContract.removeAllListeners("Transfer")}},V=$e;p(V,"NFTCollection"),f(V,"contractType","nft-collection"),f(V,"contractRoles",["admin","minter","transfer"]),f(V,"contractFactory",xo.TokenERC721__factory),f(V,"schema",vo);var Po=require("@thirdweb-dev/contracts");var xr=require("ethers/lib/utils");var Eo=x.merge(_).merge(Ut).merge(J),Bn=I.merge(_).merge(Ut).merge(J),Mn=Eo.merge(K).merge(dt).merge(D),ko={deploy:Mn,output:Bn,input:Eo};var Sa=require("ethers"),E=class{constructor(t){this.contractWrapper=t}async gasCostOf(t,e){let r=await this.contractWrapper.getPreferredGasPrice(),a=await this.contractWrapper.estimateGas(t,e);return Sa.ethers.utils.formatEther(a.mul(r))}async currentGasPriceInGwei(){let t=await this.contractWrapper.getProvider().getGasPrice();return Sa.ethers.utils.formatUnits(t,"gwei")}};p(E,"GasCostEstimator");var Ve=class extends Zt{constructor(t,e,r,a={},n=new w(t,e,Ve.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,Ve.schema,this.storage),this.roles=new z(this.contractWrapper,Ve.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.primarySale=new mt(this.contractWrapper),this.claimConditions=new De(this.contractWrapper,this.metadata,this.storage),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}async createBatch(t){var d;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(m=>Z.parse(m)),e.toNumber(),this.contractWrapper.readContract.address,await((d=this.contractWrapper.getSigner())==null?void 0:d.getAddress())),a=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,`${r.baseUri.endsWith("/")?r.baseUri:`${r.baseUri}/`}`]),n=this.contractWrapper.parseLogs("TokensLazyMinted",a==null?void 0:a.logs),s=n[0].args.startTokenId,i=n[0].args.endTokenId,c=[];for(let m=s;m.lte(i);m=m.add(1))c.push({id:m,receipt:a,data:()=>this.getTokenMetadata(m)});return c}async claimTo(t,e,r,a=[(0,xr.hexZeroPad)([0],32)]){let n=await this.prepareClaim(e,r,a);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,e,r,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async claim(t,e,r=[(0,xr.hexZeroPad)([0],32)]){let a=await this.contractWrapper.getSignerAddress();return this.claimTo(a,t,e,r)}async prepareClaim(t,e,r=[(0,xr.hexZeroPad)([0],32)]){return hr(e,await this.claimConditions.getActive(t),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,r)}},k=Ve;p(k,"EditionDrop"),f(k,"contractType","edition-drop"),f(k,"contractRoles",["admin","minter","transfer"]),f(k,"contractFactory",Po.DropERC1155__factory),f(k,"schema",ko);var Io=require("@thirdweb-dev/contracts");var Ro=x.merge(_),Ln=I.merge(_),Un=Ro.merge(K).merge(dt).merge(D),Fo={deploy:Un,output:Ln,input:Ro};var He=require("ethers");var Ge=class extends Zt{constructor(t,e,r,a={},n=new w(t,e,Ge.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,Ge.schema,this.storage),this.roles=new z(this.contractWrapper,Ge.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.primarySale=new mt(this.contractWrapper),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.signature=new Me(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await this.storage.uploadMetadata(Z.parse(e.metadata)),a=await this.contractWrapper.sendTransaction("mintTo",[t,He.ethers.constants.MaxUint256,r,e.supply]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintAdditionalSupply(t,e){return this.mintAdditionalSupplyTo(await this.contractWrapper.getSignerAddress(),t,e)}async mintAdditionalSupplyTo(t,e,r){let a=await this.getTokenMetadata(e),n=await this.contractWrapper.sendTransaction("mintTo",[t,e,a.uri,r]);return{id:He.BigNumber.from(e),receipt:n,data:()=>this.get(e)}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let r=e.map(d=>d.metadata),a=e.map(d=>d.supply),{metadataUris:n}=await this.storage.uploadMetadataBatch(r.map(d=>Z.parse(d))),s=n.map((d,m)=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,He.ethers.constants.MaxUint256,d,a[m]])),i=await this.contractWrapper.multiCall(s),c=this.contractWrapper.parseLogs("TokensMinted",i.logs);if(c.length===0||c.length<r.length)throw new Error("TokenMinted event not found, minting failed");return c.map(d=>{let m=d.args.tokenIdMinted;return{id:m,receipt:i,data:()=>this.get(m)}})}},G=Ge;p(G,"Edition"),f(G,"contractType","edition"),f(G,"contractRoles",["admin","minter","transfer"]),f(G,"contractFactory",Io.TokenERC1155__factory),f(G,"schema",Fo);var _o=x.merge(J),$n=I.merge(J),Vn=_o.merge(K).merge(dt).merge(D),Do={deploy:Vn,output:$n,input:_o};var No=require("@thirdweb-dev/contracts");var fe=require("ethers");var je=class extends Ne{constructor(t,e,r,a={},n=new w(t,e,je.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,je.schema,this.storage),this.roles=new z(this.contractWrapper,je.contractRoles),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=fe.ethers.utils.parseUnits(fe.BigNumber.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("mintTo",[t,r])}}async mintBatchTo(t){let e=[];for(let r of t){let a=fe.ethers.utils.parseUnits(fe.BigNumber.from(r.amount).toString(),await this.contractWrapper.readContract.decimals());e.push(this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[r.toAddress,a]))}return{receipt:await this.contractWrapper.multiCall(e)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}},O=je;p(O,"Token"),f(O,"contractType","token"),f(O,"contractRoles",["admin","minter","transfer"]),f(O,"contractFactory",No.TokenERC20__factory),f(O,"schema",Do);var kr=require("@thirdweb-dev/contracts");var X=require("zod"),Oo=X.z.object({voting_delay_in_blocks:X.z.number().min(0).default(0),voting_period_in_blocks:X.z.number().min(1).default(1),voting_token_address:nt,voting_quorum_fraction:Da.default(0),proposal_token_threshold:pt.default(1)}),Gn=Oo.extend({proposal_token_threshold:S}),Bo=x.merge(Oo),Hn=I.merge(Gn),jn=Bo.merge(D),Mo={deploy:jn,output:Hn,input:Bo},Gp=X.z.object({proposalId:S,proposer:X.z.string(),targets:X.z.array(X.z.string()),values:X.z.array(S),signatures:X.z.array(X.z.string()),calldatas:X.z.array(X.z.string()),startBlock:S,endBlock:S,description:X.z.string()});var Kt=require("ethers");var Lo=tt(require("deep-equal"));var Er=class{constructor(t,e,r,a={},n=new w(t,e,Er.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new v(this.contractWrapper,Er.schema,this.storage),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let r=(await this.getAll()).filter(a=>(0,Lo.default)(Kt.BigNumber.from(a.proposalId),Kt.BigNumber.from(t)));if(r.length===0)throw new Error("proposal not found");return r[0]}async getAll(){return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async t=>({proposalId:t.proposalId,proposer:t.proposer,description:t.description,startBlock:t.startBlock,endBlock:t.endBlock,state:await this.contractWrapper.readContract.state(t.proposalId),votes:await this.getProposalVotes(t.proposalId),executions:t[3].map((e,r)=>({toAddress:t.targets[r],nativeTokenValue:e,transactionData:t.calldatas[r]}))})))}async getProposalVotes(t){let e=await this.contractWrapper.readContract.proposalVotes(t);return[{type:Gt.Against,label:"Against",count:e.againstVotes},{type:Gt.For,label:"For",count:e.forVotes},{type:Gt.Abstain,label:"Abstain",count:e.abstainVotes}]}async hasVoted(t,e){return e||(e=await this.contractWrapper.getSignerAddress()),this.contractWrapper.readContract.hasVoted(t,e)}async canExecute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=Kt.ethers.utils.id(e.description);try{return await this.contractWrapper.callStatic().execute(r,a,n,s),!0}catch{return!1}}async balance(){let t=await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);return{name:"",symbol:"",decimals:18,value:t,displayValue:Kt.ethers.utils.formatUnits(t,18)}}async balanceOfToken(t){let e=kr.IERC20__factory.connect(t,this.contractWrapper.getProvider());return await q(this.contractWrapper.getProvider(),t,await e.balanceOf(this.contractWrapper.readContract.address))}async ensureExists(t){try{await this.contractWrapper.readContract.state(t)}catch{throw Error(`Proposal ${t} not found`)}}async settings(){let[t,e,r,a,n]=await Promise.all([this.contractWrapper.readContract.votingDelay(),this.contractWrapper.readContract.votingPeriod(),this.contractWrapper.readContract.token(),this.contractWrapper.readContract.quorumNumerator(),this.contractWrapper.readContract.proposalThreshold()]),s=await It(this.contractWrapper.getProvider(),r);return{votingDelay:t.toString(),votingPeriod:e.toString(),votingTokenAddress:r,votingTokenMetadata:s,votingQuorumFraction:a.toString(),proposalTokenThreshold:n.toString()}}async propose(t,e){e||(e=[{toAddress:this.contractWrapper.readContract.address,nativeTokenValue:0,transactionData:"0x"}]);let r=e.map(c=>c.toAddress),a=e.map(c=>c.nativeTokenValue),n=e.map(c=>c.transactionData),s=await this.contractWrapper.sendTransaction("propose",[r,a,n,t]);return{id:this.contractWrapper.parseLogs("ProposalCreated",s==null?void 0:s.logs)[0].args.proposalId,receipt:s}}async vote(t,e,r=""){return await this.ensureExists(t),{receipt:await this.contractWrapper.sendTransaction("castVoteWithReason",[t,e,r])}}async execute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=Kt.ethers.utils.id(e.description);return{receipt:await this.contractWrapper.sendTransaction("execute",[r,a,n,s])}}},H=Er;p(H,"Vote"),f(H,"contractType","vote"),f(H,"contractFactory",kr.VoteERC20__factory),f(H,"schema",Mo);var Rr=require("@thirdweb-dev/contracts");var Aa=require("ethers");var qt=require("zod");var Uo=qt.z.object({address:nt,sharesBps:xt.gt(0,"Shares must be greater than 0")}),zn=Uo.extend({address:nt,sharesBps:xt}),ba=x.extend({recipients:qt.z.array(Uo).default([]).superRefine((o,t)=>{let e={},r=0;for(let a=0;a<o.length;a++){let n=o[a];e[n.address]&&t.addIssue({code:qt.z.ZodIssueCode.custom,message:"Duplicate address.",path:[a,"address"]}),e[n.address]=!0,r+=n.sharesBps,r>1e4&&t.addIssue({code:qt.z.ZodIssueCode.custom,message:"Total shares cannot go over 100%.",path:[a,"sharesBps"]})}r!==1e4&&t.addIssue({code:qt.z.ZodIssueCode.custom,message:`Total shares need to add up to 100%. Total shares are currently ${r/100}%`,path:[]})})}),Zn=I.extend({recipients:qt.z.array(zn)}),Kn=ba.merge(K).merge(ba).merge(D),$o={deploy:Kn,output:Zn,input:ba};var Pr=class{constructor(t,e,r,a={},n=new w(t,e,Pr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new v(this.contractWrapper,Pr.schema,this.storage),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAllRecipients(){let t=[],e=Aa.BigNumber.from(0),r=await this.contractWrapper.readContract.payeeCount();for(;e.lt(r);)try{let a=await this.contractWrapper.readContract.payee(e);t.push(await this.getRecipientSplitPercentage(a)),e=e.add(1)}catch(a){if("method"in a&&a.method.toLowerCase().includes("payee(uint256)"))break;throw a}return t}async balanceOfAllRecipients(){let t=await this.getAllRecipients(),e={};for(let r of t)e[r.address]=await this.balanceOf(r.address);return e}async balanceOfTokenAllRecipients(t){let e=await this.getAllRecipients(),r={};for(let a of e)r[a.address]=await this.balanceOfToken(a.address,t);return r}async balanceOf(t){let e=await this.contractWrapper.readContract.provider.getBalance(this.getAddress()),r=await this.contractWrapper.readContract["totalReleased()"](),a=e.add(r);return this._pendingPayment(t,a,await this.contractWrapper.readContract["released(address)"](t))}async balanceOfToken(t,e){let a=await Rr.IERC20__factory.connect(e,this.contractWrapper.getProvider()).balanceOf(this.getAddress()),n=await this.contractWrapper.readContract["totalReleased(address)"](e),s=a.add(n),i=await this._pendingPayment(t,s,await this.contractWrapper.readContract["released(address,address)"](e,t));return await q(this.contractWrapper.getProvider(),e,i)}async getRecipientSplitPercentage(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalShares(),this.contractWrapper.readContract.shares(t)]);return{address:t,splitPercentage:r.mul(Aa.BigNumber.from(1e7)).div(e).toNumber()/1e5}}async withdraw(t){return{receipt:await this.contractWrapper.sendTransaction("release(address)",[t])}}async withdrawToken(t,e){return{receipt:await this.contractWrapper.sendTransaction("release(address,address)",[e,t])}}async distribute(){return{receipt:await this.contractWrapper.sendTransaction("distribute()",[])}}async distributeToken(t){return{receipt:await this.contractWrapper.sendTransaction("distribute(address)",[t])}}async _pendingPayment(t,e,r){return e.mul(await this.contractWrapper.readContract.shares(t)).div(await this.contractWrapper.readContract.totalShares()).sub(r)}},j=Pr;p(j,"Split"),f(j,"contractType","split"),f(j,"contractFactory",Rr.Split__factory),f(j,"schema",$o);var Ho=require("@thirdweb-dev/contracts");var Vo=x,qn=I,Jn=Vo.merge(K).merge(D),Go={deploy:Jn,output:qn,input:Vo};var Jt=require("ethers"),jo=tt(require("tiny-invariant"));var ge=require("@ethersproject/constants");var ze=class{constructor(t,e,r,a={},n=new w(t,e,ze.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new v(this.contractWrapper,ze.schema,this.storage),this.roles=new z(this.contractWrapper,ze.contractRoles),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.direct=new Le(this.contractWrapper,this.storage),this.auction=new Ue(this.contractWrapper,this.storage)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===ge.AddressZero)throw new ht(this.getAddress(),t.toString());switch(e.listingType){case N.Auction:return await this.auction.mapListing(e);case N.Direct:return await this.direct.mapListing(e);default:throw new Error(`Unknown listing type: ${e.listingType}`)}}async getActiveListings(){return(await this.getAllListingsNoFilter()).filter(e=>e.type===N.Auction&&Jt.BigNumber.from(e.endTimeInEpochSeconds).gt(Jt.BigNumber.from(Math.floor(Date.now()/1e3)))||e.type===N.Direct&&e.quantity>0)}async getAllListings(t){let e=await this.getAllListingsNoFilter();if(t&&(t.seller&&(e=e.filter(r=>{var a;return r.sellerAddress.toString().toLowerCase()===((a=t==null?void 0:t.seller)==null?void 0:a.toString().toLowerCase())})),t.tokenContract&&(t.tokenId?e=e.filter(r=>{var a,n;return r.assetContractAddress.toString().toLowerCase()===((a=t==null?void 0:t.tokenContract)==null?void 0:a.toString().toLowerCase())&&r.tokenId.toString()===((n=t==null?void 0:t.tokenId)==null?void 0:n.toString())}):e=e.filter(r=>{var a;return r.assetContractAddress.toString().toLowerCase()===((a=t==null?void 0:t.tokenContract)==null?void 0:a.toString().toLowerCase())})),t.start!==void 0)){let r=Jt.BigNumber.from(t.start).toNumber();e=e.filter((a,n)=>n>=r),t.count!==void 0&&e.length>t.count&&(e=e.slice(0,Jt.BigNumber.from(t.count).toNumber()))}return e.filter(r=>r!==void 0)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.readContract.hasRole(R("lister"),ge.AddressZero)}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getTimeBufferInSeconds(){return this.contractWrapper.readContract.timeBuffer()}async buyoutListing(t,e,r){let a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new ht(this.getAddress(),t.toString());switch(a.listingType){case N.Direct:return(0,jo.default)(e!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing(t,e,r);case N.Auction:return await this.auction.buyoutListing(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}async setBidBufferBps(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getTimeBufferInSeconds();await this.contractWrapper.sendTransaction("setAuctionBuffers",[e,Jt.BigNumber.from(t)])}async setTimeBufferInSeconds(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getBidBufferBps();await this.contractWrapper.sendTransaction("setAuctionBuffers",[Jt.BigNumber.from(t),e])}async allowListingFromSpecificAssetOnly(t){let e=[];(await this.roles.get("asset")).includes(ge.AddressZero)&&e.push(this.encoder.encode("revokeRole",[R("asset"),ge.AddressZero])),e.push(this.encoder.encode("grantRole",[R("asset"),t])),await this.contractWrapper.multiCall(e)}async allowListingFromAnyAsset(){let t=[],e=await this.roles.get("asset");for(let r in e)t.push(this.encoder.encode("revokeRole",[R("asset"),r]));t.push(this.encoder.encode("grantRole",[R("asset"),ge.AddressZero])),await this.contractWrapper.multiCall(t)}async getAllListingsNoFilter(){return(await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map(async e=>{let r;try{r=await this.getListing(e)}catch{return}if(r.type===N.Auction)return r;if(!!await this.direct.isStillValidListing(r))return r}))).filter(e=>e!==void 0)}},B=ze;p(B,"Marketplace"),f(B,"contractType","marketplace"),f(B,"contractRoles",["admin","lister","asset"]),f(B,"contractFactory",Ho.Marketplace__factory),f(B,"schema",Go);var Qt=require("@thirdweb-dev/contracts");var zo=x.merge(_).merge(J),Qn=I.merge(_).merge(J),Yn=zo.merge(K).merge(D),Zo={deploy:Yn,output:Qn,input:zo};var Fr=require("ethers");var Ze=class{constructor(t,e,r,a={},n=new w(t,e,Ze.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new v(this.contractWrapper,Ze.schema,this.storage),this.roles=new z(this.contractWrapper,Ze.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r,a]=await Promise.all([_t(this.getAddress(),this.contractWrapper.getProvider(),t,this.storage),this.contractWrapper.readContract.packs(t),this.contractWrapper.readContract.totalSupply(t).catch(()=>Fr.BigNumber.from("0"))]);return{id:t,metadata:e,creator:r.creator,currentSupply:a,openStart:r.openStart.gt(0)?new Date(r.openStart.toNumber()*1e3):null}}async getAll(){let t=(await this.contractWrapper.readContract.nextTokenId()).toNumber();return await Promise.all(Array.from(Array(t).keys()).map(e=>this.get(e.toString())))}async getNFTs(t){let e=await this.contractWrapper.readContract.getPackWithRewards(t);if(!e.source)throw new ct;return(await Promise.all(e.tokenIds.map(a=>_t(e.source,this.contractWrapper.getProvider(),a.toString(),this.storage)))).map((a,n)=>({supply:e.amountsPacked[n],metadata:a}))}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async getLinkBalance(){let t=await this.contractWrapper.getChainID(),e=ce[t],r=Qt.IERC20__factory.connect(e.linkTokenAddress,this.contractWrapper.getProvider());return await q(this.contractWrapper.getProvider(),e.linkTokenAddress,await r.balanceOf(this.getAddress()))}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenId(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async({tokenId:s,balance:i})=>{let c=await this.get(s.toString());return P(T({},c),{ownedByAddress:i})}))}async open(t){let e=await this.contractWrapper.sendTransaction("openPack",[t]),r=this.contractWrapper.parseLogs("PackOpenRequested",e==null?void 0:e.logs);if(r.length===0)throw new Error("Failed to open pack");let a=r[0],n=a.args.requestId,s=a.args.opener,i=await new Promise(m=>{this.contractWrapper.readContract.once(this.contractWrapper.readContract.filters.PackOpenFulfilled(null,s),(u,g,C,Q,ut)=>{n===C&&m({packId:u,opener:g,requestId:n,rewardContract:Q,rewardIds:ut})})}),{rewardIds:c,rewardContract:d}=i;return c.map(m=>({id:t,receipt:e,data:()=>_t(d,this.contractWrapper.getProvider(),m.toString(),this.storage)}))}async create(t){let e=Qt.IERC1155__factory.connect(t.assetContract,this.contractWrapper.getSigner()||this.contractWrapper.getProvider()),r=await this.contractWrapper.getSignerAddress(),a=t.assets.map(g=>g.tokenId),n=t.assets.map(g=>g.amount),s=await this.storage.uploadMetadata(t.metadata),i=Fr.ethers.utils.defaultAbiCoder.encode(["string","uint256","uint256"],[s,t.secondsUntilOpenStart||0,t.rewardsPerOpen||1]),d=await(await e.safeBatchTransferFrom(r,this.getAddress(),a,n,i,await this.contractWrapper.getCallOverrides())).wait(),m=this.contractWrapper.parseLogs("PackAdded",d.logs);if(m.length===0)throw new Error("PackCreated event not found");let u=m[0].args.packId;return{id:u,receipt:d,data:()=>this.get(u.toString())}}async transfer(t,e,r){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[await this.contractWrapper.getSignerAddress(),t,e,r,[0]])}}async transferFrom(t,e,r,a=[0]){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[t,e,r.tokenId,r.amount,a])}}async transferBatchFrom(t,e,r,a=[0]){let n=r.map(i=>i.tokenId),s=r.map(i=>i.amount);return{receipt:await this.contractWrapper.sendTransaction("safeBatchTransferFrom",[t,e,n,s,a])}}async setApproval(t,e=!0){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async depositLink(t){let e=await this.contractWrapper.getChainID(),r=ce[e];return{receipt:await(await Qt.IERC20__factory.connect(r.linkTokenAddress,this.contractWrapper.getProvider()).transfer(this.getAddress(),t,await this.contractWrapper.getCallOverrides())).wait()}}},M=Ze;p(M,"Pack"),f(M,"contractType","pack"),f(M,"contractRoles",["admin","minter","pauser","transfer"]),f(M,"contractFactory",Qt.Pack__factory),f(M,"schema",Zo);var Jo=require("@thirdweb-dev/contracts"),Ir=require("@ethersproject/bytes"),Nt=require("ethers");var Ko=x.merge(_).merge(Ut).merge(J),Xn=I.merge(_).merge(Ut).merge(J),ts=Ko.merge(K).merge(dt).merge(D),qo={deploy:ts,output:Xn,input:Ko};var ye=require("ethers");var Ke=class{constructor(t,e){this.contractWrapper=t,this.storage=e}async createDelayedRevealBatch(t,e,r){var ut,it;if(!r)throw new Error("Password is required");let{baseUri:a}=await this.storage.uploadMetadataBatch([Z.parse(t)],0,this.contractWrapper.readContract.address,await((ut=this.contractWrapper.getSigner())==null?void 0:ut.getAddress())),n=await this.contractWrapper.readContract.nextTokenIdToMint(),s=await this.storage.uploadMetadataBatch(e.map(ot=>Z.parse(ot)),n.toNumber(),this.contractWrapper.readContract.address,await((it=this.contractWrapper.getSigner())==null?void 0:it.getAddress())),i=s.baseUri,c=await this.contractWrapper.readContract.getBaseURICount(),d=await this.contractWrapper.readContract.encryptDecrypt(ye.ethers.utils.toUtf8Bytes(i.endsWith("/")?i:`${i}/`),await this.hashDelayRevealPasword(c,r)),m=await this.contractWrapper.sendTransaction("lazyMint",[s.metadataUris.length,a.endsWith("/")?a:`${a}/`,d]),u=this.contractWrapper.parseLogs("TokensLazyMinted",m==null?void 0:m.logs),g=u[0].args.startTokenId,C=u[0].args.endTokenId,Q=[];for(let ot=g;ot.lte(C);ot=ot.add(1))Q.push({id:ot,receipt:m});return Q}async reveal(t,e){if(!e)throw new Error("Password is required");let r=await this.hashDelayRevealPasword(t,e);try{let a=await this.contractWrapper.callStatic().reveal(t,r);if(!a.includes("://")||!a.endsWith("/"))throw new Error("invalid password")}catch{throw new Error("invalid password")}return{receipt:await this.contractWrapper.sendTransaction("reveal",[t,r])}}async getBatchesToReveal(){let t=await this.contractWrapper.readContract.getBaseURICount();if(t.isZero())return[];let e=Array.from(Array(t.toNumber()).keys()),r=await Promise.all(e.map(c=>this.contractWrapper.readContract.baseURIIndices(c))),a=r.slice(0,r.length-1),n=await Promise.all(Array.from([0,...a]).map(c=>this.contractWrapper.readContract.tokenURI(c))),s=await Promise.all(Array.from([0,...a]).map(c=>this.getNftMetadata(c.toString()))),i=await Promise.all(Array.from([...r]).map(c=>this.contractWrapper.readContract.encryptedBaseURI(c)));return n.map((c,d)=>({batchId:ye.BigNumber.from(d),batchUri:c,placeholderMetadata:s[d]})).filter((c,d)=>ye.ethers.utils.hexDataLength(i[d])>0)}async hashDelayRevealPasword(t,e){let r=await this.contractWrapper.getChainID(),a=this.contractWrapper.readContract.address;return ye.ethers.utils.solidityKeccak256(["string","uint256","uint256","address"],[e,r,t,a])}async getNftMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);return jt(t,e,this.storage)}};p(Ke,"DelayedReveal");var qe=class extends zt{constructor(t,e,r,a={},n=new w(t,e,qe.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,qe.schema,this.storage),this.roles=new z(this.contractWrapper,qe.contractRoles),this.royalty=new et(this.contractWrapper,this.metadata),this.primarySale=new mt(this.contractWrapper),this.claimConditions=new _e(this.contractWrapper,this.metadata,this.storage),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.revealer=new Ke(this.contractWrapper,this.storage)}async getAllClaimed(t){let e=Nt.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=Nt.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),e+r);return await Promise.all(Array.from(Array(a).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){let e=Nt.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=Nt.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Nt.BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),e+r)),n=await this.contractWrapper.readContract.nextTokenIdToClaim();return await Promise.all(Array.from(Array(a.sub(n).toNumber()).keys()).map(s=>this.getTokenMetadata(n.add(s).toString())))}async totalClaimedSupply(){return await this.contractWrapper.readContract.nextTokenIdToClaim()}async totalUnclaimedSupply(){return(await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply())}async createBatch(t){var m;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(u=>Z.parse(u)),e.toNumber(),this.contractWrapper.readContract.address,await((m=this.contractWrapper.getSigner())==null?void 0:m.getAddress())),a=r.baseUri,n=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,a.endsWith("/")?a:`${a}/`,Nt.ethers.utils.toUtf8Bytes("")]),s=this.contractWrapper.parseLogs("TokensLazyMinted",n==null?void 0:n.logs),i=s[0].args.startTokenId,c=s[0].args.endTokenId,d=[];for(let u=i;u.lte(c);u=u.add(1))d.push({id:u,receipt:n,data:()=>this.getTokenMetadata(u)});return d}async claimTo(t,e,r=[(0,Ir.hexZeroPad)([0],32)]){let a=await this.prepareClaim(e,r),n=await this.contractWrapper.sendTransaction("claim",[t,e,a.currencyAddress,a.price,a.proofs,a.maxQuantityPerTransaction],a.overrides),i=this.contractWrapper.parseLogs("TokensClaimed",n==null?void 0:n.logs)[0].args.startTokenId,c=i.add(e),d=[];for(let m=i;m.lt(c);m=m.add(1))d.push({id:m,receipt:n,data:()=>this.get(m)});return d}async claim(t,e=[(0,Ir.hexZeroPad)([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,e)}async prepareClaim(t,e=[(0,Ir.hexZeroPad)([0],32)]){return hr(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},L=qe;p(L,"NFTDrop"),f(L,"contractType","nft-drop"),f(L,"contractRoles",["admin","minter","transfer"]),f(L,"contractFactory",Jo.DropERC721__factory),f(L,"schema",qo);var Je={[L.contractType]:L,[V.contractType]:V,[k.contractType]:k,[G.contractType]:G,[O.contractType]:O,[H.contractType]:H,[j.contractType]:j,[B.contractType]:B,[M.contractType]:M},Wa={[L.contractType]:"DropERC721",[V.contractType]:"TokenERC721",[k.contractType]:"DropERC1155",[G.contractType]:"TokenERC1155",[O.contractType]:"TokenERC20",[H.contractType]:"VoteERC20",[j.contractType]:"Split",[B.contractType]:"Marketplace",[M.contractType]:"Pack"},va={DropERC721:L.contractType,TokenERC721:V.contractType,DropERC1155:k.contractType,TokenERC1155:G.contractType,TokenERC20:O.contractType,VoteERC20:H.contractType,Split:j.contractType,Marketplace:B.contractType,Pack:M.contractType};var xa=require("@ethersproject/constants"),_r=class extends w{constructor(t,e,r,a){super(e,t,Qo.TWFactory__factory.abi,a);this.storage=r}async deploy(t,e){var g;let r=Je[t],a=r.schema.deploy.parse(e),n=r.contractFactory,s=await this.storage.uploadMetadata(a,this.readContract.address,await((g=this.getSigner())==null?void 0:g.getAddress())),i=n.getInterface(n.abi).encodeFunctionData("initialize",await this.getDeployArguments(t,a,s)),c=Wa[t];console.log(`Remote contractName : ${c}`);let d=Qe.ethers.utils.formatBytes32String(c);console.log(`Deploying ${t} proxy`);let m=await this.sendTransaction("deployProxy",[d,i]);console.log(`${t} proxy deployed successfully`);let u=this.parseLogs("ProxyDeployed",m.logs);if(u.length<1)throw new Error("No ProxyDeployed event found");return u[0].args.proxy}async getDeployArguments(t,e,r){let a=await this.getDefaultTrustedForwarders();switch(e.trusted_forwarders&&e.trusted_forwarders.length>0&&(a=e.trusted_forwarders),t){case L.contractType:case V.contractType:let n=L.schema.deploy.parse(e);return[await this.getSignerAddress(),n.name,n.symbol,r,a,n.primary_sale_recipient,n.fee_recipient,n.seller_fee_basis_points,n.platform_fee_basis_points,n.platform_fee_recipient];case k.contractType:case G.contractType:let s=k.schema.deploy.parse(e);return[await this.getSignerAddress(),s.name,s.symbol,r,a,s.primary_sale_recipient,s.fee_recipient,s.seller_fee_basis_points,s.platform_fee_basis_points,s.platform_fee_recipient];case O.contractType:let i=O.schema.deploy.parse(e);return[await this.getSignerAddress(),i.name,i.symbol,r,a,i.primary_sale_recipient,i.platform_fee_recipient,i.platform_fee_basis_points];case H.contractType:let c=H.schema.deploy.parse(e);return[c.name,r,a,c.voting_token_address,c.voting_delay_in_blocks,c.voting_period_in_blocks,Qe.BigNumber.from(c.proposal_token_threshold),c.voting_quorum_fraction];case j.contractType:let d=j.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,d.recipients.map(C=>C.address),d.recipients.map(C=>Qe.BigNumber.from(C.sharesBps))];case B.contractType:let m=B.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,m.platform_fee_recipient,m.platform_fee_basis_points];case M.contractType:let u=M.schema.deploy.parse(e),g=ce[await this.getChainID()];return[await this.getSignerAddress(),u.name,u.symbol,r,a,u.fee_recipient,u.seller_fee_basis_points,g.fees,g.keyHash];default:return[]}}async getDefaultTrustedForwarders(){let t=await this.getChainID(),e=qr.find(a=>a===t),r=e?pr[e].biconomyForwarder:xa.AddressZero;return r!==xa.AddressZero?[ae,r]:[ae]}};p(_r,"ContractFactory");var Ye=class extends Pt{constructor(t,e,r){super(t,e);this.storage=r}async deployNFTCollection(t){return await this.deployContract(V.contractType,t)}async deployNFTDrop(t){return await this.deployContract(L.contractType,t)}async deployEdition(t){return await this.deployContract(G.contractType,t)}async deployEditionDrop(t){let e=k.schema.deploy.parse(t);return await this.deployContract(k.contractType,e)}async deployToken(t){return await this.deployContract(O.contractType,t)}async deployMarketplace(t){return await this.deployContract(B.contractType,t)}async deployPack(t){return await this.deployContract(M.contractType,t)}async deploySplit(t){return await this.deployContract(j.contractType,t)}async deployVote(t){return await this.deployContract(H.contractType,t)}async deployContract(t,e){return await(await this.getFactory()).deploy(t,e)}async getRegistry(){if(this._registry)return this._registry;let t=(await this.getProvider().getNetwork()).chainId,e=oe(t,"twRegistry");return this._registry=Promise.resolve(new vr(e,this.getProvider(),this.options))}async getFactory(){if(this._factory)return this._factory;let t=(await this.getProvider().getNetwork()).chainId,e=oe(t,"twFactory");return this._factory=Promise.resolve(new _r(e,this.getSignerOrProvider(),this.storage,this.options))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){var t,e;(t=this._factory)==null||t.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())}),(e=this._registry)==null||e.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())})}};p(Ye,"ContractDeployer");var Yo=require("ethers");function Ea(o,t){let e=Object.keys(o);for(let r in e){let a=o[e[r]],n=a instanceof File||a instanceof Buffer;if(typeof a=="object"&&!n){Ea(a,t);continue}!n||(o[e[r]]=`ipfs://${t.splice(0,1)[0]}`)}return o}p(Ea,"replaceFilePropertiesWithHashes");function Dr(o,t,e){let r=Object.keys(o);for(let a in r){let n=o[r[a]];o[r[a]]=Nr(n,t,e),Array.isArray(n)&&(o[r[a]]=n.map(s=>typeof s=="object"?Dr(s,t,e):Nr(s,t,e))),typeof n=="object"&&Dr(n,t,e)}return o}p(Dr,"replaceHashWithGatewayUrl");function Nr(o,t,e){return typeof o=="string"&&o&&o.toLowerCase().includes(t)?o.replace(t,e):o}p(Nr,"resolveGatewayUrl");globalThis.FormData||(globalThis.FormData=require("form-data"));var Xe=class{constructor(t=ca){this.gatewayUrl=`${t.replace(/\/$/,"")}/`}async upload(t,e,r){return`${await this.uploadBatch([t],0,e,r)}0`}async uploadBatch(t,e=0,r,a){let{cid:n}=await this.uploadBatchWithCid(t,e,r,a);return`ipfs://${n}/`}async getUploadToken(t){let e={"X-App-Name":`CONSOLE-TS-SDK-${t}`},r=await fetch(`${pa}/grant`,{method:"GET",headers:e});if(!r.ok)throw new Ae("Failed to get upload token");return await r.text()}async get(t){let r=await(await this._get(t)).json();return Dr(r,"ipfs://",this.gatewayUrl)}async uploadMetadata(t,e,r){let{metadataUris:a}=await this.uploadMetadataBatch([t],0,e,r);return a[0]}async uploadMetadataBatch(t,e,r,a){let n=(await this.batchUploadProperties(t)).map(m=>JSON.stringify(m)),{cid:s,fileNames:i}=await this.uploadBatchWithCid(n,e,r,a),c=`ipfs://${s}/`,d=i.map(m=>`${c}${m}`);return{baseUri:c,metadataUris:d}}async _get(t){let e=t;t&&(e=Nr(t,"ipfs://",this.gatewayUrl));let r=await fetch(e);if(!r.ok)throw new Error(`Status code (!= 200) =${r.status}`);return r}async batchUploadProperties(t){let e=t.flatMap(i=>this.buildFilePropertiesMap(i,[]));if(e.length===0)return t;let{cid:r,fileNames:a}=await this.uploadBatchWithCid(e),n=[];for(let i of a)n.push(`${r}/${i}`);return await Ea(t,n)}buildFilePropertiesMap(t,e=[]){if(Array.isArray(t))t.forEach(r=>{this.buildFilePropertiesMap(r,e)});else if(t){let r=Object.values(t);for(let a of r)a instanceof File||a instanceof Buffer?e.push(a):typeof a=="object"&&this.buildFilePropertiesMap(a,e)}return e}async uploadBatchWithCid(t,e=0,r,a){let n=await this.getUploadToken(r||""),s={name:`CONSOLE-TS-SDK-${r}`,keyvalues:{sdk:"typescript",contractAddress:r,signerAddress:a}},i=new FormData,c=[];t.forEach((u,g)=>{let C="",Q=u;if(u instanceof File){let it="";if(u.name){let ot=u.name.lastIndexOf(".");ot>-1&&(it=u.name.substring(ot))}C=`${g+e}${it}`}else u instanceof Buffer||typeof u=="string"?C=`${g+e}`:u&&u.name&&(u==null?void 0:u.data)?(Q=u==null?void 0:u.data,C=`${u.name}`):C=`${g+e}`;let ut=`files/${C}`;if(c.indexOf(C)>-1)throw new be(C);c.push(C),typeof window>"u"?i.append("file",Q,{filepath:ut}):i.append("file",new Blob([Q]),ut)}),i.append("pinataMetadata",JSON.stringify(s));let d=await fetch(da,{method:"POST",headers:{Authorization:`Bearer ${n}`},body:i}),m=await d.json();if(!d.ok)throw console.log(m),new Se("Failed to upload files to IPFS");return{cid:m.IpfsHash,fileNames:c}}};p(Xe,"IpfsStorage");var Xo=require("@thirdweb-dev/contracts");var ka=class extends Pt{contractCache=new Map;constructor(t,e={},r=new Xe){super(t,e);this.storage=r,this.deployer=new Ye(t,e,r)}getNFTDrop(t){return this.getContract(t,L.contractType)}getNFTCollection(t){return this.getContract(t,V.contractType)}getEditionDrop(t){return this.getContract(t,k.contractType)}getEdition(t){return this.getContract(t,G.contractType)}getToken(t){return this.getContract(t,O.contractType)}getVote(t){return this.getContract(t,H.contractType)}getSplit(t){return this.getContract(t,j.contractType)}getMarketplace(t){return this.getContract(t,B.contractType)}getPack(t){return this.getContract(t,M.contractType)}getContract(t,e){if(this.contractCache.has(t))return this.contractCache.get(t);let r=new Je[e](this.getSignerOrProvider(),t,this.storage,this.options);return this.contractCache.set(t,r),r}async resolveContractType(t){let e=Xo.IThirdwebContract__factory.connect(t,this.getSignerOrProvider()),r=Yo.ethers.utils.toUtf8String(await e.contractType()).replace(/\x00/g,"");return va[r]}async getContractList(t){let e=await(await this.deployer.getRegistry()).getContractAddresses(t);return(await Promise.all(e.map(async a=>({address:a,contractType:await this.resolveContractType(a).catch(n=>(console.error(`failed to get contract type for address: ${a}`,n),""))})))).map(({address:a,contractType:n})=>({address:a,contractType:n,metadata:()=>this.getContract(a,n).metadata.get()}))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){this.deployer.updateSignerOrProvider(this.getSignerOrProvider());for(let[,t]of this.contractCache)t.onNetworkUpdated(this.getSignerOrProvider())}};p(ka,"ThirdwebSDK");var tn=require("zod");var es=tn.z.object({toAddress:nt,amount:Et});0&&(module.exports={AdminRoleMissingError,AssetNotFoundError,AuctionAlreadyStartedError,AuctionHasNotEndedError,CONTRACTS_MAP,CONTRACT_ADDRESSES,ChainId,ChainlinkVrf,ClaimConditionInputArray,ClaimConditionInputSchema,ClaimConditionOutputSchema,ClaimEligibility,CommonContractOutputSchema,CommonContractSchema,CommonPlatformFeeSchema,CommonPrimarySaleSchema,CommonRoyaltySchema,CommonSymbolSchema,CommonTrustedForwarderSchema,ContractDeployer,ContractEncoder,ContractMetadata,ContractPrimarySale,ContractRoles,ContractRoyalty,CurrencySchema,CurrencyValueSchema,DEFAULT_IPFS_GATEWAY,DEFAULT_QUERY_ALL_COUNT,DelayedReveal,DropErc1155ClaimConditions,DropErc721ClaimConditions,DuplicateFileNameError,DuplicateLeafsError,Edition,EditionDrop,EditionMetadataInputSchema,EditionMetadataOutputSchema,EditionMetadataWithOwnerOutputSchema,Erc1155,Erc1155SignatureMinting,Erc20,Erc721,Erc721SignatureMinting,EventType,FetchError,FileNameMissingError,FunctionDeprecatedError,GasCostEstimator,InterfaceId_IERC1155,InterfaceId_IERC721,InvalidAddressError,IpfsStorage,ListingNotFoundError,ListingType,Marketplace,MarketplaceAuction,MarketplaceDirect,MerkleSchema,MintRequest1155,MintRequest721,MissingOwnerRoleError,MissingRoleError,NATIVE_TOKENS,NATIVE_TOKEN_ADDRESS,NFTCollection,NFTDrop,NotEnoughTokensError,NotFoundError,OZ_DEFENDER_FORWARDER_ADDRESS,OptionalPropertiesInput,OptionalPropertiesOutput,PINATA_IPFS_URL,Pack,PartialClaimConditionInputSchema,ProposalState,QuantityAboveLimitError,REMOTE_CONTRACT_NAME,REMOTE_CONTRACT_TO_CONTRACT_TYPE,RestrictedTransferError,SUPPORTED_CHAIN_IDS,Signature1155PayloadInput,Signature1155PayloadOutput,SignaturePayloadInput,SignaturePayloadOutput,SnapshotAddress,SnapshotInfoSchema,SnapshotInputSchema,SnapshotSchema,Split,TW_IPFS_SERVER_URL,ThirdwebSDK,Token,TokenMintInputSchema,TransactionError,UnderlyingType,UploadError,Vote,VoteType,WrongListingTypeError,convertToTWError,createSnapshot,getContractAddressByChainId,getNativeTokenByChainId,getRoleHash,hashLeafNode});
//# sourceMappingURL=index.js.map