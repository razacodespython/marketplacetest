{"version":3,"sources":["../src/Users/jnsdls/Code/nftlabs-sdk-ts/src/index.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/contract-encoder.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/contract-metadata.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/role.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/contract-roles.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/error.ts","../src/schema/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/shared.ts","../src/schema/contracts/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/common/index.ts","../src/schema/contracts/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/common/claim-conditions.ts","../src/constants/Users/jnsdls/Code/nftlabs-sdk-ts/src/constants/chains.ts","../src/constants/Users/jnsdls/Code/nftlabs-sdk-ts/src/constants/currency.ts","../src/schema/contracts/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/common/currency.ts","../src/schema/contracts/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/common/snapshots.ts","../src/schema/contracts/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/common/signature.ts","../src/schema/tokens/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/tokens/common/index.ts","../src/schema/tokens/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/tokens/common/properties.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/signature-minting.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/contract-royalty.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/contract-sales.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/drop-erc721-claim-conditions.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/currency.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/contract-wrapper.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/rpc-connection-handler.ts","../src/constants/Users/jnsdls/Code/nftlabs-sdk-ts/src/constants/addresses.ts","../src/schema/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/sdk-options.ts","../src/constants/Users/jnsdls/Code/nftlabs-sdk-ts/src/constants/events.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/forwarder.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/permit.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/sign.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/gas-price.ts","../src/constants/Users/jnsdls/Code/nftlabs-sdk-ts/src/constants/chainlink.ts","../src/constants/Users/jnsdls/Code/nftlabs-sdk-ts/src/constants/contract.ts","../src/constants/Users/jnsdls/Code/nftlabs-sdk-ts/src/constants/urls.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/snapshots.ts","../src/enums/marketplace/Users/jnsdls/Code/nftlabs-sdk-ts/src/enums/marketplace/ListingType.ts","../src/enums/vote/Users/jnsdls/Code/nftlabs-sdk-ts/src/enums/vote/ProposalState.ts","../src/enums/vote/Users/jnsdls/Code/nftlabs-sdk-ts/src/enums/vote/Vote.ts","../src/enums/Users/jnsdls/Code/nftlabs-sdk-ts/src/enums/ClaimEligibility.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/claim-conditions.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/drop-erc1155-claim-conditions.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/erc-20.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/erc-721.ts","../src/types/Users/jnsdls/Code/nftlabs-sdk-ts/src/types/QueryParams.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/nft.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/erc-1155.ts","../src/schema/tokens/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/tokens/edition.ts","../src/types/Users/jnsdls/Code/nftlabs-sdk-ts/src/types/packs.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/erc-721-signature-minting.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/erc-1155-signature-minting.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/marketplace-direct.ts","../src/common/Users/jnsdls/Code/nftlabs-sdk-ts/src/common/marketplace.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/marketplace-auction.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/registry.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/factory.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/token-erc721.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/nft-collection.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/edition-drop.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/drop-erc1155.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/gas-cost-estimator.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/edition.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/token-erc1155.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/token-erc20.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/token.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/vote.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/vote.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/split.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/splits.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/marketplace.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/marketplace.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/pack.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/packs.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/nft-drop.ts","../src/schema/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/contracts/drop-erc721.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/delayed-reveal.ts","../src/contracts/Users/jnsdls/Code/nftlabs-sdk-ts/src/contracts/maps.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/contract-deployer.ts","../src/core/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/sdk.ts","../src/core/helpers/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/helpers/storage.ts","../src/core/classes/Users/jnsdls/Code/nftlabs-sdk-ts/src/core/classes/ipfs-storage.ts","../src/schema/tokens/Users/jnsdls/Code/nftlabs-sdk-ts/src/schema/tokens/token.ts"],"sourcesContent":["import \"cross-fetch/polyfill\";\n\n/**\n * The {@link https://thirdweb.com | thirdweb} typescript sdk.\n *\n * @remarks\n * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.\n *\n * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )\n *\n *\n * @example\n * To get you started here's how you would instantiate the SDK and fetch some NFTs\n *\n * 1. Install the sdk\n * ```shell\n * npm install @thirdweb-dev/sdk\n * ```\n *\n * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.\n *\n * 3. Write the tiniest amount of code!\n * ```typescript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contractAddress = \"0x...\"; // your contract address from step 2\n * const nftContract = sdk.getNFTCollection(contractAddress);\n *\n *  const nftListWithOwnerAddress = await nftContract.getAllWithOwner();\n *  console.log(nftListWithOwnerAddress);\n * ```\n * ```\n * Output\n * => [\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       ...\n *    ]\n * ```\n *\n * @packageDocumentation\n */\nexport * from \"./core\";\nexport * from \"./core/classes\";\nexport * from \"./types\";\nexport * from \"./enums\";\nexport * from \"./common\";\nexport * from \"./constants\";\nexport * from \"./contracts\";\nexport type { ContractType, NetworkOrSignerOrProvider } from \"./core/types\";\nexport type {\n  NFTMetadataInput,\n  NFTMetadataOwner,\n  NFTMetadata,\n} from \"./schema/tokens/common\";\nexport * from \"./schema/tokens/edition\";\n\nexport type { Role } from \"./common/role\";\nexport * from \"./core/classes/ipfs-storage\";\nexport { CommonContractSchema } from \"./schema/contracts/common\";\nexport * from \"./schema/contracts/common/claim-conditions\";\nexport * from \"./schema/tokens/common/properties\";\nexport * from \"./constants/chains\";\nexport * from \"./schema/tokens/token\";\nexport * from \"./schema/tokens/edition\";\nexport * from \"./schema/contracts/common\";\nexport type { SDKOptions, SDKOptionsSchema } from \"./schema/sdk-options\";\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract } from \"ethers\";\nimport { Result } from \"@ethersproject/abi\";\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\nexport class ContractEncoder<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Encodes the given contract function with argument\n   * @returns the encoded data\n   */\n  public encode(\n    fn: keyof TContract[\"functions\"],\n    args: Parameters<TContract[\"functions\"][typeof fn]>,\n  ): string {\n    return this.contractWrapper.readContract.interface.encodeFunctionData(\n      fn as string,\n      args,\n    );\n  }\n\n  /**\n   * Decode encoded call data for a given function\n   * @param fn - the function to decode\n   * @param encodedArgs - the encoded arguments\n   */\n  public decode(fn: keyof TContract[\"functions\"], encodedArgs: string): Result {\n    return this.contractWrapper.readContract.interface.decodeFunctionData(\n      fn as string,\n      encodedArgs,\n    );\n  }\n}\n","import { IThirdwebContract } from \"@thirdweb-dev/contracts\";\nimport { z } from \"zod\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { TransactionResult } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\n\n/**\n * @internal\n */\nexport interface IGenericSchemaType {\n  deploy: z.AnyZodObject;\n  input: z.AnyZodObject;\n  output: z.AnyZodObject;\n}\n\n/**\n * Handles metadata for a Contract\n * @public\n */\nexport class ContractMetadata<\n  TContract extends IThirdwebContract,\n  TSchema extends IGenericSchemaType,\n> {\n  private contractWrapper;\n  private schema;\n  private storage;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    schema: TSchema,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  public parseOutputMetadata(metadata: any): z.output<TSchema[\"output\"]> {\n    return this.schema.output.parse(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  public parseInputMetadata(metadata: any): z.input<TSchema[\"input\"]> {\n    return this.schema.input.parse(metadata);\n  }\n  /**\n   *\n   * @returns the metadata of the given contract\n   */\n  public async get() {\n    const uri = await this.contractWrapper.readContract.contractURI();\n    const data = await this.storage.get(uri);\n    return this.parseOutputMetadata(data);\n  }\n  /**\n   *\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  public async set(metadata: z.input<TSchema[\"input\"]>) {\n    const uri = await this._parseAndUploadMetadata(metadata);\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"setContractURI\",\n      [uri],\n    );\n    return { receipt, data: this.get } as TransactionResult<\n      z.output<TSchema[\"output\"]>\n    >;\n  }\n\n  public async update(metadata: Partial<z.input<TSchema[\"input\"]>>) {\n    return await this.set({\n      ...(await this.get()),\n      ...metadata,\n    });\n  }\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  public async _parseAndUploadMetadata(metadata: z.input<TSchema[\"input\"]>) {\n    const parsedMetadata = this.parseInputMetadata(metadata);\n    return this.storage.uploadMetadata(parsedMetadata);\n  }\n}\n","import { BytesLike, ethers } from \"ethers\";\n\n/**\n *\n * @internal\n */\nconst roleMap = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  editor: \"EDITOR_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\",\n} as const;\n\n/**\n * @public\n */\nexport type Role = keyof typeof roleMap;\n\n/**\n * @internal\n */\nexport function getRoleHash(role: Role): BytesLike {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers.utils.id(roleMap[role]);\n}\n","import { TransactionResult } from \"../types\";\nimport { getRoleHash, Role } from \"../../common/role\";\nimport { AccessControlEnumerable } from \"@thirdweb-dev/contracts\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { MissingRoleError } from \"../../common/error\";\n\n/**\n * Handles Contract roles and permissions\n * @public\n */\nexport class ContractRoles<\n  TContract extends AccessControlEnumerable,\n  TRole extends Role,\n> {\n  private contractWrapper;\n  private readonly roles;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    roles: readonly TRole[],\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the contract.\n   *\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   */\n  public async getAll(): Promise<Record<TRole, string[]>> {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {} as Record<TRole, string[]>;\n    for (const role of this.roles) {\n      roles[role] = await this.get(role);\n    }\n    return roles;\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   *\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses: string[] = await contract.getRoleMemberList(\"minter\");\n   * ```\n   *\n   * @public\n   */\n  public async get(role: TRole): Promise<string[]> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n\n    const roleHash = getRoleHash(role);\n    const count = (\n      await this.contractWrapper.readContract.getRoleMemberCount(roleHash)\n    ).toNumber();\n    return await Promise.all(\n      Array.from(Array(count).keys()).map((i) =>\n        this.contractWrapper.readContract.getRoleMember(roleHash, i),\n      ),\n    );\n  }\n\n  /**\n   * Call this to OVERWRITE the list of addresses that are members of specific roles.\n   *\n   * Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requestiong a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses: string[] = await contract.getRoleMemberList(\"minter\");\n   * await contract.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.getRoleMemberList(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   *\n   * */\n  public async setAll(rolesWithAddresses: {\n    [key in TRole]?: string[];\n  }): Promise<TransactionResult> {\n    const roles = Object.keys(rolesWithAddresses) as TRole[];\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(\n      roles.every((role) => this.roles.includes(role)),\n      \"this contract does not support the given role\",\n    );\n    const currentRoles = await this.getAll();\n    const encoded: string[] = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    roles\n      .sort((role) => (role === \"admin\" ? 1 : -1))\n      .forEach(async (role) => {\n        const addresses: string[] = rolesWithAddresses[role] || [];\n        const currentAddresses = currentRoles[role] || [];\n        const toAdd = addresses.filter(\n          (address) => !currentAddresses.includes(address),\n        );\n        const toRemove = currentAddresses.filter(\n          (address) => !addresses.includes(address),\n        );\n        if (toAdd.length) {\n          toAdd.forEach((address) => {\n            encoded.push(\n              this.contractWrapper.readContract.interface.encodeFunctionData(\n                \"grantRole\",\n                [getRoleHash(role), address],\n              ),\n            );\n          });\n        }\n        if (toRemove.length) {\n          toRemove.forEach(async (address) => {\n            const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n              address,\n            )) as any;\n            encoded.push(\n              this.contractWrapper.readContract.interface.encodeFunctionData(\n                revokeFunctionName,\n                [getRoleHash(role), address],\n              ),\n            );\n          });\n        }\n      });\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  public async verify(roles: TRole[], address: string): Promise<void> {\n    await Promise.all(\n      roles.map(async (role) => {\n        const members = await this.get(role);\n        if (\n          !members.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n        ) {\n          throw new MissingRoleError(address, role);\n        }\n      }),\n    );\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks\n   *\n   * Make sure you are sure you want to grant the role to the address.\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   */\n  public async grant(role: TRole, address: string): Promise<TransactionResult> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"grantRole\", [\n        getRoleHash(role),\n        address,\n      ]),\n    };\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the module.\n   * There is no way to recover from this.\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   */\n  public async revoke(\n    role: TRole,\n    address: string,\n  ): Promise<TransactionResult> {\n    invariant(\n      this.roles.includes(role),\n      `this contract does not support the \"${role}\" role`,\n    );\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(revokeFunctionName, [\n        getRoleHash(role),\n        address,\n      ]),\n    };\n  }\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  private async getRevokeRoleFunctionName(address: string) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n","import { BigNumberish } from \"ethers\";\nimport { Network } from \"@ethersproject/providers\";\n\n/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @internal\n */\nexport class NotFoundError extends Error {\n  /** @internal */\n  constructor(identifier?: string) {\n    super(identifier ? `Object with id ${identifier} NOT FOUND` : \"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @internal\n */\nexport class InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address?: string) {\n    super(\n      address ? `'${address}' is an invalid address` : \"Invalid address passed\",\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class MissingRoleError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(address: string, role: string) {\n    super(`MISSING ROLE: ${address} does not have the '${role}' role`);\n  }\n}\n\n/**\n * @internal\n */\nexport class AssetNotFoundError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(message = \"The asset you're trying to use could not be found.\") {\n    super(`message: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class UploadError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`UPLOAD_FAILED: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class FileNameMissingError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"File name is required when object is not a `File` type object.\");\n  }\n}\n\n/**\n * @internal\n */\nexport class DuplicateFileNameError extends Error {\n  /** @internal */\n  constructor(fileName: string) {\n    super(\n      `DUPLICATE_FILE_NAME_ERROR: File name ${fileName} was passed for more than one file.`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class NotEnoughTokensError extends Error {\n  /** @internal */\n  constructor(contractAddress: string, quantity: number, available: number) {\n    super(\n      `BALANCE ERROR: you do not have enough balance on contract ${contractAddress} to use ${quantity} tokens. You have ${available} tokens available.`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class MissingOwnerRoleError extends Error {\n  /** @internal */\n  constructor() {\n    super(`LIST ERROR: you should be the owner of the token to list it.`);\n  }\n}\n\n/**\n * @internal\n */\nexport class QuantityAboveLimitError extends Error {\n  /** @internal */\n  constructor(quantity: string) {\n    super(`BUY ERROR: You cannot buy more than ${quantity} tokens`);\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n * @internal\n */\nexport class FetchError extends Error {\n  public innerError?: Error;\n\n  /** @internal */\n  constructor(message: string, innerError?: Error) {\n    super(`FETCH_FAILED: ${message}`);\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n * @internal\n */\nexport class DuplicateLeafsError extends Error {\n  constructor(message?: string) {\n    super(`DUPLICATE_LEAFS${message ? ` : ${message}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to update/cancel an auction that already started\n * @internal\n */\nexport class AuctionAlreadyStartedError extends Error {\n  constructor(id?: string) {\n    super(\n      `Auction already started with existing bid${id ? `, id: ${id}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class FunctionDeprecatedError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`FUNCTION DEPRECATED. ${message ? `Use ${message} instead` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\n * @internal\n */\nexport class ListingNotFoundError extends Error {\n  constructor(marketplaceContractAddress: string, listingId?: string) {\n    super(\n      `Could not find listing.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing of the wrong type\n * @internal\n */\nexport class WrongListingTypeError extends Error {\n  constructor(\n    marketplaceContractAddress: string,\n    listingId?: string,\n    actualType?: string,\n    expectedType?: string,\n  ) {\n    super(\n      `Incorrect listing type. Are you sure you're using the right method?.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}${\n        expectedType ? ` expected type: ${expectedType}` : \"\"\n      }${actualType ? ` actual type: ${actualType}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to transfer an asset that has restricted transferability\n * @internal\n */\nexport class RestrictedTransferError extends Error {\n  constructor(assetAddress?: string) {\n    super(\n      `Failed to transfer asset, transfer is restricted.${\n        assetAddress ? ` Address : ${assetAddress}` : \"\"\n      }`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to execute an admin-role function.\n * @internal\n */\nexport class AdminRoleMissingError extends Error {\n  constructor(\n    address?: string,\n    contractAddress?: string,\n    message = \"Failed to execute transaction\",\n  ) {\n    super(\n      `${message}, admin role is missing${\n        address ? ` on address: ${address}` : \"\"\n      }${contractAddress ? ` on contract: ${contractAddress}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to close an auction that has not ended\n * @internal\n */\nexport class AuctionHasNotEndedError extends Error {\n  constructor(id?: string, endTime?: BigNumberish) {\n    super(\n      `Auction has not ended yet${id ? `, id: ${id}` : \"\"}${\n        endTime ? `, end time: ${endTime.toString()}` : \"\"\n      }`,\n    );\n  }\n}\n\n/**\n * @public\n */\nexport class TransactionError extends Error {\n  public reason: string;\n  public from: string;\n  public to: string;\n  public data: string;\n  public chain: Network;\n  public rpcUrl: string;\n\n  constructor(\n    reason: string,\n    from: string,\n    to: string,\n    data: string,\n    network: Network,\n    rpcUrl: string,\n    raw: string,\n  ) {\n    let builtErrorMsg = \"Contract transaction failed\\n\\n\";\n    builtErrorMsg += `Message: ${reason}`;\n    builtErrorMsg += \"\\n\\n| Transaction info |\\n\";\n    builtErrorMsg += withSpaces(\"from\", from);\n    builtErrorMsg += withSpaces(\"to\", to);\n    builtErrorMsg += withSpaces(\"data\", data);\n    builtErrorMsg += withSpaces(\n      `chain`,\n      `${network.name} (${network.chainId})`,\n    );\n    try {\n      const url = new URL(rpcUrl);\n      builtErrorMsg += withSpaces(`RPC`, url.hostname);\n    } catch (e2) {\n      // ignore if can't parse URL\n    }\n    builtErrorMsg += \"\\n\\n\";\n    builtErrorMsg +=\n      \"Need help with this error? Join our community: https://discord.gg/thirdweb\";\n    builtErrorMsg += \"\\n\\n\\n\\n\";\n    builtErrorMsg += \"| Raw error |\";\n    builtErrorMsg += \"\\n\\n\";\n    builtErrorMsg += raw;\n    super(builtErrorMsg);\n    this.reason = reason;\n    this.from = from;\n    this.to = to;\n    this.data = data;\n    this.chain = network;\n    this.rpcUrl = rpcUrl;\n  }\n}\n\n/**\n * @internal\n * @param error\n * @param network\n * @param signerAddress\n * @param contractAddress\n */\nexport async function convertToTWError(\n  error: any,\n  network: Network,\n  signerAddress: string,\n  contractAddress: string,\n): Promise<TransactionError> {\n  let raw: string;\n  if (error.data) {\n    // metamask errors comes as objects, apply parsing on data object\n    // TODO test errors from other wallets\n    raw = JSON.stringify(error.data);\n  } else if (error instanceof Error) {\n    // regular ethers.js error\n    raw = error.message;\n  } else {\n    // not sure what this is, just throw it back\n    return error;\n  }\n  const reason = parseMessageParts(/.*?\"message[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  const data = parseMessageParts(/.*?\"data[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  const rpcUrl = parseMessageParts(/.*?\"url[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  let from = parseMessageParts(/.*?\"from[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  let to = parseMessageParts(/.*?\"to[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  if (to === \"\") {\n    // fallback to contractAddress\n    to = contractAddress;\n  }\n  if (from === \"\") {\n    // fallback to signerAddress\n    from = signerAddress;\n  }\n  return new TransactionError(reason, from, to, data, network, rpcUrl, raw);\n}\n\nfunction withSpaces(label: string, content: string) {\n  if (content === \"\") {\n    return content;\n  }\n  const spaces = Array(10 - label.length)\n    .fill(\" \")\n    .join(\"\");\n  return `\\n${label}:${spaces}${content}`;\n}\n\nfunction parseMessageParts(regex: RegExp, raw: string): string {\n  const msgMatches = raw.match(regex) || [];\n  let extracted = \"\";\n  if (msgMatches?.length > 0) {\n    extracted += msgMatches[1];\n  }\n  return extracted;\n}\n","import { BigNumber } from \"ethers\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { z } from \"zod\";\nimport { Json } from \"../core/types\";\n\nif (!globalThis.File) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.File = require(\"@web-std/file\").File;\n}\n\nexport const MAX_BPS = 10_000;\n\nconst isBrowser = () => typeof window !== \"undefined\";\n\nconst fileOrBufferUnion = isBrowser()\n  ? ([z.instanceof(File), z.string()] as [\n      z.ZodType<InstanceType<typeof File>>,\n      z.ZodString,\n    ])\n  : ([z.instanceof(Buffer), z.string()] as [\n      z.ZodTypeAny, // @fixme, this is a hack to make browser happy for now\n      z.ZodString,\n    ]);\n\nexport const FileBufferOrStringSchema = z.union(fileOrBufferUnion);\nexport type FileBufferOrString = z.output<typeof FileBufferOrStringSchema>;\n\nexport const BytesLikeSchema = z.union([z.array(z.number()), z.string()]);\n\n// TODO z.instance(BigNumber) might not be compatible with the caller's version of ethers BigNumber\nexport const BigNumberSchema = z\n  .union([z.string(), z.number(), z.bigint(), z.instanceof(BigNumber)])\n  .transform((arg) => BigNumber.from(arg));\n\nexport const BigNumberishSchema = BigNumberSchema.transform((arg) =>\n  arg.toString(),\n);\n\nexport const BasisPointsSchema = z\n  .number()\n  .max(MAX_BPS, \"Cannot exeed 100%\")\n  .min(0, \"Cannot be below 0%\");\n\nexport const PercentSchema = z\n  .number()\n  .max(100, \"Cannot exeed 100%\")\n  .min(0, \"Cannot be below 0%\");\n\nexport const JsonLiteral = z.union([\n  z.string(),\n  z.number(),\n  z.boolean(),\n  z.null(),\n]);\n\nexport const JsonSchema: z.ZodSchema<Json> = z.lazy(() =>\n  z.union([JsonLiteral, z.array(JsonSchema), z.record(JsonSchema)]),\n);\nexport const JsonObjectSchema = z.record(JsonSchema);\nexport const HexColor = z.union([\n  z\n    .string()\n    .regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, \"Invalid hex color\")\n    .transform((val) => val.replace(\"#\", \"\")),\n  z.string().length(0),\n]);\n\nexport const AddressSchema = z.string().refine(\n  (arg) => isAddress(arg),\n  (out) => {\n    return {\n      message: `${out} is not a valid address`,\n    };\n  },\n);\n\nexport const PriceSchema = z\n  .union([\n    z.string().regex(/^([0-9]+\\.?[0-9]*|\\.[0-9]+)$/, \"Invalid price\"),\n    z.number().min(0, \"Price cannot be negative\"),\n  ])\n  .transform((arg) => (typeof arg === \"number\" ? arg.toString() : arg));\n\nexport const RawDateSchema = z.date().transform((i) => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n});\n\n/**\n * Default to now\n */\nexport const StartDateSchema = RawDateSchema.default(new Date());\n\n/**\n * Default to 10 years from now\n */\nexport const EndDateSchema = RawDateSchema.default(\n  new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10),\n);\n","import {\n  AddressSchema,\n  BasisPointsSchema,\n  FileBufferOrStringSchema,\n  JsonSchema,\n} from \"../../shared\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { z } from \"zod\";\n\n/**\n * @internal\n */\nexport const CommonContractSchema = z.object({\n  name: z.string(),\n  description: z.string().optional(),\n  image: FileBufferOrStringSchema.optional(),\n  external_link: z.string().url().optional(),\n});\n\n/**\n * @internal\n */\nexport const CommonContractOutputSchema = CommonContractSchema.extend({\n  image: z.string().optional(),\n}).catchall(z.lazy(() => JsonSchema));\n\n/**\n * @internal\n */\nexport const CommonRoyaltySchema = z.object({\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   *\n   *  @internalremarks used by OpenSea \"seller_fee_basis_points\"\n   */\n  seller_fee_basis_points: BasisPointsSchema.default(0),\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   * @internalremarks used by OpenSea \"fee_recipient\"\n   */\n  fee_recipient: AddressSchema.default(AddressZero),\n});\n\n/**\n * @internal\n */\nexport const CommonPrimarySaleSchema = z.object({\n  /**\n   * primary sale recipient address\n   */\n  primary_sale_recipient: AddressSchema,\n});\n\n/**\n * @internal\n */\nexport const CommonPlatformFeeSchema = z.object({\n  /**\n   * platform fee basis points\n   */\n  platform_fee_basis_points: BasisPointsSchema.default(0),\n  /**\n   * platform fee recipient address\n   */\n  platform_fee_recipient: AddressSchema.default(AddressZero),\n});\n\n/**\n * @internal\n */\nexport const CommonTrustedForwarderSchema = z.object({\n  trusted_forwarders: z.array(AddressSchema).default([]),\n});\n\n/**\n * @internal\n */\nexport const CommonSymbolSchema = z.object({\n  symbol: z.string().optional().default(\"\"),\n});\n\nexport * from \"./claim-conditions\";\nexport * from \"./currency\";\nexport * from \"./signature\";\nexport * from \"./snapshots\";\n","import { z } from \"zod\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  BigNumberishSchema,\n  BigNumberSchema,\n  BytesLikeSchema,\n  PriceSchema,\n  StartDateSchema,\n} from \"../../shared\";\nimport { hexZeroPad } from \"ethers/lib/utils\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../constants/currency\";\nimport { CurrencyValueSchema } from \"./currency\";\nimport { SnapshotInputSchema } from \"./snapshots\";\n\n/**\n * @internal\n */\nexport const ClaimConditionInputSchema = z.object({\n  startTime: StartDateSchema,\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: PriceSchema.default(0),\n  maxQuantity: BigNumberishSchema.default(ethers.constants.MaxUint256),\n  quantityLimitPerTransaction: BigNumberishSchema.default(\n    ethers.constants.MaxUint256,\n  ),\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: BytesLikeSchema.default(hexZeroPad([0], 32)),\n  snapshot: z.optional(SnapshotInputSchema),\n});\n\n/**\n * @internal\n */\nexport const ClaimConditionInputArray = z.array(ClaimConditionInputSchema);\n\n/**\n * @internal\n */\nexport const PartialClaimConditionInputSchema =\n  ClaimConditionInputSchema.partial();\n\n/**\n * @internal\n */\nexport const ClaimConditionOutputSchema = ClaimConditionInputSchema.extend({\n  availableSupply: z.string().default(\"\"),\n  currencyMetadata: CurrencyValueSchema.default({\n    value: BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\",\n  }),\n  price: BigNumberSchema,\n  maxQuantity: BigNumberSchema,\n  quantityLimitPerTransaction: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform((n) => new Date(n.toNumber() * 1000)),\n});\n","/**\n * @public\n */\nexport enum ChainId {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Kovan = 42,\n  BSC = 56,\n  xDai = 100,\n  Polygon = 137,\n  Moonriver = 1285,\n  Mumbai = 80001,\n  Harmony = 1666600000,\n  Localhost = 1337,\n  Hardhat = 31337,\n  Fantom = 250,\n  FantomTestnet = 4002,\n  Avalanche = 43114,\n  AvalancheFujiTestnet = 43113,\n}\n\n/**\n * @public\n */\nexport type SUPPORTED_CHAIN_ID =\n  | ChainId.Mainnet\n  | ChainId.Rinkeby\n  | ChainId.Goerli\n  | ChainId.Mumbai\n  | ChainId.Polygon\n  | ChainId.Fantom\n  | ChainId.FantomTestnet\n  | ChainId.Avalanche\n  | ChainId.AvalancheFujiTestnet;\n\n/**\n * @public\n */\nexport const SUPPORTED_CHAIN_IDS: SUPPORTED_CHAIN_ID[] = [\n  ChainId.Mainnet,\n  ChainId.Rinkeby,\n  ChainId.Goerli,\n  ChainId.Polygon,\n  ChainId.Mumbai,\n  ChainId.Fantom,\n  ChainId.FantomTestnet,\n  ChainId.Avalanche,\n  ChainId.AvalancheFujiTestnet,\n];\n","import { ChainId, SUPPORTED_CHAIN_ID } from \"./chains\";\nimport { NativeToken } from \"../types/currency\";\n\n/**\n * @public\n */\nexport const NATIVE_TOKEN_ADDRESS =\n  \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n/**\n * @public\n */\nexport const NATIVE_TOKENS: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  NativeToken\n> = {\n  [ChainId.Mainnet]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Rinkeby]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Goerli]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n  [ChainId.Polygon]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\",\n    },\n  },\n  [ChainId.Mumbai]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\",\n    },\n  },\n  [ChainId.Avalanche]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\",\n    },\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\",\n    },\n  },\n  [ChainId.Fantom]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\",\n    },\n  },\n  [ChainId.FantomTestnet]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\",\n    },\n  },\n  [ChainId.Hardhat]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\",\n    },\n  },\n};\n\n/**\n * Returns the native token for a given chain\n * @param chainId - the chain id\n * @public\n */\nexport function getNativeTokenByChainId(chainId: ChainId): NativeToken {\n  return NATIVE_TOKENS[chainId as SUPPORTED_CHAIN_ID];\n}\n","import { z } from \"zod\";\nimport { BigNumberSchema } from \"../../shared\";\n\n/**\n * @internal\n */\nexport const CurrencySchema = z.object({\n  name: z.string(),\n  symbol: z.string(),\n  decimals: z.number(),\n});\n\n/**\n * @internal\n */\nexport const CurrencyValueSchema = CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: z.string(),\n});\n","import { z } from \"zod\";\n\n/**\n * @internal\n */\nexport const MerkleSchema = z.object({\n  merkle: z.record(z.string()).default({}),\n});\n\n/**\n * @internal\n */\nexport const SnapshotAddress = z.object({\n  address: z.string(),\n  maxClaimable: z.number().default(0),\n});\n\n/**\n * @internal\n */\nexport const SnapshotInputSchema = z.union([\n  z.array(z.string()).transform((strings) =>\n    strings.map((address) =>\n      SnapshotAddress.parse({\n        address,\n      }),\n    ),\n  ),\n  z.array(SnapshotAddress),\n]);\n\n/**\n * @internal\n */\nexport const SnapshotSchema = z.object({\n  /**\n   * The merkle root\n   */\n  merkleRoot: z.string(),\n  claims: z.array(\n    SnapshotAddress.extend({\n      proof: z.array(z.string()),\n    }),\n  ),\n});\n\n/**\n * @internal\n */\nexport const SnapshotInfoSchema = z.object({\n  merkleRoot: z.string(),\n  snapshotUri: z.string(),\n  snapshot: SnapshotSchema,\n});\n","import {\n  BasisPointsSchema,\n  BigNumberishSchema,\n  BigNumberSchema,\n  EndDateSchema,\n  PriceSchema,\n  StartDateSchema,\n} from \"../../shared\";\nimport { z } from \"zod\";\nimport { CommonNFTInput } from \"../../tokens/common\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../constants/currency\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { ethers } from \"ethers\";\nimport { resolveOrGenerateId } from \"../../../common/signature-minting\";\n\n/**\n * @internal\n */\nexport const SignaturePayloadInput = z.object({\n  metadata: CommonNFTInput,\n  to: z.string().default(AddressZero),\n  price: PriceSchema.default(0),\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: z\n    .string()\n    .optional()\n    .transform((arg) => resolveOrGenerateId(arg)),\n  royaltyRecipient: z.string().default(AddressZero),\n  royaltyBps: BasisPointsSchema.default(0),\n  primarySaleRecipient: z.string().default(AddressZero),\n});\n\n/**\n * @internal\n */\nexport const SignaturePayloadOutput = SignaturePayloadInput.extend({\n  uri: z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature1155PayloadInput = SignaturePayloadInput.extend({\n  tokenId: BigNumberishSchema.default(ethers.constants.MaxUint256),\n  quantity: BigNumberishSchema,\n});\n\n/**\n * @internal\n */\nexport const Signature1155PayloadOutput = SignaturePayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema,\n});\n\n/**\n * @public\n */\nexport type FilledSignaturePayload = z.output<typeof SignaturePayloadInput>;\n/**\n * @public\n */\nexport type PayloadWithUri = z.output<typeof SignaturePayloadOutput>;\n\nexport type PayloadToSign = z.input<typeof SignaturePayloadInput>;\nexport type SignedPayload = { payload: PayloadWithUri; signature: string };\n\n/**\n * @public\n */\nexport type FilledSignaturePayload1155 = z.output<\n  typeof Signature1155PayloadInput\n>;\n/**\n * @public\n */\nexport type PayloadWithUri1155 = z.output<typeof Signature1155PayloadOutput>;\n/**\n * @public\n */\nexport type PayloadToSign1155 = z.input<typeof Signature1155PayloadInput>;\n/**\n * @public\n */\nexport type SignedPayload1155 = {\n  payload: PayloadWithUri1155;\n  signature: string;\n};\n\nexport const MintRequest721 = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"price\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\nexport const MintRequest1155 = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"tokenId\", type: \"uint256\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"quantity\", type: \"uint256\" },\n  { name: \"pricePerToken\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n","import { z } from \"zod\";\nimport {\n  BigNumberSchema,\n  FileBufferOrStringSchema,\n  HexColor,\n  JsonSchema,\n} from \"../../shared\";\nimport {\n  OptionalPropertiesInput,\n  OptionalPropertiesOutput,\n} from \"./properties\";\n\n/**\n * @internal\n */\nexport const CommonTokenInput = z\n  .object({\n    name: z.string().nonempty({ message: \"A name is required.\" }),\n    description: z.string().optional(),\n    image: FileBufferOrStringSchema.optional(),\n    external_url: z.string().optional(),\n  })\n  .catchall(z.lazy(() => JsonSchema));\n\n/**\n * @internal\n */\nexport const CommonTokenOutput = CommonTokenInput.extend({\n  id: BigNumberSchema,\n  uri: z.string(),\n  image: z.string().optional(),\n  external_url: z.string().optional(),\n});\n\n/**\n * @internal\n */\nexport const CommonNFTInput = CommonTokenInput.extend({\n  animation_url: FileBufferOrStringSchema.optional(),\n  background_color: HexColor.optional(),\n  properties: OptionalPropertiesInput,\n});\n\n/**\n * @internal\n */\nexport const CommonNFTOutput = CommonTokenOutput.extend({\n  animation_url: z.string().optional(),\n  properties: OptionalPropertiesOutput,\n});\n\n/**\n * @public\n */\nexport type NFTMetadataInput = z.input<typeof CommonNFTInput>;\n/**\n * @public\n */\nexport type NFTMetadata = z.output<typeof CommonNFTOutput>;\n/**\n * @public\n */\nexport type NFTMetadataOwner = { metadata: NFTMetadata; owner: string };\n","import { z } from \"zod\";\nimport { FileBufferOrStringSchema, JsonLiteral } from \"../../shared\";\n\nconst ValidPropertyValue = JsonLiteral.or(FileBufferOrStringSchema);\nconst _optionalProperties = z\n  .union([\n    z\n      .array(\n        z.object({\n          key: z.string(),\n          value: ValidPropertyValue,\n        }),\n      )\n\n      .superRefine((val, ctx) => {\n        if (!val) {\n          return;\n        }\n        const keyCount: Record<string, number> = {};\n\n        val.forEach(({ key }, idx) => {\n          if (!keyCount[key]) {\n            keyCount[key] = 0;\n          }\n\n          keyCount[key]++;\n          if (keyCount[key] > 1) {\n            ctx.addIssue({\n              code: z.ZodIssueCode.custom,\n              message: `Duplicate key: ${key}`,\n              path: [idx, \"key\"],\n            });\n          }\n        });\n      }),\n    z.record(ValidPropertyValue),\n  ])\n  .optional();\n\n/**\n * @internal\n */\nexport const OptionalPropertiesInput = z\n  .preprocess((val) => {\n    const knownVal = val as z.input<typeof _optionalProperties>;\n\n    if (Array.isArray(knownVal)) {\n      return knownVal.filter((v) => v.value);\n    }\n    return knownVal;\n  }, _optionalProperties)\n  .transform((properties) => {\n    if (Array.isArray(properties)) {\n      return properties.reduce(\n        (acc, prop) => ({ ...acc, ...{ [prop.key]: prop.value } }),\n        {} as Record<string, z.input<typeof ValidPropertyValue>>,\n      );\n    }\n    return properties;\n  });\n\n/**\n * @internal\n */\nexport const OptionalPropertiesOutput = z.record(JsonLiteral).optional();\n","import { v4 as uuidv4 } from \"uuid\";\nimport { hexlify, toUtf8Bytes } from \"ethers/lib/utils\";\n\nexport function resolveOrGenerateId(requestUId: string | undefined): string {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    uuidv4({}, buffer);\n    return hexlify(toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return hexlify(requestUId as string);\n  }\n}\n","import { IThirdwebContract, IThirdwebRoyalty } from \"@thirdweb-dev/contracts\";\nimport { CommonRoyaltySchema } from \"../../schema/contracts/common\";\nimport { ContractMetadata, IGenericSchemaType } from \"./contract-metadata\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { z } from \"zod\";\nimport { TransactionResult } from \"../types\";\nimport { BigNumberish } from \"ethers\";\n\n/**\n * Handles Contract royalties\n * @public\n */\nexport class ContractRoyalty<\n  TContract extends IThirdwebRoyalty & IThirdwebContract,\n  TSchema extends IGenericSchemaType,\n> {\n  private contractWrapper;\n  private metadata;\n\n  constructor(\n    contractWrapper: ContractWrapper<TContract>,\n    metadata: ContractMetadata<TContract, TSchema>,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of the contract\n   * @returns - The royalty recipient and BPS\n   */\n  public async getDefaultRoyaltyInfo() {\n    const [royaltyRecipient, royaltyBps] =\n      await this.contractWrapper.readContract.getDefaultRoyaltyInfo();\n    // parse it on the way out to make sure we default things if they are not set\n    return CommonRoyaltySchema.parse({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps,\n    });\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of a particular token\n   * @returns - The royalty recipient and BPS\n   */\n  public async getTokenRoyaltyInfo(tokenId: BigNumberish) {\n    const [royaltyRecipient, royaltyBps] =\n      await this.contractWrapper.readContract.getRoyaltyInfoForToken(tokenId);\n    return CommonRoyaltySchema.parse({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps,\n    });\n  }\n\n  /**\n   * Set the royalty recipient and fee for a contract\n   * @param royaltyData - the royalty recipient and fee\n   */\n  public async setDefaultRoyaltyInfo(\n    royaltyData: z.input<typeof CommonRoyaltySchema>,\n  ): Promise<TransactionResult<z.output<typeof CommonRoyaltySchema>>> {\n    // read the metadata from the contract\n    const oldMetadata = await this.metadata.get();\n\n    // update the metadata with the new royalty data\n    // if one of the keys is \"undefined\" it will be ignored (which is the desired behavior)\n    const mergedMetadata = this.metadata.parseInputMetadata({\n      ...oldMetadata,\n      ...royaltyData,\n    });\n\n    // why not use this.metadata.set()? - because that would end up sending it's own separate transaction to `setContractURI`\n    // but we want to send both the `setRoyaltyInfo` and `setContractURI` in one transaction!\n    const contractURI = await this.metadata._parseAndUploadMetadata(\n      mergedMetadata,\n    );\n\n    // encode both the functions we want to send\n    const encoded = [\n      this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"setDefaultRoyaltyInfo\",\n        [mergedMetadata.fee_recipient, mergedMetadata.seller_fee_basis_points],\n      ),\n      this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"setContractURI\",\n        [contractURI],\n      ),\n    ];\n\n    // actually send the transaction and return the receipt + a way to get the new royalty info\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n      data: () => this.getDefaultRoyaltyInfo(),\n    };\n  }\n\n  /**\n   * Set the royalty recipient and fee for a particular token\n   * @param tokenId - the token id\n   * @param royaltyData - the royalty recipient and fee\n   */\n  public async setTokenRoyaltyInfo(\n    tokenId: BigNumberish,\n    royaltyData: z.input<typeof CommonRoyaltySchema>,\n  ) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"setRoyaltyInfoForToken\",\n        [\n          tokenId,\n          royaltyData.fee_recipient,\n          royaltyData.seller_fee_basis_points,\n        ],\n      ),\n      data: () => this.getDefaultRoyaltyInfo(),\n    };\n  }\n}\n","import { IThirdwebPrimarySale } from \"@thirdweb-dev/contracts\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { TransactionResult } from \"../types\";\n\n/**\n * Handles primary sales recipients for a Contract\n * @public\n */\nexport class ContractPrimarySale<TContract extends IThirdwebPrimarySale> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient.\n   * @returns the wallet address.\n   */\n  public async getRecipient(): Promise<string> {\n    return await this.contractWrapper.readContract.primarySaleRecipient();\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   */\n  public async setRecipient(recipient: string): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"setPrimarySaleRecipient\",\n        [recipient],\n      ),\n    };\n  }\n}\n","import { IStorage } from \"../interfaces/IStorage\";\nimport { DropErc721ContractSchema } from \"../../schema/contracts/drop-erc721\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport { DropERC721, IERC20, IERC20__factory } from \"@thirdweb-dev/contracts\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { isNativeToken } from \"../../common/currency\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ClaimCondition, ClaimConditionInput } from \"../../types\";\nimport deepEqual from \"deep-equal\";\nimport { ClaimEligibility } from \"../../enums\";\nimport { TransactionResult } from \"../types\";\nimport {\n  getClaimerProofs,\n  processClaimConditionInputs,\n  transformResultToClaimCondition,\n  updateExsitingClaimConditions,\n} from \"../../common/claim-conditions\";\n\n/**\n * Manages claim conditions for NFT Drop contracts\n * @public\n */\nexport class DropErc721ClaimConditions {\n  private contractWrapper;\n  private metadata;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<DropERC721>,\n    metadata: ContractMetadata<DropERC721, typeof DropErc721ContractSchema>,\n    storage: IStorage,\n  ) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  public async getActive(): Promise<ClaimCondition> {\n    const id =\n      await this.contractWrapper.readContract.getActiveClaimConditionId();\n    const mc = await this.contractWrapper.readContract.getClaimConditionById(\n      id,\n    );\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(\n      mc,\n      this.contractWrapper.getProvider(),\n      metadata.merkle,\n      this.storage,\n    );\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  public async getAll(): Promise<ClaimCondition[]> {\n    const claimCondition =\n      await this.contractWrapper.readContract.claimCondition();\n    const startId = claimCondition.currentStartId.toNumber();\n    const count = claimCondition.count.toNumber();\n    const conditions = [];\n    for (let i = startId; i < startId + count; i++) {\n      conditions.push(\n        await this.contractWrapper.readContract.getClaimConditionById(i),\n      );\n    }\n    const metadata = await this.metadata.get();\n    return Promise.all(\n      conditions.map((c) =>\n        transformResultToClaimCondition(\n          c,\n          this.contractWrapper.getProvider(),\n          metadata.merkle,\n          this.storage,\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  public async canClaim(\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    if (addressToCheck === undefined) {\n      addressToCheck = await this.contractWrapper.getSignerAddress();\n    }\n    // TODO switch to use verifyClaim\n    return (\n      (await this.getClaimIneligibilityReasons(quantity, addressToCheck))\n        .length === 0\n    );\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  public async getClaimIneligibilityReasons(\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    if (addressToCheck === undefined) {\n      throw new Error(\"addressToCheck is required\");\n    }\n\n    try {\n      [activeConditionIndex, claimCondition] = await Promise.all([\n        this.contractWrapper.readContract.getActiveClaimConditionId(),\n        this.getActive(),\n      ]);\n    } catch (err: any) {\n      if ((err.message as string).includes(\"no public mint condition.\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      if ((err.message as string).includes(\"no active mint condition.\")) {\n        reasons.push(ClaimEligibility.NoActiveClaimPhase);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n\n    if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n      reasons.push(ClaimEligibility.NotEnoughSupply);\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(\n      claimCondition.merkleRootHash,\n    );\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRootHash.toString();\n      const metadata = await this.metadata.get();\n      const proofs = await getClaimerProofs(\n        addressToCheck,\n        merkleLower,\n        metadata.merkle,\n        this.storage,\n      );\n      try {\n        const [validMerkleProof] =\n          await this.contractWrapper.readContract.verifyClaimMerkleProof(\n            activeConditionIndex,\n            addressToCheck,\n            quantity,\n            proofs.proof,\n            proofs.maxClaimable,\n          );\n        if (!validMerkleProof) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      } catch (e) {\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n    }\n\n    // check for claim timestamp between claims\n    const [, timestampForNextClaim] =\n      await this.contractWrapper.readContract.getClaimTimestamp(\n        activeConditionIndex,\n        addressToCheck,\n      );\n\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (now.lt(timestampForNextClaim)) {\n      // if waitTimeSecondsLimitPerTransaction equals to timestampForNextClaim, that means that this is the first time this address claims this token\n      if (\n        BigNumber.from(claimCondition.waitInSeconds).eq(timestampForNextClaim)\n      ) {\n        const balance = await this.contractWrapper.readContract.balanceOf(\n          addressToCheck,\n        );\n        if (balance.gte(1)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        }\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // check for wallet balance\n    if (claimCondition.price.gt(0)) {\n      const totalPrice = claimCondition.price.mul(quantity);\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper<IERC20>(\n          provider,\n          claimCondition.currencyAddress,\n          IERC20__factory.abi,\n          {},\n        );\n        const balance = await erc20.readContract.balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions\n   *\n   * @remarks Sets the public mint conditions that need to be fullfiled by users to claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * await dropContract.claimConditions.set(claimConditions);\n   * ```\n   *\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  public async set(\n    claimConditionInputs: ClaimConditionInput[],\n    resetClaimEligibilityForAll = false,\n  ): Promise<TransactionResult> {\n    // process inputs\n    const { snapshotInfos, sortedConditions } =\n      await processClaimConditionInputs(\n        claimConditionInputs,\n        this.contractWrapper.getProvider(),\n        this.storage,\n      );\n\n    const merkleInfo: { [key: string]: string } = {};\n    snapshotInfos.forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const metadata = await this.metadata.get();\n    const encoded = [];\n\n    // upload new merkle roots to snapshot URIs if updated\n    if (!deepEqual(metadata.merkle, merkleInfo)) {\n      const mergedMetadata = this.metadata.parseInputMetadata({\n        ...metadata,\n        merkle: merkleInfo,\n      });\n      // using internal method to just upload, avoids one contract call\n      const contractURI = await this.metadata._parseAndUploadMetadata(\n        mergedMetadata,\n      );\n      encoded.push(\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"setContractURI\",\n          [contractURI],\n        ),\n      );\n    }\n\n    encoded.push(\n      this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"setClaimConditions\",\n        [sortedConditions, resetClaimEligibilityForAll],\n      ),\n    );\n\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Update a single claim condition with new data.\n   *\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  public async update(\n    index: number,\n    claimConditionInput: ClaimConditionInput,\n  ): Promise<TransactionResult> {\n    const existingConditions = await this.getAll();\n    const newConditionInputs = updateExsitingClaimConditions(\n      index,\n      claimConditionInput,\n      existingConditions,\n    );\n    return await this.set(newConditionInputs);\n  }\n}\n","import { AddressZero } from \"@ethersproject/constants\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport {\n  IERC20,\n  IERC20__factory,\n  TokenERC20__factory,\n} from \"@thirdweb-dev/contracts\";\nimport {\n  getNativeTokenByChainId,\n  NATIVE_TOKEN_ADDRESS,\n} from \"../constants/currency\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { Currency, CurrencyValue, Price } from \"../types/currency\";\nimport { PriceSchema } from \"../schema/shared\";\n\nexport function isNativeToken(tokenAddress: string): boolean {\n  return (\n    tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS ||\n    tokenAddress.toLowerCase() === AddressZero\n  );\n}\n\nexport async function normalizePriceValue(\n  provider: Provider,\n  inputPrice: Price,\n  currencyAddress: string,\n) {\n  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);\n  return ethers.utils.parseUnits(\n    PriceSchema.parse(inputPrice),\n    metadata.decimals,\n  );\n}\n\nexport async function fetchCurrencyMetadata(\n  provider: Provider,\n  asset: string,\n): Promise<Currency> {\n  if (isNativeToken(asset)) {\n    const network = await provider.getNetwork();\n    const nativeToken = getNativeTokenByChainId(network.chainId);\n    return {\n      name: nativeToken.name,\n      symbol: nativeToken.symbol,\n      decimals: nativeToken.decimals,\n    };\n  } else {\n    const erc20 = TokenERC20__factory.connect(asset, provider);\n    const [name, symbol, decimals] = await Promise.all([\n      erc20.name(),\n      erc20.symbol(),\n      erc20.decimals(),\n    ]);\n    return {\n      name,\n      symbol,\n      decimals,\n    };\n  }\n}\n\nexport async function fetchCurrencyValue(\n  providerOrSigner: Provider,\n  asset: string,\n  price: BigNumberish,\n): Promise<CurrencyValue> {\n  const metadata = await fetchCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: BigNumber.from(price),\n    displayValue: formatUnits(price, metadata.decimals),\n  };\n}\n\nexport async function setErc20Allowance(\n  contractToApprove: ContractWrapper<any>,\n  value: BigNumber,\n  currencyAddress: string,\n  overrides: any,\n): Promise<any> {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper<IERC20>(\n      signer || provider,\n      currencyAddress,\n      IERC20__factory.abi,\n      {},\n    );\n\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.readContract.address;\n    const allowance = await erc20.readContract.allowance(owner, spender);\n    if (allowance.lt(value)) {\n      await erc20.sendTransaction(\"approve\", [spender, value.sub(allowance)]);\n    }\n    return overrides;\n  }\n}\n\nexport async function approveErc20Allowance(\n  contractToApprove: ContractWrapper<any>,\n  currencyAddress: string,\n  price: BigNumber,\n  quantity: BigNumberish,\n) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper<IERC20>(\n    signer || provider,\n    currencyAddress,\n    IERC20__factory.abi,\n    {},\n  );\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.readContract.address;\n  const allowance = await erc20.readContract.allowance(owner, spender);\n  const totalPrice = BigNumber.from(price).mul(BigNumber.from(quantity));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [\n      spender,\n      allowance.add(totalPrice),\n    ]);\n  }\n}\n","import {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  Contract,\n  ContractInterface,\n  ContractTransaction,\n  ethers,\n} from \"ethers\";\nimport { RPCConnectionHandler } from \"./rpc-connection-handler\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport {\n  ForwardRequestMessage,\n  GaslessTransaction,\n  NetworkOrSignerOrProvider,\n  PermitRequestMessage,\n} from \"../types\";\nimport { EventType } from \"../../constants/events\";\nimport { Log, TransactionReceipt } from \"@ethersproject/providers\";\nimport invariant from \"tiny-invariant\";\nimport {\n  BiconomyForwarderAbi,\n  ForwardRequest,\n  getAndIncrementNonce,\n} from \"../../common/forwarder\";\nimport { Forwarder__factory } from \"@thirdweb-dev/contracts\";\nimport { getContractAddressByChainId } from \"../../constants/addresses\";\nimport { signEIP2612Permit } from \"../../common/permit\";\nimport { signTypedDataInternal } from \"../../common/sign\";\nimport { getPolygonGasPriorityFee } from \"../../common/gas-price\";\nimport { ChainId } from \"../../constants\";\nimport { convertToTWError } from \"../../common\";\n\n/**\n * @internal\n */\nexport class ContractWrapper<\n  TContract extends BaseContract,\n> extends RPCConnectionHandler {\n  private writeContract;\n  public readContract;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    contractAddress: string,\n    contractAbi: ContractInterface,\n    options: SDKOptions,\n  ) {\n    super(network, options);\n    // set up the contract\n    this.writeContract = new Contract(\n      contractAddress,\n      contractAbi,\n      this.getSignerOrProvider(),\n    ) as TContract;\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(\n      this.getProvider(),\n    ) as TContract;\n  }\n\n  public override updateSignerOrProvider(\n    network: NetworkOrSignerOrProvider,\n  ): void {\n    // update the underlying base class\n    super.updateSignerOrProvider(network);\n    // re-connect the contract with the new signer / provider\n    this.writeContract = this.writeContract.connect(\n      this.getSignerOrProvider(),\n    ) as TContract;\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(\n      this.getProvider(),\n    ) as TContract;\n  }\n\n  /**\n   * @internal\n   */\n  public async getChainID(): Promise<number> {\n    const provider = this.getProvider();\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n  /**\n   * @internal\n   */\n  public async getSignerAddress(): Promise<string> {\n    const signer = this.getSigner();\n    if (!signer) {\n      throw new Error(\n        \"This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.\",\n      );\n    }\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  public callStatic() {\n    return this.writeContract.callStatic;\n  }\n\n  /**\n   * @internal\n   */\n  public async getCallOverrides(): Promise<CallOverrides> {\n    const feeData = await this.getProvider().getFeeData();\n    const supports1559 = feeData.maxFeePerGas && feeData.maxPriorityFeePerGas;\n    if (supports1559) {\n      const chainId = await this.getChainID();\n      const block = await this.getProvider().getBlock(\"latest\");\n      const baseBlockFee =\n        block && block.baseFeePerGas\n          ? block.baseFeePerGas\n          : ethers.utils.parseUnits(\"1\", \"gwei\");\n      let defaultPriorityFee: BigNumber;\n      if (chainId === ChainId.Mumbai || chainId === ChainId.Polygon) {\n        // for polygon, get fee data from gas station\n        defaultPriorityFee = await getPolygonGasPriorityFee(chainId);\n      } else {\n        // otherwise get it from ethers\n        defaultPriorityFee = BigNumber.from(feeData.maxPriorityFeePerGas);\n      }\n      // then add additional fee based on user preferences\n      const maxPriorityFeePerGas =\n        this.getPreferredPriorityFee(defaultPriorityFee);\n      // See: https://eips.ethereum.org/EIPS/eip-1559 for formula\n      const baseMaxFeePerGas = baseBlockFee.mul(2);\n      const maxFeePerGas = baseMaxFeePerGas.add(maxPriorityFeePerGas);\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      };\n    } else {\n      return {\n        gasPrice: await this.getPreferredGasPrice(),\n      };\n    }\n  }\n\n  /**\n   * Calculates the priority fee per gas according to user preferences\n   * @param defaultPriorityFeePerGas - the base priority fee\n   */\n  private getPreferredPriorityFee(\n    defaultPriorityFeePerGas: BigNumber,\n  ): BigNumber {\n    const speed = this.options.gasSettings.speed;\n    const maxGasPrice = this.options.gasSettings.maxPriceInGwei;\n    let extraTip;\n    switch (speed) {\n      case \"standard\":\n        extraTip = BigNumber.from(0); // default is 2.5 gwei for ETH, 31 gwei for polygon\n        break;\n      case \"fast\":\n        extraTip = defaultPriorityFeePerGas.div(100).mul(5); // + 5% - 2.625 gwei / 32.5 gwei\n        break;\n      case \"fastest\":\n        extraTip = defaultPriorityFeePerGas.div(100).mul(10); // + 10% - 2.75 gwei / 34.1 gwei\n        break;\n    }\n    let txGasPrice = defaultPriorityFeePerGas.add(extraTip);\n    const max = ethers.utils.parseUnits(maxGasPrice.toString(), \"gwei\"); // no more than max gas setting\n    const min = ethers.utils.parseUnits(\"2.5\", \"gwei\"); // no less than 2.5 gwei\n    if (txGasPrice.gt(max)) {\n      txGasPrice = max;\n    }\n    if (txGasPrice.lt(min)) {\n      txGasPrice = min;\n    }\n    return txGasPrice;\n  }\n\n  /**\n   * Calculates the gas price for transactions according to user preferences\n   */\n  public async getPreferredGasPrice(): Promise<BigNumber> {\n    const gasPrice = await this.getProvider().getGasPrice();\n    const speed = this.options.gasSettings.speed;\n    const maxGasPrice = this.options.gasSettings.maxPriceInGwei;\n    let txGasPrice = gasPrice;\n    let extraTip;\n    switch (speed) {\n      case \"standard\":\n        extraTip = BigNumber.from(1); // min 1 wei\n        break;\n      case \"fast\":\n        extraTip = gasPrice.div(100).mul(5); // + 5%\n        break;\n      case \"fastest\":\n        extraTip = gasPrice.div(100).mul(10); // + 10%\n        break;\n    }\n    txGasPrice = txGasPrice.add(extraTip);\n    const max = ethers.utils.parseUnits(maxGasPrice.toString(), \"gwei\");\n    if (txGasPrice.gt(max)) {\n      txGasPrice = max;\n    }\n    return txGasPrice;\n  }\n\n  /**\n   * @internal\n   */\n  private emitTransactionEvent(\n    status: \"submitted\" | \"completed\",\n    transactionHash: string,\n  ) {\n    this.emit(EventType.Transaction, {\n      status,\n      transactionHash,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public async multiCall(encoded: string[]): Promise<TransactionReceipt> {\n    return this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * @internal\n   */\n  public async estimateGas(\n    fn: keyof TContract[\"functions\"],\n    args: any[],\n  ): Promise<BigNumber> {\n    return this.writeContract.estimateGas[fn as string](...args);\n  }\n\n  /**\n   * @internal\n   */\n  public async sendTransaction(\n    fn: keyof TContract[\"functions\"],\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    if (\n      this.options?.gasless &&\n      (\"openzeppelin\" in this.options.gasless ||\n        \"biconomy\" in this.options.gasless)\n    ) {\n      const provider = this.getProvider();\n      const txHash = await this.sendGaslessTransaction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", txHash);\n      const receipt = await provider.waitForTransaction(txHash);\n      this.emitTransactionEvent(\"completed\", txHash);\n      return receipt;\n    } else {\n      const tx = await this.sendTransactionByFunction(\n        fn as keyof TContract[\"functions\"],\n        args,\n        callOverrides,\n      );\n      this.emitTransactionEvent(\"submitted\", tx.hash);\n      const receipt = tx.wait();\n      this.emitTransactionEvent(\"completed\", tx.hash);\n      return receipt;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendTransactionByFunction(\n    fn: keyof TContract[\"functions\"],\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<ContractTransaction> {\n    const func: ethers.ContractFunction = (this.writeContract.functions as any)[\n      fn\n    ];\n    if (!func) {\n      throw new Error(\"invalid function\");\n    }\n    try {\n      return await func(...args, callOverrides);\n    } catch (e) {\n      const network = await this.getProvider().getNetwork();\n      const signerAddress = await this.getSignerAddress();\n      const contractAddress = await this.readContract.address;\n      throw await convertToTWError(e, network, signerAddress, contractAddress);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendGaslessTransaction(\n    fn: keyof TContract[\"functions\"],\n    args: any[] = [],\n    callOverrides: CallOverrides,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    invariant(\n      signer,\n      \"Cannot execute gasless transaction without valid signer\",\n    );\n\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.writeContract.address;\n    const value = callOverrides?.value || 0;\n\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\n        \"Cannot send native token value with gasless transaction\",\n      );\n    }\n\n    const data = this.writeContract.interface.encodeFunctionData(\n      fn as any,\n      args as any,\n    );\n\n    const gasEstimate = await (this.writeContract.estimateGas as any)[fn](\n      ...args,\n    );\n    let gas = gasEstimate.mul(2);\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // it'd estimate ~21740 on polygon.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gasEstimate.lt(25000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    const tx: GaslessTransaction = {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: fn.toString(),\n      functionArgs: args,\n      callOverrides,\n    };\n\n    return await this.defaultGaslessSendFunction(tx);\n  }\n\n  public async signTypedData(\n    signer: ethers.Signer,\n    domain: {\n      name: string;\n      version: string;\n      chainId: number;\n      verifyingContract: string;\n    },\n    types: any,\n    message: any,\n  ): Promise<BytesLike> {\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\",\n    });\n    const { signature: sig } = await signTypedDataInternal(\n      signer,\n      domain,\n      types,\n      message,\n    );\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature: sig,\n    });\n    return sig;\n  }\n\n  public parseLogs<T = any>(eventName: string, logs?: Log[]): T[] {\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n    const topic = this.writeContract.interface.getEventTopic(eventName);\n    const parsedLogs = logs.filter((x) => x.topics.indexOf(topic) >= 0);\n    return parsedLogs.map(\n      (l) => this.writeContract.interface.parseLog(l) as unknown as T,\n    );\n  }\n\n  private async defaultGaslessSendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    if (this.options.gasless && \"biconomy\" in this.options.gasless) {\n      return this.biconomySendFunction(transaction);\n    }\n    return this.defenderSendFunction(transaction);\n  }\n\n  private async biconomySendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    invariant(\n      this.options.gasless && \"biconomy\" in this.options.gasless,\n      \"calling biconomySendFunction without biconomy\",\n    );\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer && provider, \"signer and provider must be set\");\n\n    const forwarder = new ethers.Contract(\n      getContractAddressByChainId(\n        transaction.chainId,\n        \"biconomyForwarder\",\n      ) as string,\n      BiconomyForwarderAbi,\n      provider,\n    );\n    const batchId = 0;\n    const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n      batchId,\n    ]);\n\n    const request = {\n      from: transaction.from,\n      to: transaction.to,\n      token: ethers.constants.AddressZero,\n      txGas: transaction.gasLimit.toNumber(),\n      tokenGasPrice: \"0\",\n      batchId,\n      batchNonce: batchNonce.toNumber(),\n      deadline: Math.floor(\n        Date.now() / 1000 +\n          ((this.options?.gasless &&\n            \"biconomy\" in this.options.gasless &&\n            this.options.gasless.biconomy?.deadlineSeconds) ||\n            3600),\n      ),\n      data: transaction.data,\n    };\n\n    const hashToSign = ethers.utils.arrayify(\n      ethers.utils.solidityKeccak256(\n        [\n          \"address\",\n          \"address\",\n          \"address\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"bytes32\",\n        ],\n        [\n          request.from,\n          request.to,\n          request.token,\n          request.txGas,\n          request.tokenGasPrice,\n          request.batchId,\n          request.batchNonce,\n          request.deadline,\n          ethers.utils.keccak256(request.data),\n        ],\n      ),\n    );\n\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message: hashToSign,\n      signature: \"\",\n    });\n    const signature = await signer.signMessage(hashToSign);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message: hashToSign,\n      signature,\n    });\n    const response = await fetch(\n      \"https://api.biconomy.io/api/v2/meta-tx/native\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          from: transaction.from,\n          apiId: this.options.gasless.biconomy.apiId,\n          params: [request, signature],\n          to: transaction.to,\n          gasLimit: transaction.gasLimit.toHexString(),\n        }),\n        headers: {\n          \"x-api-key\": this.options.gasless.biconomy.apiKey,\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n      },\n    );\n\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.txHash) {\n        throw new Error(`relay transaction failed: ${resp.log}`);\n      }\n      return resp.txHash;\n    }\n    throw new Error(\n      `relay transaction failed with status: ${response.status} (${response.statusText})`,\n    );\n  }\n\n  private async defenderSendFunction(\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    invariant(\n      this.options.gasless && \"openzeppelin\" in this.options.gasless,\n      \"calling biconomySendFunction without biconomy\",\n    );\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer, \"provider is not set\");\n    invariant(provider, \"provider is not set\");\n    const forwarderAddress =\n      this.options.gasless.openzeppelin.relayerForwarderAddress;\n    const forwarder = Forwarder__factory.connect(forwarderAddress, provider);\n    const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n    ]);\n    const domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      chainId: transaction.chainId,\n      verifyingContract: forwarderAddress,\n    };\n\n    const types = {\n      ForwardRequest,\n    };\n\n    let message: ForwardRequestMessage | PermitRequestMessage = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data,\n    };\n\n    let signature: BytesLike;\n\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\",\n    });\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (\n      transaction.functionName === \"approve\" &&\n      transaction.functionArgs.length === 2\n    ) {\n      const spender = transaction.functionArgs[0];\n      const amount = transaction.functionArgs[1];\n      // TODO: support DAI permit by signDAIPermit\n      const { message: permit, signature: sig } = await signEIP2612Permit(\n        signer,\n        this.writeContract.address,\n        transaction.from,\n        spender,\n        amount,\n      );\n\n      const { r, s, v } = ethers.utils.splitSignature(sig);\n\n      message = {\n        to: this.readContract.address,\n        owner: permit.owner,\n        spender: permit.spender,\n        value: BigNumber.from(permit.value).toString(),\n        nonce: BigNumber.from(permit.nonce).toString(),\n        deadline: BigNumber.from(permit.deadline).toString(),\n        r,\n        s,\n        v,\n      };\n      signature = sig;\n    } else {\n      const { signature: sig } = await signTypedDataInternal(\n        signer,\n        domain,\n        types,\n        message,\n      );\n      signature = sig;\n    }\n\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if ((message as PermitRequestMessage)?.owner) {\n      messageType = \"permit\";\n    }\n\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      type: messageType,\n    });\n\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature,\n    });\n\n    const response = await fetch(this.options.gasless.openzeppelin.relayerUrl, {\n      method: \"POST\",\n      body,\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\n      `relay transaction failed with status: ${response.status} (${response.statusText})`,\n    );\n  }\n}\n","import {\n  JsonRpcBatchProvider,\n  Provider,\n  WebSocketProvider,\n} from \"@ethersproject/providers\";\nimport { ethers, Signer } from \"ethers\";\nimport { EventEmitter2 } from \"eventemitter2\";\nimport {\n  SDKOptions,\n  SDKOptionsOutput,\n  SDKOptionsSchema,\n} from \"../../schema/sdk-options\";\nimport { NetworkOrSignerOrProvider } from \"../types\";\n\n/**\n * @internal\n */\nexport class RPCConnectionHandler extends EventEmitter2 {\n  private provider: Provider;\n  private signer: Signer | undefined;\n  protected readonly options: SDKOptionsOutput;\n\n  constructor(network: NetworkOrSignerOrProvider, options: SDKOptions) {\n    super();\n    const [signer, provider] = this.getSignerAndProvider(network, options);\n    this.signer = signer;\n    this.provider = provider;\n\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid sdk options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n  }\n  /**\n   * The function to call whenever the network changes, such as when the users connects their wallet, disconnects their wallet, the connected chain changes, etc.\n   *\n   * @param network - a network, signer or provider that ethers js can interpret\n   */\n  public updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    const [signer, provider] = this.getSignerAndProvider(network, this.options);\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   *\n   * @returns whether or not a signer is set, `true` if there is no signer so the class is in \"read only\" mode\n   */\n  public isReadOnly(): boolean {\n    return !Signer.isSigner(this.signer);\n  }\n\n  /**\n   * Explicitly get the active signer.\n   * @returns the active signer, if there is one\n   */\n  public getSigner(): Signer | undefined {\n    return this.signer;\n  }\n\n  /**\n   * Explicitly get the active signer.\n   * @returns the active provider\n   */\n  public getProvider(): Provider {\n    return this.provider;\n  }\n\n  /**\n   *\n   * @returns the current signer if there is one, otherwise the active provider\n   */\n  public getSignerOrProvider(): Signer | Provider {\n    return this.getSigner() || this.getProvider();\n  }\n\n  /** ********************\n   * PRIVATE FUNCTIONS\n   *********************/\n\n  private getSignerAndProvider(\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions,\n  ): [Signer | undefined, Provider] {\n    let signer: Signer | undefined;\n    let provider: Provider | undefined;\n\n    if (Signer.isSigner(network)) {\n      signer = network;\n      if (network.provider) {\n        provider = network.provider;\n      }\n    }\n\n    if (options?.readonlySettings) {\n      provider = this.getReadOnlyProvider(\n        options.readonlySettings.rpcUrl,\n        options.readonlySettings.chainId,\n      );\n    }\n\n    if (!provider) {\n      if (Provider.isProvider(network)) {\n        provider = network;\n      } else if (!Signer.isSigner(network)) {\n        if (typeof network === \"string\") {\n          provider = this.getReadOnlyProvider(\n            network,\n            options?.readonlySettings?.chainId,\n          );\n        } else {\n          // no a signer, not a provider, not a string? try with default provider\n          provider = ethers.getDefaultProvider(network);\n        }\n      }\n    }\n\n    if (!provider) {\n      // we should really never hit this case!\n      provider = ethers.getDefaultProvider();\n      console.error(\n        \"No provider found, using default provider on default chain!\",\n      );\n    }\n\n    return [signer, provider];\n  }\n\n  private getReadOnlyProvider(network: string, chainId?: number) {\n    try {\n      const match = network.match(/^(ws|http)s?:/i);\n      // try the JSON batch provider if available\n      if (match) {\n        switch (match[1]) {\n          case \"http\":\n            return new JsonRpcBatchProvider(network, chainId);\n          case \"ws\":\n            return new WebSocketProvider(network, chainId);\n          default:\n            return ethers.getDefaultProvider(network);\n        }\n      } else {\n        return ethers.getDefaultProvider(network);\n      }\n    } catch (e) {\n      // fallback to the default provider\n      return ethers.getDefaultProvider(network);\n    }\n  }\n}\n","import { AddressZero } from \"@ethersproject/constants\";\nimport { ChainId, SUPPORTED_CHAIN_ID } from \"./chains\";\n\n/**\n * @internal\n */\nexport const OZ_DEFENDER_FORWARDER_ADDRESS =\n  \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\n\nconst TWRegistry_address = \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\";\nconst TWFactory_address = \"0x11c34F062Cb10a20B9F463E12Ff9dA62D76FDf65\";\n\n/**\n * @internal\n */\nexport const CONTRACT_ADDRESSES: Record<\n  SUPPORTED_CHAIN_ID,\n  {\n    biconomyForwarder: string;\n    twFactory: string;\n    twRegistry: string;\n  }\n> = {\n  [ChainId.Mainnet]: {\n    biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n  [ChainId.Rinkeby]: {\n    biconomyForwarder: \"0xFD4973FeB2031D4409fB57afEE5dF2051b171104\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n  [ChainId.Goerli]: {\n    biconomyForwarder: AddressZero,\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n  [ChainId.Polygon]: {\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n  [ChainId.Mumbai]: {\n    biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n  [ChainId.Avalanche]: {\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n  [ChainId.Fantom]: {\n    biconomyForwarder: AddressZero,\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n  [ChainId.FantomTestnet]: {\n    biconomyForwarder: AddressZero,\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n  },\n};\n\n/**\n * @internal\n */\nexport function getContractAddressByChainId(\n  chainId: SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  contractName: keyof typeof CONTRACT_ADDRESSES[SUPPORTED_CHAIN_ID],\n): string {\n  // for testing only\n  if (chainId === ChainId.Hardhat) {\n    if (contractName === \"twFactory\") {\n      return process.env.factoryAddress as string;\n    } else if (contractName === \"twRegistry\") {\n      return process.env.registryAddress as string;\n    } else {\n      return AddressZero;\n    }\n  }\n  // real output here\n  return CONTRACT_ADDRESSES[chainId][contractName];\n}\n","import { OZ_DEFENDER_FORWARDER_ADDRESS } from \"../constants/addresses\";\nimport { z } from \"zod\";\n\n/**\n * @public\n */\nexport const SDKOptionsSchema = z\n  .object({\n    readonlySettings: z\n      .object({\n        rpcUrl: z.string().url(),\n        chainId: z.number().optional(),\n      })\n      .optional(),\n    gasSettings: z\n      .object({\n        maxPriceInGwei: z\n          .number()\n          .min(1, \"gas price cannot be less than 1\")\n          .default(300),\n        speed: z.enum([\"standard\", \"fast\", \"fastest\"]).default(\"fastest\"),\n      })\n      .default({ maxPriceInGwei: 300, speed: \"fastest\" }),\n    gasless: z\n      .union([\n        z.object({\n          openzeppelin: z.object({\n            relayerUrl: z.string().url(),\n            relayerForwarderAddress: z\n              .string()\n              .default(OZ_DEFENDER_FORWARDER_ADDRESS),\n          }),\n        }),\n        z.object({\n          biconomy: z.object({\n            apiId: z.string(),\n            apiKey: z.string(),\n            deadlineSeconds: z\n              .number()\n              .min(1, \"deadlineSeconds cannot be les than 1\")\n              .default(3600),\n          }),\n        }),\n      ])\n      .optional(),\n  })\n  .default({\n    gasSettings: { maxPriceInGwei: 300, speed: \"fastest\" },\n  });\n\n/**\n * @public\n * All these configuration options are optional with sane defaults:\n * @example\n * ```javascript\n * {\n *   readonlySettings: {\n *     rpcUrl, // force read calls to go through your own RPC url\n *     chainId, // reduce RPC calls by sepcifying your chain ID\n *   },\n *   gasSettings: {\n *     maxPriceInGwei, // Maximum gas price for transactions (default 300 gwei)\n *     speed, // the tx speed setting: 'standard'|'fast|'fastest' (default: 'fastest')\n *   },\n *   gasless: {\n *     // By specifying a gasless configuration - all transactions will get forwarded to enable gasless transactions\n *     openzeppelin: {\n *       relayerUrl, // your OZ Defender relayer URL\n *       relayerForwarderAddress, // the OZ defender relayer address (defaults to the standard one)\n *     },\n *     biconomy: {\n *       apiId, // your Biconomy API Id\n *       apiKey, // your Biconomy API Key\n *       deadlineSeconds, // your Biconomy timeout preference\n *     },\n *   },\n * }\n * ```\n */\nexport type SDKOptions = z.input<typeof SDKOptionsSchema>;\n/**\n * @internal\n */\nexport type SDKOptionsOutput = z.output<typeof SDKOptionsSchema>;\n","/**\n * @public\n */\nexport enum EventType {\n  /**\n   * The event is triggered when the transaction is submitted and completed.\n   * The transaction is submitted when it is sent to the relayer or the blockchain.\n   * The transaction is completed when it is confirmed by the blockchain.\n   *\n   * status: \"submitted\" | \"completed\"\n   * transactionHash: string of the transaction hash\n   */\n  Transaction = \"transaction\",\n\n  /**\n   * The event is triggered when wallet sign message is requested and completed.\n   *\n   * status: \"submitted\" | \"completed\"\n   * message: message to sign\n   * signature: signature of the message (only available when status is \"completed\")\n   */\n  Signature = \"signature\",\n}\n","import { BaseContract, BigNumber } from \"ethers\";\n\n/**\n * @internal\n */\nexport const ForwardRequest = [\n  { name: \"from\", type: \"address\" },\n  { name: \"to\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"gas\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"data\", type: \"bytes\" },\n];\n\n/**\n * @internal\n */\nexport const BiconomyForwarderAbi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"uint256\", name: \"batchId\", type: \"uint256\" },\n    ],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _nonces: Record<string, BigNumber> = {};\nconst _noncesSyncTimestamp: Record<string, number> = {};\n\n/**\n * @internal\n */\nexport async function getAndIncrementNonce(\n  forwarder: BaseContract,\n  forwarderFunction: string,\n  forwarderArgs: any[],\n): Promise<BigNumber> {\n  // address is only used for internal caching :)\n  const address = forwarderArgs.join(\"|\");\n\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n\n  if (!(address in _nonces) || shouldSync) {\n    const nonceResult = await forwarder.functions[forwarderFunction](\n      ...forwarderArgs,\n    );\n    if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n      _nonces[address] = BigNumber.from(nonceResult[0]);\n    } else {\n      _nonces[address] = BigNumber.from(nonceResult);\n    }\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n","import { BigNumber, BigNumberish, Contract, ethers, Signer } from \"ethers\";\nimport {\n  EIP712Domain,\n  EIP712StandardDomain,\n  signTypedDataInternal,\n} from \"./sign\";\n\nconst NAME_ABI = [\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst DOMAIN_SEPARATOR_ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeperator\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst NONCES_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"user\", type: \"address\" }],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"nonce\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nasync function getSignerNonce(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, NONCES_ABI, signer);\n  try {\n    return await contract.nonces(await signer.getAddress());\n  } catch (err) {\n    return await contract.getNonce(await signer.getAddress());\n  }\n}\n\nasync function getDomainSeperator(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n  try {\n    return await contract.DOMAIN_SEPARATOR();\n  } catch (err) {\n    return await contract.getDomainSeperator();\n  }\n}\n\nasync function getTokenName(signer: Signer, contractAddress: string) {\n  return new Contract(contractAddress, NAME_ABI, signer).name();\n}\n\n/**\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\n */\nasync function getChainDomainSeperator(\n  signer: Signer,\n  domain: EIP712StandardDomain,\n) {\n  const contractDomainSeparator = await getDomainSeperator(\n    signer,\n    domain.verifyingContract,\n  );\n\n  const polygonDomain: EIP712Domain = {\n    name: domain.name,\n    version: domain.version,\n    verifyingContract: domain.verifyingContract,\n    salt: ethers.utils.hexZeroPad(\n      BigNumber.from(domain.chainId).toHexString(),\n      32,\n    ),\n  };\n\n  if (\n    ethers.utils._TypedDataEncoder.hashDomain(polygonDomain) ===\n    contractDomainSeparator\n  ) {\n    return polygonDomain;\n  }\n\n  return domain;\n}\n\n/**\n * @internal\n */\nexport async function signDAIPermit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  allowed = true,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    nonce,\n    deadline,\n    value: 0,\n    allowed,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"holder\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"expiry\", type: \"uint256\" },\n      { name: \"allowed\", type: \"bool\" },\n    ],\n  };\n\n  const { signature } = await signTypedDataInternal(signer, domain, types, {\n    holder: owner,\n    spender,\n    nonce,\n    expiry: deadline,\n    allowed,\n  });\n\n  return {\n    message,\n    signature,\n  };\n}\n\n/**\n * @internal\n */\nexport async function signEIP2612Permit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  value: BigNumberish,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    value,\n    nonce,\n    deadline,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"owner\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"value\", type: \"uint256\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ],\n  };\n\n  const { signature } = await signTypedDataInternal(\n    signer,\n    domain,\n    types,\n    message,\n  );\n  return {\n    message,\n    signature,\n  };\n}\n","import { TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"@ethersproject/providers\";\nimport { ethers, Signer } from \"ethers\";\n\n/**\n * @internal\n */\nexport interface EIP712StandardDomain {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n}\n\n/**\n * @internal\n */\nexport interface EIP712PolygonDomain {\n  name: string;\n  version: string;\n  verifyingContract: string;\n  salt: string;\n}\n\n/**\n * @internal\n */\nexport type EIP712Domain = EIP712StandardDomain | EIP712PolygonDomain;\n\n/**\n * eip712 sign typed data with different wallet handling including ledger live\n * @internal\n */\nexport async function signTypedDataInternal(\n  signer: Signer,\n  domain: EIP712Domain,\n  types: Record<string, Array<TypedDataField>>,\n  message: Record<string, any>,\n) {\n  const provider = signer?.provider as JsonRpcProvider;\n  if (!provider) {\n    throw new Error(\"missing provider\");\n  }\n\n  const payload = ethers.utils._TypedDataEncoder.getPayload(\n    domain,\n    types,\n    message,\n  );\n\n  let signature = \"\";\n\n  // an indirect way for accessing walletconnect's underlying provider\n  if ((provider as any)?.provider?.isWalletConnect) {\n    signature = await provider.send(\"eth_signTypedData\", [\n      (await signer.getAddress()).toLowerCase(),\n      JSON.stringify(payload),\n    ]);\n  } else {\n    try {\n      signature = await (signer as JsonRpcSigner)._signTypedData(\n        domain,\n        types,\n        message,\n      );\n    } catch (err: any) {\n      if (err?.message?.includes(\"Method eth_signTypedData_v4 not supported\")) {\n        signature = await provider.send(\"eth_signTypedData\", [\n          (await signer.getAddress()).toLowerCase(),\n          JSON.stringify(payload),\n        ]);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  // fix ledger live where signature result in v = 0, 1. ethers magically fix it in split/join.\n  return {\n    payload,\n    signature: ethers.utils.joinSignature(\n      ethers.utils.splitSignature(signature),\n    ),\n  };\n}\n","import { ChainId } from \"../constants/chains\";\nimport { BigNumber, ethers } from \"ethers\";\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId: ChainId.Polygon | ChainId.Mumbai): string {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return \"https://gasstation-mainnet.matic.network/v2\";\n    case ChainId.Mumbai:\n      return \"https://gasstation-mumbai.matic.today/v2\";\n  }\n}\n\nconst MIN_POLYGON_GAS_PRICE = ethers.utils.parseUnits(\"31\", \"gwei\");\nconst MIN_MUMBAI_GAS_PRICE = ethers.utils.parseUnits(\"1\", \"gwei\");\n\n/**\n * @internal\n */\nfunction getDefaultGasFee(\n  chainId: ChainId.Polygon | ChainId.Mumbai,\n): BigNumber {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return MIN_POLYGON_GAS_PRICE;\n    case ChainId.Mumbai:\n      return MIN_MUMBAI_GAS_PRICE;\n  }\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nexport async function getPolygonGasPriorityFee(\n  chainId: ChainId.Polygon | ChainId.Mumbai,\n): Promise<BigNumber> {\n  const gasStationUrl = getGasStationUrl(chainId);\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    // take the standard speed here, SDK options will define the extra tip\n    const priorityFee = data[\"standard\"][\"maxPriorityFee\"];\n    if (priorityFee > 0) {\n      const fixedFee = parseFloat(priorityFee).toFixed(9);\n      return ethers.utils.parseUnits(fixedFee, \"gwei\");\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return getDefaultGasFee(chainId);\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { ChainId } from \"./chains\";\n\n/**\n *\n * @internal\n */\nexport type ChainlinkInfo = {\n  vrfCoordinator: string;\n  linkTokenAddress: string;\n  keyHash: string;\n  fees: BigNumber;\n};\n\n/**\n *\n * @internal\n */\nexport const ChainlinkVrf: Record<number, ChainlinkInfo> = {\n  [ChainId.Polygon]: {\n    vrfCoordinator: \"0x3d2341ADb2D31f1c5530cDC622016af293177AE0\",\n    linkTokenAddress: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n    keyHash:\n      \"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Mumbai]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Rinkeby]: {\n    vrfCoordinator: \"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\",\n    linkTokenAddress: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n    keyHash:\n      \"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\",\n    fees: ethers.utils.parseEther(\"0.1\"),\n  },\n  [ChainId.Mainnet]: {\n    vrfCoordinator: \"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\",\n    linkTokenAddress: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    keyHash:\n      \"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\",\n    fees: ethers.utils.parseEther(\"2\"),\n  },\n  [ChainId.Hardhat]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n};\n","/**\n * @internal\n */\nimport { arrayify } from \"ethers/lib/utils\";\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC721 = arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC1155 = arrayify(\"0xd9b67a26\");\n","/**\n * @internal\n */\nexport const DEFAULT_IPFS_GATEWAY = \"https://gateway.ipfscdn.io/ipfs/\";\n/**\n * @internal\n */\nexport const TW_IPFS_SERVER_URL = \"https://upload.nftlabs.co\";\n/**\n * @internal\n */\nexport const PINATA_IPFS_URL = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n","import { IStorage } from \"../core/interfaces/IStorage\";\nimport MerkleTree from \"merkletreejs\";\nimport {\n  SnapshotInputSchema,\n  SnapshotSchema,\n} from \"../schema/contracts/common/snapshots\";\nimport {\n  SnapshotInfo,\n  SnapshotInput,\n} from \"../types/claim-conditions/claim-conditions\";\nimport { DuplicateLeafsError } from \"./error\";\nimport keccak256 from \"keccak256\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param storage - the storage to upload to\n * @returns the generated snapshot and URI\n * @internal\n */\nexport async function createSnapshot(\n  snapshotInput: SnapshotInput,\n  storage: IStorage,\n): Promise<SnapshotInfo> {\n  const input = SnapshotInputSchema.parse(snapshotInput);\n  const addresses = input.map((i) => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n\n  const hashedLeafs = input.map((i) => hashLeafNode(i.address, i.maxClaimable));\n  const tree = new MerkleTree(hashedLeafs, keccak256, {\n    sort: true,\n  });\n\n  const snapshot = SnapshotSchema.parse({\n    merkleRoot: tree.getHexRoot(),\n    claims: input.map((i, index) => {\n      const proof = tree.getHexProof(hashedLeafs[index]);\n      return {\n        address: i.address,\n        maxClaimable: i.maxClaimable,\n        proof,\n      };\n    }),\n  });\n\n  const uri = await storage.uploadMetadata(snapshot);\n  return {\n    merkleRoot: tree.getHexRoot(),\n    snapshotUri: uri,\n    snapshot,\n  };\n}\n\n/**\n * Hash an address and the corresponding claimable amount\n * @internal\n * @param address - the address\n * @param maxClaimableAmount - the amount\n */\nexport function hashLeafNode(\n  address: string,\n  maxClaimableAmount: BigNumberish,\n): string {\n  return ethers.utils.solidityKeccak256(\n    [\"address\", \"uint256\"],\n    [address, BigNumber.from(maxClaimableAmount)],\n  );\n}\n","export enum ListingType {\n  Direct = 0,\n  Auction = 1,\n}\n","export enum ProposalState {\n  Pending,\n  Active,\n  Canceled,\n  Defeated,\n  Succeeded,\n  Queued,\n  Expired,\n  Executed,\n}\n","export enum VoteType {\n  Against = 0,\n  For = 1,\n  Abstain = 2,\n}\n","export enum ClaimEligibility {\n  NotEnoughSupply = \"There is not enough supply to claim.\",\n\n  AddressNotAllowed = \"This address is not on the allowlist.\",\n\n  WaitBeforeNextClaimTransaction = \"Not enough time since last claim transaction. Please wait.\",\n\n  AlreadyClaimed = \"You have already claimed the token.\",\n\n  NotEnoughTokens = \"There are not enough tokens in the wallet to pay for the claim.\",\n\n  NoActiveClaimPhase = \"There is no active claim phase at the moment. Please check back in later.\",\n\n  NoClaimConditionSet = \"There is no claim condition set.\",\n\n  Unknown = \"No claim conditions found.\",\n}\n","import { BigNumber, BigNumberish, BytesLike } from \"ethers\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport {\n  SnapshotInputSchema,\n  SnapshotSchema,\n} from \"../schema/contracts/common/snapshots\";\nimport {\n  approveErc20Allowance,\n  fetchCurrencyValue,\n  isNativeToken,\n  normalizePriceValue,\n} from \"./currency\";\nimport {\n  ClaimCondition,\n  ClaimConditionInput,\n  ClaimVerification,\n  FilledConditionInput,\n  SnapshotInfo,\n} from \"../types\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core\";\nimport {\n  ClaimConditionInputArray,\n  ClaimConditionInputSchema,\n  ClaimConditionOutputSchema,\n} from \"../schema/contracts/common/claim-conditions\";\nimport { createSnapshot } from \"./snapshots\";\nimport { IDropClaimCondition } from \"@thirdweb-dev/contracts/dist/IDropERC1155\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../constants\";\nimport { Provider } from \"@ethersproject/providers\";\n\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns - `overrides` and `proofs` as an object.\n */\nexport async function prepareClaim(\n  quantity: BigNumberish,\n  activeClaimCondition: ClaimCondition,\n  merkleMetadata: Record<string, string>,\n  contractWrapper: ContractWrapper<any>,\n  storage: IStorage,\n  proofs: BytesLike[] = [hexZeroPad([0], 32)],\n): Promise<ClaimVerification> {\n  const addressToClaim = await contractWrapper.getSignerAddress();\n  let maxClaimable = 0;\n\n  try {\n    if (\n      !activeClaimCondition.merkleRootHash.toString().startsWith(AddressZero)\n    ) {\n      const claims = await fetchSnapshot(\n        activeClaimCondition.merkleRootHash.toString(),\n        merkleMetadata,\n        storage,\n      );\n      const item =\n        claims &&\n        claims.find(\n          (c) => c.address.toLowerCase() === addressToClaim.toLowerCase(),\n        );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n      maxClaimable = item.maxClaimable;\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if ((e as Error)?.message === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\n      \"failed to check claim condition merkle root hash, continuing anyways\",\n      e,\n    );\n  }\n\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  const price = activeClaimCondition.price;\n  const currencyAddress = activeClaimCondition.currencyAddress;\n  if (price.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = BigNumber.from(price).mul(quantity);\n    } else {\n      await approveErc20Allowance(\n        contractWrapper,\n        currencyAddress,\n        price,\n        quantity,\n      );\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxQuantityPerTransaction: BigNumber.from(maxClaimable),\n    price,\n    currencyAddress,\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot\n * @param merkleMetadata\n * @param storage\n */\nexport async function fetchSnapshot(\n  merkleRoot: string,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n) {\n  const snapshotUri = merkleMetadata[merkleRoot];\n  let snapshot = undefined;\n  if (snapshotUri) {\n    const raw = await storage.get(snapshotUri);\n    const snapshotData = SnapshotSchema.parse(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      snapshot = snapshotData.claims;\n    }\n  }\n  return snapshot;\n}\n\n/**\n * @internal\n * @param index\n * @param claimConditionInput\n * @param existingConditions\n */\nexport function updateExsitingClaimConditions(\n  index: number,\n  claimConditionInput: ClaimConditionInput,\n  existingConditions: ClaimCondition[],\n): ClaimConditionInput[] {\n  if (index >= existingConditions.length) {\n    throw Error(\n      `Index out of bounds - got index: ${index} with ${existingConditions.length} conditions`,\n    );\n  }\n  // merge input with existing claim condition\n  const newConditionParsed = ClaimConditionInputSchema.parse({\n    ...existingConditions[index],\n    price: existingConditions[index].price.toString(),\n    ...claimConditionInput,\n  });\n  // convert to output claim condition\n  const mergedConditionOutput =\n    ClaimConditionOutputSchema.parse(newConditionParsed);\n\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    return {\n      ...newConditionAtIndex,\n      price: newConditionAtIndex.price.toString(), // manually transform back to input price type\n    };\n  });\n}\n\n/**\n * Fetches the proof for the current signer for a particular wallet.\n *\n * @param merkleRoot - The merkle root of the condition to check.\n * @returns - The proof for the current signer for the specified condition.\n */\nexport async function getClaimerProofs(\n  addressToClaim: string,\n  merkleRoot: string,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n): Promise<{ maxClaimable: number; proof: string[] }> {\n  const claims = await fetchSnapshot(merkleRoot, merkleMetadata, storage);\n  if (claims === undefined) {\n    return {\n      proof: [],\n      maxClaimable: 0,\n    };\n  }\n  const item = claims.find(\n    (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n  );\n\n  if (item === undefined) {\n    return {\n      proof: [],\n      maxClaimable: 0,\n    };\n  }\n  return {\n    proof: item.proof,\n    maxClaimable: item.maxClaimable,\n  };\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs\n * @internal\n */\nexport async function processClaimConditionInputs(\n  claimConditionInputs: ClaimConditionInput[],\n  provider: Provider,\n  storage: IStorage,\n) {\n  const snapshotInfos: SnapshotInfo[] = [];\n  const inputsWithSnapshots = await Promise.all(\n    claimConditionInputs.map(async (conditionInput) => {\n      // check snapshots and upload if provided\n      if (conditionInput.snapshot) {\n        const snapshotInfo = await createSnapshot(\n          SnapshotInputSchema.parse(conditionInput.snapshot),\n          storage,\n        );\n        snapshotInfos.push(snapshotInfo);\n        conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n      }\n      // fill condition with defaults values if not provided\n      return conditionInput;\n    }),\n  );\n\n  const parsedInputs = ClaimConditionInputArray.parse(inputsWithSnapshots);\n\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions: IDropClaimCondition.ClaimConditionStruct[] = (\n    await Promise.all(\n      parsedInputs.map((c) => convertToContractModel(c, provider)),\n    )\n  ).sort((a, b) => {\n    const left = BigNumber.from(a.startTimestamp);\n    const right = BigNumber.from(b.startTimestamp);\n    if (left.eq(right)) {\n      return 0;\n    } else if (left.gt(right)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  return { snapshotInfos, sortedConditions };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c\n * @param provider\n * @internal\n */\nasync function convertToContractModel(\n  c: FilledConditionInput,\n  provider: Provider,\n): Promise<IDropClaimCondition.ClaimConditionStruct> {\n  const currency =\n    c.currencyAddress === AddressZero\n      ? NATIVE_TOKEN_ADDRESS\n      : c.currencyAddress;\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply: c.maxQuantity,\n    supplyClaimed: 0,\n    quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash,\n  };\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm\n * @param provider\n * @param merkleMetadata\n * @param storage\n * @internal\n */\nexport async function transformResultToClaimCondition(\n  pm: IDropClaimCondition.ClaimConditionStructOutput,\n  provider: Provider,\n  merkleMetadata: Record<string, string>,\n  storage: IStorage,\n): Promise<ClaimCondition> {\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const claims = await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage);\n  return ClaimConditionOutputSchema.parse({\n    startTime: pm.startTimestamp,\n    maxQuantity: pm.maxClaimableSupply.toString(),\n    currentMintSupply: pm.supplyClaimed.toString(),\n    availableSupply: BigNumber.from(pm.maxClaimableSupply)\n      .sub(pm.supplyClaimed)\n      .toString(),\n    quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n    waitInSeconds: pm.waitTimeInSecondsBetweenClaims.toString(),\n    price: BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: claims,\n  });\n}\n","import { IStorage } from \"../interfaces/IStorage\";\nimport { DropErc721ContractSchema } from \"../../schema/contracts/drop-erc721\";\nimport { ContractMetadata } from \"./contract-metadata\";\nimport { DropERC1155, IERC20, IERC20__factory } from \"@thirdweb-dev/contracts\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { isNativeToken } from \"../../common/currency\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ClaimCondition, ClaimConditionInput } from \"../../types\";\nimport deepEqual from \"deep-equal\";\nimport { ClaimEligibility } from \"../../enums\";\nimport { TransactionResult } from \"../index\";\nimport {\n  getClaimerProofs,\n  processClaimConditionInputs,\n  transformResultToClaimCondition,\n  updateExsitingClaimConditions,\n} from \"../../common/claim-conditions\";\n\n/**\n * Manages claim conditions for Edition Drop contracts\n * @public\n */\nexport class DropErc1155ClaimConditions {\n  private contractWrapper;\n  private metadata;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<DropERC1155>,\n    metadata: ContractMetadata<DropERC1155, typeof DropErc721ContractSchema>,\n    storage: IStorage,\n  ) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  public async getActive(tokenId: BigNumberish): Promise<ClaimCondition> {\n    const id =\n      await this.contractWrapper.readContract.getActiveClaimConditionId(\n        tokenId,\n      );\n    const mc = await this.contractWrapper.readContract.getClaimConditionById(\n      tokenId,\n      id,\n    );\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(\n      mc,\n      this.contractWrapper.getProvider(),\n      metadata.merkle,\n      this.storage,\n    );\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  public async getAll(tokenId: BigNumberish): Promise<ClaimCondition[]> {\n    const claimCondition =\n      await this.contractWrapper.readContract.claimCondition(tokenId);\n    const startId = claimCondition.currentStartId.toNumber();\n    const count = claimCondition.count.toNumber();\n    const conditions = [];\n    for (let i = startId; i < startId + count; i++) {\n      conditions.push(\n        await this.contractWrapper.readContract.getClaimConditionById(\n          tokenId,\n          i,\n        ),\n      );\n    }\n    const metadata = await this.metadata.get();\n    return Promise.all(\n      conditions.map((c) =>\n        transformResultToClaimCondition(\n          c,\n          this.contractWrapper.getProvider(),\n          metadata.merkle,\n          this.storage,\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if a particular NFT can currently be claimed by a given user.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  public async canClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    if (addressToCheck === undefined) {\n      addressToCheck = await this.contractWrapper.getSignerAddress();\n    }\n    // TODO switch to use verifyClaim\n    return (\n      (\n        await this.getClaimIneligibilityReasons(\n          tokenId,\n          quantity,\n          addressToCheck,\n        )\n      ).length === 0\n    );\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human-readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - the token id to check\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  public async getClaimIneligibilityReasons(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    if (addressToCheck === undefined) {\n      throw new Error(\"addressToCheck is required\");\n    }\n\n    try {\n      [activeConditionIndex, claimCondition] = await Promise.all([\n        this.contractWrapper.readContract.getActiveClaimConditionId(tokenId),\n        this.getActive(tokenId),\n      ]);\n    } catch (err: any) {\n      if ((err.message as string).includes(\"no active mint condition.\")) {\n        reasons.push(ClaimEligibility.NoActiveClaimPhase);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n\n    if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n      reasons.push(ClaimEligibility.NotEnoughSupply);\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(\n      claimCondition.merkleRootHash,\n    );\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRootHash.toString();\n      const metadata = await this.metadata.get();\n      const proofs = await getClaimerProofs(\n        addressToCheck,\n        merkleLower,\n        metadata.merkle,\n        this.storage,\n      );\n      try {\n        const [validMerkleProof] =\n          await this.contractWrapper.readContract.verifyClaimMerkleProof(\n            activeConditionIndex,\n            addressToCheck,\n            tokenId,\n            quantity,\n            proofs.proof,\n            proofs.maxClaimable,\n          );\n        if (!validMerkleProof) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      } catch (e) {\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n    }\n\n    // check for claim timestamp between claims\n    const [, timestampForNextClaim] =\n      await this.contractWrapper.readContract.getClaimTimestamp(\n        tokenId,\n        activeConditionIndex,\n        addressToCheck,\n      );\n\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (now.lt(timestampForNextClaim)) {\n      // if waitTimeSecondsLimitPerTransaction equals to timestampForNextClaim, that means that this is the first time this address claims this token\n      if (\n        BigNumber.from(claimCondition.waitInSeconds).eq(timestampForNextClaim)\n      ) {\n        const balance = await this.contractWrapper.readContract.balanceOf(\n          addressToCheck,\n          tokenId,\n        );\n        if (balance.gte(1)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        }\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // check for wallet balance\n    if (claimCondition.price.gt(0)) {\n      const totalPrice = claimCondition.price.mul(quantity);\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper<IERC20>(\n          provider,\n          claimCondition.currencyAddress,\n          IERC20__factory.abi,\n          {},\n        );\n        const balance = await erc20.readContract.balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions on a NFT\n   *\n   * @remarks Sets the public mint conditions that need to be fulfilled by users to claim a particular NFT in this bundle.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await dropContract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   *\n   * @param tokenId - The id of the NFT to set the claim conditions on\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  public async set(\n    tokenId: BigNumberish,\n    claimConditionInputs: ClaimConditionInput[],\n    resetClaimEligibilityForAll = false,\n  ): Promise<TransactionResult> {\n    // process inputs\n    const { snapshotInfos, sortedConditions } =\n      await processClaimConditionInputs(\n        claimConditionInputs,\n        this.contractWrapper.getProvider(),\n        this.storage,\n      );\n\n    const merkleInfo: { [key: string]: string } = {};\n    snapshotInfos.forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const metadata = await this.metadata.get();\n    const encoded = [];\n\n    // keep the old merkle roots from other tokenIds\n    for (const key of Object.keys(metadata.merkle)) {\n      merkleInfo[key] = metadata.merkle[key];\n    }\n\n    // upload new merkle roots to snapshot URIs if updated\n    if (!deepEqual(metadata.merkle, merkleInfo)) {\n      const mergedMetadata = this.metadata.parseInputMetadata({\n        ...metadata,\n        merkle: merkleInfo,\n      });\n      // using internal method to just upload, avoids one contract call\n      const contractURI = await this.metadata._parseAndUploadMetadata(\n        mergedMetadata,\n      );\n      encoded.push(\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"setContractURI\",\n          [contractURI],\n        ),\n      );\n    }\n\n    encoded.push(\n      this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"setClaimConditions\",\n        [tokenId, sortedConditions, resetClaimEligibilityForAll],\n      ),\n    );\n\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded),\n    };\n  }\n\n  /**\n   * Update a single claim condition with new data.\n   * @param tokenId - the token id to update\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  public async update(\n    tokenId: BigNumberish,\n    index: number,\n    claimConditionInput: ClaimConditionInput,\n  ): Promise<TransactionResult> {\n    const existingConditions = await this.getAll(tokenId);\n    const newConditionInputs = updateExsitingClaimConditions(\n      index,\n      claimConditionInput,\n      existingConditions,\n    );\n    return await this.set(tokenId, newConditionInputs);\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { TokenERC20 } from \"@thirdweb-dev/contracts\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { IStorage } from \"../interfaces\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport { Currency, CurrencyValue, Amount } from \"../../types/currency\";\nimport {\n  fetchCurrencyMetadata,\n  fetchCurrencyValue,\n} from \"../../common/currency\";\nimport { TokenMintInput } from \"../../schema/tokens/token\";\nimport { getRoleHash } from \"../../common/role\";\nimport { AddressZero } from \"@ethersproject/constants\";\n\n/**\n * Standard ERC20 functions\n * @public\n */\nexport class Erc20<T extends TokenERC20> implements UpdateableNetwork {\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * console.log(token);\n   * ```\n   * @returns The token metadata\n   */\n  public async get(): Promise<Currency> {\n    return await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n    );\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * console.log(balance);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  public async balance(): Promise<CurrencyValue> {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await contract.balanceOf(address);\n   * console.log(balance);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  public async balanceOf(address: string): Promise<CurrencyValue> {\n    return this.getValue(\n      await this.contractWrapper.readContract.balanceOf(address),\n    );\n  }\n\n  /**\n   * The total supply for this Token\n   */\n  public async totalSupply(): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.totalSupply(),\n    );\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   *\n   * const allowance = await contract.allowanceOf(otherAddress);\n   * console.log(allowance);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  public async allowance(spender: string): Promise<CurrencyValue> {\n    return await this.allowanceOf(\n      await this.contractWrapper.getSignerAddress(),\n      spender,\n    );\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const address = \"{{wallet_address}}\";\n   *\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   *\n   * const allowance = await contract.allowanceOf(address, spenderAddress);\n   * console.log(allowance);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  public async allowanceOf(\n    owner: string,\n    spender: string,\n  ): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.allowance(owner, spender),\n    );\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   *\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   *\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    const amountWithDecimals = ethers.utils.parseUnits(\n      BigNumber.from(amount).toString(),\n      await this.contractWrapper.readContract.decimals(),\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"transfer\", [\n        to,\n        amountWithDecimals,\n      ]),\n    };\n  }\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   *\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   *\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   *\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  public async transferFrom(\n    from: string,\n    to: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    const amountWithDecimals = ethers.utils.parseUnits(\n      BigNumber.from(amount).toString(),\n      await this.contractWrapper.readContract.decimals(),\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"transferFrom\", [\n        from,\n        to,\n        amountWithDecimals,\n      ]),\n    };\n  }\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   *\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   *\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  public async setAllowance(\n    spender: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    const amountWithDecimals = ethers.utils.parseUnits(\n      BigNumber.from(amount).toString(),\n      await this.contractWrapper.readContract.decimals(),\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [\n        spender,\n        amountWithDecimals,\n      ]),\n    };\n  }\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  public async transferBatch(args: TokenMintInput[]) {\n    const encoded = args.map((arg) =>\n      this.contractWrapper.readContract.interface.encodeFunctionData(\n        \"transfer\",\n        [arg.toAddress, arg.amount],\n      ),\n    );\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burn(amount);\n   * ```\n   */\n  public async burn(amount: Amount): Promise<TransactionResult> {\n    const amountWithDecimals = ethers.utils.parseUnits(\n      BigNumber.from(amount).toString(),\n      await this.contractWrapper.readContract.decimals(),\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [\n        amountWithDecimals,\n      ]),\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  public async burnFrom(\n    holder: string,\n    amount: Amount,\n  ): Promise<TransactionResult> {\n    const amountWithDecimals = ethers.utils.parseUnits(\n      BigNumber.from(amount).toString(),\n      await this.contractWrapper.readContract.decimals(),\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burnFrom\", [\n        holder,\n        amountWithDecimals,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  protected async getValue(value: BigNumberish): Promise<CurrencyValue> {\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n      BigNumber.from(value),\n    );\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { DropERC721, TokenERC721 } from \"@thirdweb-dev/contracts\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { NFTMetadata, NFTMetadataOwner } from \"../../schema/tokens/common\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport {\n  DEFAULT_QUERY_ALL_COUNT,\n  QueryAllParams,\n} from \"../../types/QueryParams\";\nimport { IStorage } from \"../interfaces\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport { fetchTokenMetadata } from \"../../common/nft\";\nimport { getRoleHash } from \"../../common/role\";\nimport { NotFoundError } from \"../../common\";\n\n/**\n * Standard ERC721 functions\n * @public\n */\nexport class Erc721<T extends DropERC721 | TokenERC721>\n  implements UpdateableNetwork\n{\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * console.log(nft);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  public async get(tokenId: BigNumberish): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n    return { owner, metadata };\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.getTotalCount()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      [...Array(maxId - start).keys()].map((i) =>\n        this.get((start + i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.nextTokenIdToMint();\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(_address?: string): Promise<NFTMetadataOwner[]> {\n    const address = _address\n      ? _address\n      : await this.contractWrapper.getSignerAddress();\n    const balance = await this.contractWrapper.readContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) =>\n        this.contractWrapper.readContract.tokenOfOwnerByIndex(address, i),\n      ),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  public async ownerOf(tokenId: BigNumberish): Promise<string> {\n    return await this.contractWrapper.readContract.ownerOf(tokenId);\n  }\n\n  /**\n   * Get the total supply for this Contract.\n   *\n   * @returns the total supply\n   */\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.nextTokenIdToMint();\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await contract.balanceOf(address);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.contractWrapper.readContract.isApprovedForAll(\n      address,\n      operator,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * await contract.transfer(toAddress, tokenId);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const from = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"safeTransferFrom(address,address,uint256)\",\n        [from, to, tokenId],\n      ),\n    };\n  }\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   */\n  public async burn(tokenId: BigNumberish): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [tokenId]),\n    };\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  public async setApprovalForAll(\n    operator: string,\n    approved: boolean,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [\n        operator,\n        approved,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  protected async getTokenMetadata(\n    tokenId: BigNumberish,\n  ): Promise<NFTMetadata> {\n    const tokenUri = await this.contractWrapper.readContract.tokenURI(tokenId);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n}\n","import { BigNumberish } from \"ethers\";\n\n/**\n * @internal\n */\nexport const DEFAULT_QUERY_ALL_COUNT = 100;\n\n/**\n * @public\n */\nexport interface QueryAllParams {\n  start: BigNumberish;\n  count: BigNumberish;\n}\n","import { BigNumber, BigNumberish } from \"ethers\";\nimport { CommonNFTOutput, NFTMetadata } from \"../schema/tokens/common\";\nimport { IStorage } from \"../core\";\nimport { Provider } from \"@ethersproject/providers\";\nimport {\n  ERC165__factory,\n  TokenERC1155__factory,\n  TokenERC721__factory,\n} from \"@thirdweb-dev/contracts\";\nimport { NotFoundError } from \"./error\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../constants/contract\";\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nexport async function fetchTokenMetadata(\n  tokenId: BigNumberish,\n  tokenUri: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const jsonMetadata = await storage.get(tokenUri);\n  return CommonNFTOutput.parse({\n    id: BigNumber.from(tokenId),\n    uri: tokenUri,\n    ...jsonMetadata,\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\nexport async function fetchTokenMetadataForContract(\n  contractAddress: string,\n  provider: Provider,\n  tokenId: BigNumberish,\n  storage: IStorage,\n) {\n  let uri: string | undefined;\n  const erc165 = ERC165__factory.connect(contractAddress, provider);\n  const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n  const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n  if (isERC721) {\n    const erc721 = TokenERC721__factory.connect(contractAddress, provider);\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const erc1155 = TokenERC1155__factory.connect(contractAddress, provider);\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { DropERC1155, TokenERC1155 } from \"@thirdweb-dev/contracts\";\nimport { BigNumber, BigNumberish, BytesLike } from \"ethers\";\nimport { NFTMetadata } from \"../../schema/tokens/common\";\nimport { IStorage } from \"../interfaces\";\nimport { NetworkOrSignerOrProvider, TransactionResult } from \"../types\";\nimport { UpdateableNetwork } from \"../interfaces/contract\";\nimport { SDKOptions, SDKOptionsSchema } from \"../../schema/sdk-options\";\nimport {\n  EditionMetadata,\n  EditionMetadataOutputSchema,\n  EditionMetadataOwner,\n} from \"../../schema/tokens/edition\";\nimport { fetchTokenMetadata } from \"../../common/nft\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { getRoleHash } from \"../../common/role\";\nimport { NotFoundError } from \"../../common\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../../types\";\n\n/**\n * Standard ERC1155 functions\n * @public\n */\nexport class Erc1155<T extends DropERC1155 | TokenERC1155>\n  implements UpdateableNetwork\n{\n  protected contractWrapper: ContractWrapper<T>;\n  protected storage: IStorage;\n  protected options: SDKOptions;\n\n  constructor(\n    contractWrapper: ContractWrapper<T>,\n    storage: IStorage,\n    options: SDKOptions = {},\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\n        \"invalid contract options object passed, falling back to default options\",\n        optionParseError,\n      );\n      this.options = SDKOptionsSchema.parse({});\n    }\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network: NetworkOrSignerOrProvider): void {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * console.log(nft);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  public async get(tokenId: BigNumberish): Promise<EditionMetadata> {\n    const [supply, metadata] = await Promise.all([\n      this.contractWrapper.readContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(0)),\n      this.getTokenMetadata(tokenId),\n    ]);\n    return EditionMetadataOutputSchema.parse({\n      supply,\n      metadata,\n    });\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<EditionMetadata[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.getTotalCount()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      [...Array(maxId - start).keys()].map((i) =>\n        this.get((start + i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.nextTokenIdToMint();\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getOwned(_address?: string): Promise<EditionMetadataOwner[]> {\n    const address = _address\n      ? _address\n      : await this.contractWrapper.getSignerAddress();\n    const maxId = await this.contractWrapper.readContract.nextTokenIdToMint();\n    const balances = await this.contractWrapper.readContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => {\n        const editionMetadata = await this.get(b.tokenId.toString());\n        return {\n          ...editionMetadata,\n          owner: address,\n          quantityOwned: b.balance,\n        };\n      }),\n    );\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  public async totalSupply(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await contract.balanceOf(address);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(\n    address: string,\n    tokenId: BigNumberish,\n  ): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  public async balance(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.balanceOf(\n      await this.contractWrapper.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  public async isTransferRestricted(): Promise<boolean> {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"transfer\"),\n      AddressZero,\n    );\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.contractWrapper.readContract.isApprovedForAll(\n      address,\n      operator,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   * // How many copies of the NFTs to transfer\n   * const amount = 3;\n   *\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    const from = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom\", [\n        from,\n        to,\n        tokenId,\n        amount,\n        data,\n      ]),\n    };\n  }\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   */\n  public async burn(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionResult> {\n    const account = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [\n        account,\n        tokenId,\n        amount,\n      ]),\n    };\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  public async setApprovalForAll(\n    operator: string,\n    approved: boolean,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [\n        operator,\n        approved,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   * @param tokenId - the token Id to fetch\n   */\n  protected async getTokenMetadata(\n    tokenId: BigNumberish,\n  ): Promise<NFTMetadata> {\n    const tokenUri = await this.contractWrapper.readContract.uri(tokenId);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n}\n","import { z } from \"zod\";\nimport { BigNumberishSchema, BigNumberSchema } from \"../shared\";\nimport { CommonNFTInput, CommonNFTOutput } from \"./common\";\n\n/**\n * @internal\n */\nexport const EditionMetadataOutputSchema = z.object({\n  supply: BigNumberSchema,\n  metadata: CommonNFTOutput,\n});\n\n/**\n * @internal\n */\nexport const EditionMetadataWithOwnerOutputSchema =\n  EditionMetadataOutputSchema.extend({\n    owner: z.string(),\n    quantityOwned: BigNumberSchema,\n  });\n\n/**\n * @internal\n */\nexport const EditionMetadataInputSchema = z.object({\n  supply: BigNumberishSchema,\n  metadata: CommonNFTInput,\n});\n\n/**\n * @public\n */\nexport type EditionMetadata = z.output<typeof EditionMetadataOutputSchema>;\n/**\n * @public\n */\nexport type EditionMetadataOwner = z.output<\n  typeof EditionMetadataWithOwnerOutputSchema\n>;\n/**\n * @public\n */\nexport type EditionMetadataInput = z.input<typeof EditionMetadataInputSchema>;\n","import { NFTMetadata, NFTMetadataInput } from \"../schema/tokens/common\";\nimport { BigNumber, BigNumberish } from \"ethers\";\n\nexport interface PackMetadata {\n  id: string;\n  creator: string;\n  currentSupply: BigNumber;\n  openStart: Date | null;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackNFTMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackMetadataWithBalance extends PackMetadata {\n  ownedByAddress: BigNumber;\n}\n\nexport enum UnderlyingType {\n  None = 0,\n  ERC20 = 1,\n  ERC721 = 2,\n}\n\n// TODO zodify\nexport interface IPackCreateArgs {\n  assetContract: string;\n  metadata: NFTMetadataInput;\n  assets: {\n    tokenId: BigNumberish;\n    amount: BigNumberish;\n  }[];\n  secondsUntilOpenStart?: BigNumberish;\n  rewardsPerOpen?: BigNumberish;\n}\n\n/**\n * @beta\n */\n// TODO zodify\nexport interface IPackBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n","import {\n  FilledSignaturePayload,\n  MintRequest721,\n  PayloadToSign,\n  PayloadWithUri,\n  SignaturePayloadInput,\n  SignaturePayloadOutput,\n  SignedPayload,\n} from \"../../schema/contracts/common/signature\";\nimport { TransactionResultWithId } from \"../types\";\nimport { normalizePriceValue, setErc20Allowance } from \"../../common/currency\";\nimport { BigNumber } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ITokenERC721, TokenERC721 } from \"@thirdweb-dev/contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { ContractRoles } from \"./contract-roles\";\nimport { NFTCollection } from \"../../contracts\";\nimport { TokensMintedWithSignatureEvent } from \"@thirdweb-dev/contracts/dist/TokenERC721\";\n\n/**\n * Enables generating dynamic ERC721 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nexport class Erc721SignatureMinting {\n  private contractWrapper: ContractWrapper<TokenERC721>;\n  private storage: IStorage;\n  private roles: ContractRoles<\n    TokenERC721,\n    typeof NFTCollection.contractRoles[number]\n  >;\n\n  constructor(\n    contractWrapper: ContractWrapper<TokenERC721>,\n    roles: ContractRoles<\n      TokenERC721,\n      typeof NFTCollection.contractRoles[number]\n    >,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc721SignatureMinting.generate}\n   */\n  public async mint(\n    signedPayload: SignedPayload,\n  ): Promise<TransactionResultWithId> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(\n      this.contractWrapper,\n      BigNumber.from(message.price),\n      mintRequest.currencyAddress,\n      overrides,\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n    const t = this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n      \"TokensMintedWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    const id = t[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n    };\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   */\n  public async verify(signedPayload: SignedPayload): Promise<boolean> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification: [boolean, string] =\n      await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   price: 0.5, // the price to pay for minting\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: now, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generate(mintRequest: PayloadToSign): Promise<SignedPayload> {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721SignatureMinting.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatch(\n    payloadsToSign: PayloadToSign[],\n  ): Promise<SignedPayload[]> {\n    await this.roles.verify(\n      [\"minter\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const parsedRequests: FilledSignaturePayload[] = payloadsToSign.map((m) =>\n      SignaturePayloadInput.parse(m),\n    );\n\n    const { metadataUris: uris } = await this.storage.uploadMetadataBatch(\n      parsedRequests.map((r) => r.metadata),\n    );\n\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    return await Promise.all(\n      parsedRequests.map(async (m, i) => {\n        const uri = uris[i];\n        const finalPayload = SignaturePayloadOutput.parse({\n          ...m,\n          uri,\n        });\n        const signature = await this.contractWrapper.signTypedData(\n          signer,\n          {\n            name: \"TokenERC721\",\n            version: \"1\",\n            chainId,\n            verifyingContract: this.contractWrapper.readContract.address,\n          },\n          { MintRequest: MintRequest721 },\n          await this.mapPayloadToContractStruct(finalPayload),\n        );\n        return {\n          payload: finalPayload,\n          signature: signature.toString(),\n        };\n      }),\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private async mapPayloadToContractStruct(\n    mintRequest: PayloadWithUri,\n  ): Promise<ITokenERC721.MintRequestStructOutput> {\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    return {\n      to: mintRequest.to,\n      price: normalizedPricePerToken,\n      uri: mintRequest.uri,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n    } as ITokenERC721.MintRequestStructOutput;\n  }\n}\n","import {\n  FilledSignaturePayload1155,\n  MintRequest1155,\n  PayloadToSign1155,\n  PayloadWithUri1155,\n  Signature1155PayloadInput,\n  Signature1155PayloadOutput,\n  SignedPayload1155,\n} from \"../../schema/contracts/common/signature\";\nimport { TransactionResultWithId } from \"../types\";\nimport { normalizePriceValue, setErc20Allowance } from \"../../common/currency\";\nimport invariant from \"tiny-invariant\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ITokenERC1155, TokenERC1155 } from \"@thirdweb-dev/contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { ContractRoles } from \"./contract-roles\";\nimport { NFTCollection } from \"../../contracts\";\nimport { TokensMintedWithSignatureEvent } from \"@thirdweb-dev/contracts/dist/TokenERC1155\";\n\n/**\n * Enables generating dynamic ERC1155 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nexport class Erc1155SignatureMinting {\n  private contractWrapper: ContractWrapper<TokenERC1155>;\n  private storage: IStorage;\n  private roles: ContractRoles<\n    TokenERC1155,\n    typeof NFTCollection.contractRoles[number]\n  >;\n\n  constructor(\n    contractWrapper: ContractWrapper<TokenERC1155>,\n    roles: ContractRoles<\n      TokenERC1155,\n      typeof NFTCollection.contractRoles[number]\n    >,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc721SignatureMinting.generate}\n   */\n  public async mint(\n    signedPayload: SignedPayload1155,\n  ): Promise<TransactionResultWithId> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(\n      this.contractWrapper,\n      message.pricePerToken.mul(message.quantity),\n      mintRequest.currencyAddress,\n      overrides,\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n    const t = this.contractWrapper.parseLogs<TokensMintedWithSignatureEvent>(\n      \"TokensMintedWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    const id = t[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n    };\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   */\n  public async verify(signedPayload: SignedPayload1155): Promise<boolean> {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification: [boolean, string] =\n      await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: now, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   */\n  public async generate(\n    mintRequest: PayloadToSign1155,\n  ): Promise<SignedPayload1155> {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721SignatureMinting.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   */\n  public async generateBatch(\n    payloadsToSign: PayloadToSign1155[],\n  ): Promise<SignedPayload1155[]> {\n    await this.roles.verify(\n      [\"minter\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const parsedRequests: FilledSignaturePayload1155[] = payloadsToSign.map(\n      (m) => Signature1155PayloadInput.parse(m),\n    );\n\n    const { metadataUris: uris } = await this.storage.uploadMetadataBatch(\n      parsedRequests.map((r) => r.metadata),\n    );\n\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    return await Promise.all(\n      parsedRequests.map(async (m, i) => {\n        const uri = uris[i];\n        const finalPayload = Signature1155PayloadOutput.parse({\n          ...m,\n          uri,\n        });\n        const signature = await this.contractWrapper.signTypedData(\n          signer,\n          {\n            name: \"TokenERC1155\",\n            version: \"1\",\n            chainId,\n            verifyingContract: this.contractWrapper.readContract.address,\n          },\n          { MintRequest: MintRequest1155 }, // TYPEHASH\n          await this.mapPayloadToContractStruct(finalPayload),\n        );\n        return {\n          payload: finalPayload,\n          signature: signature.toString(),\n        };\n      }),\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private async mapPayloadToContractStruct(\n    mintRequest: PayloadWithUri1155,\n  ): Promise<ITokenERC1155.MintRequestStructOutput> {\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      mintRequest.price,\n      mintRequest.currencyAddress,\n    );\n    return {\n      to: mintRequest.to,\n      tokenId: mintRequest.tokenId,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n    } as ITokenERC1155.MintRequestStructOutput;\n  }\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport {\n  ERC165__factory,\n  IERC1155__factory,\n  IERC721__factory,\n  IMarketplace,\n  Marketplace,\n} from \"@thirdweb-dev/contracts\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport {\n  DirectListing,\n  NewDirectListing,\n  Offer,\n} from \"../../types/marketplace\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { ListingNotFoundError, WrongListingTypeError } from \"../../common\";\nimport { ListingType } from \"../../enums\";\nimport { TransactionResult, TransactionResultWithId } from \"../types\";\nimport {\n  fetchCurrencyValue,\n  isNativeToken,\n  normalizePriceValue,\n  setErc20Allowance,\n} from \"../../common/currency\";\nimport { Price } from \"../../types/currency\";\nimport { fetchTokenMetadataForContract } from \"../../common/nft\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../../constants/contract\";\nimport {\n  handleTokenApproval,\n  isTokenApprovedForMarketplace,\n  mapOffer,\n  validateNewListingParam,\n} from \"../../common/marketplace\";\nimport { IStorage } from \"../interfaces\";\nimport invariant from \"tiny-invariant\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { ListingAddedEvent } from \"@thirdweb-dev/contracts/dist/Marketplace\";\n\n/**\n * Handles direct listings\n * @public\n */\nexport class MarketplaceDirect {\n  private contractWrapper: ContractWrapper<Marketplace>;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<Marketplace>,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  public async getListing(listingId: BigNumberish): Promise<DirectListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n\n    if (listing.assetContract === AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(\n        this.getAddress(),\n        listingId.toString(),\n        \"Auction\",\n        \"Direct\",\n      );\n    }\n\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  public async getActiveOffer(\n    listingId: BigNumberish,\n    address: string,\n  ): Promise<Offer | undefined> {\n    await this.validateListing(BigNumber.from(listingId));\n    invariant(isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.readContract.offers(\n      listingId,\n      address,\n    );\n    if (offers.offeror === AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(\n      this.contractWrapper.getProvider(),\n      BigNumber.from(listingId),\n      offers,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // in how many seconds will the listing open up\n   *   startTimeInSeconds: 0,\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  public async createListing(\n    listing: NewDirectListing,\n  ): Promise<TransactionResultWithId> {\n    validateNewListingParam(listing);\n\n    await handleTokenApproval(\n      this.contractWrapper.getSignerOrProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.buyoutPricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"createListing\",\n      [\n        {\n          assetContract: listing.assetContractAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: listing.currencyContractAddress,\n          listingType: ListingType.Direct,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedPricePerToken,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: listing.startTimeInSeconds,\n        } as IMarketplace.ListingParametersStruct,\n      ],\n    );\n\n    const event = this.contractWrapper.parseLogs<ListingAddedEvent>(\n      \"ListingAdded\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.listingId,\n      receipt,\n    };\n  }\n\n  /**\n   * Make an offer for a Direct Listing\n   *\n   */\n  public async makeOffer(\n    listingId: BigNumberish,\n    quantityDesired: BigNumberish,\n    currencyContractAddress: string,\n    pricePerToken: Price,\n  ): Promise<TransactionResult> {\n    if (isNativeToken(currencyContractAddress)) {\n      throw new Error(\n        \"You must use the wrapped native token address when making an offer with a native token\",\n      );\n    }\n\n    const normalizedPrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      pricePerToken,\n      currencyContractAddress,\n    );\n\n    try {\n      await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${listingId}`);\n    }\n\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(normalizedPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      currencyContractAddress,\n      overrides,\n    );\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"offer\",\n        [listingId, quantityDesired, currencyContractAddress, normalizedPrice],\n        overrides,\n      ),\n    };\n  }\n\n  public async acceptOffer(\n    listingId: BigNumberish,\n    addressOfOfferor: string,\n  ): Promise<TransactionResult> {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too low.\n     */\n    await this.validateListing(BigNumber.from(listingId));\n    const offer = await this.contractWrapper.readContract.offers(\n      listingId,\n      addressOfOfferor,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"acceptOffer\", [\n        listingId,\n        addressOfOfferor,\n        offer.currency,\n        offer.pricePerToken,\n      ]),\n    };\n  }\n\n  /**\n   * Buy a Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n    quantityDesired: BigNumberish,\n    receiver?: string,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const valid = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(\n        \"The asset on this listing has been moved from the lister's wallet, this listing is now invalid\",\n      );\n    }\n    const buyFor = receiver\n      ? receiver\n      : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      listing.currencyContractAddress,\n      overrides,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"buy\",\n        [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   */\n  public async updateListing(\n    listing: DirectListing,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"updateListing\", [\n        listing.id,\n        listing.quantity,\n        listing.buyoutPrice, // reserve price, doesn't matter for direct listing\n        listing.buyoutPrice,\n        listing.currencyContractAddress,\n        listing.startTimeInSeconds,\n        listing.secondsUntilEnd,\n      ]),\n    };\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.direct.cancelListing(listingId);\n   * ```\n   */\n  public async cancelListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"cancelDirectListing\",\n        [listingId],\n      ),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateListing(listingId: BigNumber): Promise<DirectListing> {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  public async mapListing(\n    listing: IMarketplace.ListingStruct,\n  ): Promise<DirectListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(\n        listing.assetContract,\n        this.contractWrapper.getProvider(),\n        listing.tokenId,\n        this.storage,\n      ),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct,\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  public async isStillValidListing(\n    listing: DirectListing,\n    quantity?: BigNumberish,\n  ): Promise<boolean> {\n    const approved = await isTokenApprovedForMarketplace(\n      this.contractWrapper.getProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      listing.sellerAddress,\n    );\n\n    if (!approved) {\n      return false;\n    }\n\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = ERC165__factory.connect(\n      listing.assetContractAddress,\n      provider,\n    );\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = IERC721__factory.connect(\n        listing.assetContractAddress,\n        provider,\n      );\n      return (\n        (await asset.ownerOf(listing.tokenId)).toLowerCase() ===\n        listing.sellerAddress.toLowerCase()\n      );\n    } else if (isERC1155) {\n      const asset = IERC1155__factory.connect(\n        listing.assetContractAddress,\n        provider,\n      );\n      const balance = await asset.balanceOf(\n        listing.sellerAddress,\n        listing.tokenId,\n      );\n      return balance.gte(quantity || listing.quantity);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  }\n}\n","import { BigNumber, BigNumberish } from \"ethers\";\nimport {\n  ERC165__factory,\n  IERC1155,\n  IERC1155__factory,\n  IERC721,\n  IERC721__factory,\n} from \"@thirdweb-dev/contracts\";\nimport {\n  InterfaceId_IERC1155,\n  InterfaceId_IERC721,\n} from \"../constants/contract\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { SignerOrProvider } from \"../core\";\nimport {\n  NewAuctionListing,\n  NewDirectListing,\n  Offer,\n} from \"../types/marketplace\";\nimport invariant from \"tiny-invariant\";\nimport { fetchCurrencyValue } from \"./currency\";\nimport { MAX_BPS } from \"../schema/shared\";\n\n/**\n * This method checks if the given token is approved for the marketplace contract.\n * This is particularly useful for direct listings where the token\n * being listed may be moved before the listing is actually closed.\n *\n * @internal\n * @param provider - The connected provider\n * @param marketplaceAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param from - The address of the account that owns the token.\n * @returns - True if the marketplace is approved on the token, false otherwise.\n */\nexport async function isTokenApprovedForMarketplace(\n  provider: Provider,\n  marketplaceAddress: string,\n  assetContract: string,\n  tokenId: BigNumberish,\n  from: string,\n): Promise<boolean> {\n  try {\n    const erc165 = ERC165__factory.connect(assetContract, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = IERC721__factory.connect(assetContract, provider);\n\n      const approved = await asset.isApprovedForAll(from, marketplaceAddress);\n      if (approved) {\n        return true;\n      }\n      return (\n        (await asset.getApproved(tokenId)).toLowerCase() ===\n        marketplaceAddress.toLowerCase()\n      );\n    } else if (isERC1155) {\n      const asset = IERC1155__factory.connect(assetContract, provider);\n      return await asset.isApprovedForAll(from, marketplaceAddress);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  } catch (err: any) {\n    console.error(\"Failed to check if token is approved\", err);\n    return false;\n  }\n}\n\n/**\n * Checks if the marketplace is approved to make transfers on the assetContract\n * If not, it tries to set the approval.\n * @param signerOrProvider\n * @param marketplaceAddress\n * @param assetContract\n * @param tokenId\n * @param from\n */\nexport async function handleTokenApproval(\n  signerOrProvider: SignerOrProvider,\n  marketplaceAddress: string,\n  assetContract: string,\n  tokenId: BigNumberish,\n  from: string,\n): Promise<void> {\n  const erc165 = ERC165__factory.connect(assetContract, signerOrProvider);\n  const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n  const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n  // check for token approval\n  if (isERC721) {\n    const asset = new ContractWrapper<IERC721>(\n      signerOrProvider,\n      assetContract,\n      IERC721__factory.abi,\n      {},\n    );\n    const approved = await asset.readContract.isApprovedForAll(\n      from,\n      marketplaceAddress,\n    );\n    if (!approved) {\n      const isTokenApproved =\n        (await asset.readContract.getApproved(tokenId)).toLowerCase() ===\n        marketplaceAddress.toLowerCase();\n\n      if (!isTokenApproved) {\n        await asset.sendTransaction(\"setApprovalForAll\", [\n          marketplaceAddress,\n          true,\n        ]);\n      }\n    }\n  } else if (isERC1155) {\n    const asset = new ContractWrapper<IERC1155>(\n      signerOrProvider,\n      assetContract,\n      IERC1155__factory.abi,\n      {},\n    );\n\n    const approved = await asset.readContract.isApprovedForAll(\n      from,\n      marketplaceAddress,\n    );\n    if (!approved) {\n      await asset.sendTransaction(\"setApprovalForAll\", [\n        marketplaceAddress,\n        true,\n      ]);\n    }\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n}\n\n/**\n * Used to verify fields in new listing.\n * @internal\n */\n// TODO this should be done in zod\nexport function validateNewListingParam(\n  param: NewDirectListing | NewAuctionListing,\n) {\n  invariant(\n    param.assetContractAddress !== undefined &&\n      param.assetContractAddress !== null,\n    \"Asset contract address is required\",\n  );\n  invariant(\n    param.buyoutPricePerToken !== undefined &&\n      param.buyoutPricePerToken !== null,\n    \"Buyout price is required\",\n  );\n  invariant(\n    param.listingDurationInSeconds !== undefined &&\n      param.listingDurationInSeconds !== null,\n    \"Listing duration is required\",\n  );\n  invariant(\n    param.startTimeInSeconds !== undefined && param.startTimeInSeconds !== null,\n    \"Start time is required\",\n  );\n  invariant(\n    param.tokenId !== undefined && param.tokenId !== null,\n    \"Token ID is required\",\n  );\n  invariant(\n    param.quantity !== undefined && param.quantity !== null,\n    \"Quantity is required\",\n  );\n\n  switch (param.type) {\n    case \"NewAuctionListing\": {\n      invariant(\n        param.reservePricePerToken !== undefined &&\n          param.reservePricePerToken !== null,\n        \"Reserve price is required\",\n      );\n    }\n  }\n}\n\n/**\n * Maps a contract offer to the strict interface\n *\n * @internal\n * @param offer\n * @returns - An `Offer` object\n */\nexport async function mapOffer(\n  provider: Provider,\n  listingId: BigNumber,\n  offer: any,\n): Promise<Offer> {\n  return {\n    quantity: offer.quantityDesired,\n    pricePerToken: offer.pricePerToken,\n    currencyContractAddress: offer.currency,\n    buyerAddress: offer.offeror,\n    quantityDesired: offer.quantityWanted,\n    currencyValue: await fetchCurrencyValue(\n      provider,\n      offer.currency,\n      (offer.quantityWanted as BigNumber).mul(offer.pricePerToken as BigNumber),\n    ),\n    listingId,\n  } as Offer;\n}\n\nexport function isWinningBid(\n  winningPrice: BigNumberish,\n  newBidPrice: BigNumberish,\n  bidBuffer: BigNumberish,\n): boolean {\n  bidBuffer = BigNumber.from(bidBuffer);\n  winningPrice = BigNumber.from(winningPrice);\n  newBidPrice = BigNumber.from(newBidPrice);\n  const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n  return buffer.gte(bidBuffer);\n}\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { IMarketplace, Marketplace } from \"@thirdweb-dev/contracts\";\nimport { IStorage } from \"../interfaces\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport {\n  AuctionListing,\n  NewAuctionListing,\n  Offer,\n} from \"../../types/marketplace\";\nimport {\n  AuctionAlreadyStartedError,\n  AuctionHasNotEndedError,\n  ListingNotFoundError,\n  WrongListingTypeError,\n} from \"../../common\";\nimport { ListingType } from \"../../enums\";\nimport {\n  fetchCurrencyMetadata,\n  fetchCurrencyValue,\n  normalizePriceValue,\n  setErc20Allowance,\n} from \"../../common/currency\";\nimport { fetchTokenMetadataForContract } from \"../../common/nft\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionResult, TransactionResultWithId } from \"../types\";\nimport {\n  handleTokenApproval,\n  isWinningBid,\n  mapOffer,\n  validateNewListingParam,\n} from \"../../common/marketplace\";\nimport { Price } from \"../../types/currency\";\nimport invariant from \"tiny-invariant\";\nimport { ListingAddedEvent } from \"@thirdweb-dev/contracts/dist/Marketplace\";\n\n/**\n * Handles auction listings\n * @public\n */\nexport class MarketplaceAuction {\n  private contractWrapper: ContractWrapper<Marketplace>;\n  private storage: IStorage;\n\n  constructor(\n    contractWrapper: ContractWrapper<Marketplace>,\n    storage: IStorage,\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  public async getListing(listingId: BigNumberish): Promise<AuctionListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(\n        this.getAddress(),\n        listingId.toString(),\n        \"Direct\",\n        \"Auction\",\n      );\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getWinningBid(\n    listingId: BigNumberish,\n  ): Promise<Offer | undefined> {\n    await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(\n      listingId,\n    );\n    if (offers.offeror === AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(\n      this.contractWrapper.getProvider(),\n      BigNumber.from(listingId),\n      offers,\n    );\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getWinner(listingId: BigNumberish): Promise<string> {\n    // TODO this should be via indexer or direct contract call\n    const closedAuctions = await this.contractWrapper.readContract.queryFilter(\n      this.contractWrapper.readContract.filters.AuctionClosed(),\n    );\n    const auction = closedAuctions.find((a) =>\n      a.args.listingId.eq(BigNumber.from(listingId)),\n    );\n    if (!auction) {\n      throw new Error(\n        `Could not find auction with listingId ${listingId} in closed auctions`,\n      );\n    }\n    return auction.args.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // in how many seconds with the listing open up\n   *   startTimeInSeconds: 0,\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  public async createListing(\n    listing: NewAuctionListing,\n  ): Promise<TransactionResultWithId> {\n    validateNewListingParam(listing);\n\n    await handleTokenApproval(\n      this.contractWrapper.getSignerOrProvider(),\n      this.getAddress(),\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const normalizedPricePerToken = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.buyoutPricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    const normalizedReservePrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      listing.reservePricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"createListing\",\n      [\n        {\n          assetContract: listing.assetContractAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: listing.currencyContractAddress,\n          listingType: ListingType.Auction,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedReservePrice,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: listing.startTimeInSeconds,\n        } as IMarketplace.ListingParametersStruct,\n      ],\n    );\n\n    const event = this.contractWrapper.parseLogs<ListingAddedEvent>(\n      \"ListingAdded\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.listingId,\n      receipt,\n    };\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await contract.auction.buyoutListing(listingId);\n   * ```\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n\n    const currencyMetadata = await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      listing.currencyContractAddress,\n    );\n\n    return this.makeBid(\n      listingId,\n      ethers.utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals),\n    );\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listings\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  public async makeBid(\n    listingId: BigNumberish,\n    pricePerToken: Price,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const normalizedPrice = await normalizePriceValue(\n      this.contractWrapper.getProvider(),\n      pricePerToken,\n      listing.currencyContractAddress,\n    );\n\n    const bidBuffer = await this.contractWrapper.readContract.bidBufferBps();\n    const winningBid = await this.getWinningBid(listingId);\n    if (winningBid) {\n      const isWinnner = isWinningBid(\n        winningBid.pricePerToken,\n        normalizedPrice,\n        bidBuffer,\n      );\n\n      invariant(\n        isWinnner,\n        \"Bid price is too low based on the current winning bid and the bid buffer\",\n      );\n    } else {\n      const tokenPrice = normalizedPrice;\n      const reservePrice = BigNumber.from(listing.reservePrice);\n      invariant(\n        tokenPrice.gte(reservePrice),\n        \"Bid price is too low based on reserve price\",\n      );\n    }\n\n    const quantity = BigNumber.from(listing.quantity);\n    const value = normalizedPrice.mul(quantity);\n\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(\n      this.contractWrapper,\n      value,\n      listing.currencyContractAddress,\n      overrides,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"offer\",\n        [\n          listingId,\n          listing.quantity,\n          listing.currencyContractAddress,\n          normalizedPrice,\n        ],\n        overrides,\n      ),\n    };\n  }\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.auction.cancelListing(listingId);\n   * ```\n   */\n  public async cancelListing(\n    listingId: BigNumberish,\n  ): Promise<TransactionResult> {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n\n    const offers = await this.contractWrapper.readContract.winningBid(\n      listingId,\n    );\n    if (now.gt(startTime) && offers.offeror !== AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"closeAuction\", [\n        BigNumber.from(listingId),\n        await this.contractWrapper.getSignerAddress(),\n      ]),\n    };\n  }\n\n  /**\n   * Close the Auction\n   *\n   * @remarks Closes the Auction and executes the sale.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.closeListing(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n   */\n  public async closeListing(\n    listingId: BigNumberish,\n    closeFor?: string,\n  ): Promise<TransactionResult> {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"closeAuction\", [\n          BigNumber.from(listingId),\n          closeFor,\n        ]),\n      };\n    } catch (err: any) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(\n          listingId.toString(),\n          listing.endTimeInEpochSeconds.toString(),\n        );\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Update an Auction listing with new metadata\n   * @param listing - the listing id to update\n   */\n  public async updateListing(\n    listing: AuctionListing,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"updateListing\", [\n        listing.id,\n        listing.quantity,\n        listing.reservePrice,\n        listing.buyoutPrice,\n        listing.currencyContractAddress,\n        listing.startTimeInEpochSeconds,\n        listing.endTimeInEpochSeconds,\n      ]),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateListing(listingId: BigNumber): Promise<AuctionListing> {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  public async mapListing(\n    listing: IMarketplace.ListingStruct,\n  ): Promise<AuctionListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(\n        listing.assetContract,\n        this.contractWrapper.getProvider(),\n        listing.tokenId,\n        this.storage,\n      ),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(\n        this.contractWrapper.getProvider(),\n        listing.currency,\n        listing.reservePricePerToken,\n      ),\n      reservePrice: BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction,\n    };\n  }\n}\n","import { TWRegistry, TWRegistry__factory } from \"@thirdweb-dev/contracts\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\n\nimport { NetworkOrSignerOrProvider } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { AddressZero } from \"@ethersproject/constants\";\n\n/**\n * @internal\n */\nexport class ContractRegistry extends ContractWrapper<TWRegistry> {\n  constructor(\n    registryAddress: string,\n    network: NetworkOrSignerOrProvider,\n    options?: SDKOptions,\n  ) {\n    super(network, registryAddress, TWRegistry__factory.abi, options);\n  }\n\n  public async getContractAddresses(walletAddress: string) {\n    // TODO @fixme the filter here is necessary because for some reason getAll returns a 0x0 address for the first entry\n    return (await this.readContract.getAll(walletAddress)).filter(\n      (adr) => isAddress(adr) && adr.toLowerCase() !== AddressZero,\n    );\n  }\n}\n","import { TWFactory, TWFactory__factory } from \"@thirdweb-dev/contracts\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { z } from \"zod\";\nimport {\n  EditionDrop,\n  Marketplace,\n  CONTRACTS_MAP,\n  Pack,\n  Split,\n  Edition,\n  Token,\n  Vote,\n  NFTCollection,\n  NFTDrop,\n  REMOTE_CONTRACT_NAME,\n} from \"../../contracts\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { NetworkOrSignerOrProvider, ValidContractClass } from \"../types\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { ProxyDeployedEvent } from \"@thirdweb-dev/contracts/dist/TWFactory\";\n\nimport { ChainlinkVrf } from \"../../constants/chainlink\";\nimport {\n  CONTRACT_ADDRESSES,\n  OZ_DEFENDER_FORWARDER_ADDRESS,\n  SUPPORTED_CHAIN_IDS,\n} from \"../../constants\";\nimport { AddressZero } from \"@ethersproject/constants\";\n\n/**\n * @internal\n */\nexport class ContractFactory extends ContractWrapper<TWFactory> {\n  private storage: IStorage;\n\n  constructor(\n    factoryAddr: string,\n    network: NetworkOrSignerOrProvider,\n    storage: IStorage,\n    options?: SDKOptions,\n  ) {\n    super(network, factoryAddr, TWFactory__factory.abi, options);\n    this.storage = storage;\n  }\n\n  public async deploy<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    contractMetadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n  ): Promise<string> {\n    const contract = CONTRACTS_MAP[contractType];\n    const metadata = contract.schema.deploy.parse(contractMetadata);\n    const contractFactory = contract.contractFactory;\n\n    // TODO: is there any special pre-processing we need to do before uploading?\n    const contractURI = await this.storage.uploadMetadata(\n      metadata,\n      this.readContract.address,\n      await this.getSigner()?.getAddress(),\n    );\n\n    const encodedFunc = contractFactory\n      .getInterface(contractFactory.abi)\n      .encodeFunctionData(\n        \"initialize\",\n        await this.getDeployArguments(contractType, metadata, contractURI),\n      );\n\n    const contractName = REMOTE_CONTRACT_NAME[contractType];\n    console.log(`Remote contractName : ${contractName}`);\n    const encodedType = ethers.utils.formatBytes32String(contractName);\n    console.log(`Deploying ${contractType} proxy`);\n    const receipt = await this.sendTransaction(\"deployProxy\", [\n      encodedType,\n      encodedFunc,\n    ]);\n    console.log(`${contractType} proxy deployed successfully`);\n    const events = this.parseLogs<ProxyDeployedEvent>(\n      \"ProxyDeployed\",\n      receipt.logs,\n    );\n    if (events.length < 1) {\n      throw new Error(\"No ProxyDeployed event found\");\n    }\n\n    return events[0].args.proxy;\n  }\n\n  private async getDeployArguments<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    metadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n    contractURI: string,\n  ): Promise<any[]> {\n    let trustedForwarders = await this.getDefaultTrustedForwarders();\n    // override default forwarders if custom ones are passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders = metadata.trusted_forwarders;\n    }\n    switch (contractType) {\n      case NFTDrop.contractType:\n      case NFTCollection.contractType:\n        const erc721metadata = NFTDrop.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc721metadata.name,\n          erc721metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc721metadata.primary_sale_recipient,\n          erc721metadata.fee_recipient,\n          erc721metadata.seller_fee_basis_points,\n          erc721metadata.platform_fee_basis_points,\n          erc721metadata.platform_fee_recipient,\n        ];\n      case EditionDrop.contractType:\n      case Edition.contractType:\n        const erc1155metadata = EditionDrop.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc1155metadata.name,\n          erc1155metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc1155metadata.primary_sale_recipient,\n          erc1155metadata.fee_recipient,\n          erc1155metadata.seller_fee_basis_points,\n          erc1155metadata.platform_fee_basis_points,\n          erc1155metadata.platform_fee_recipient,\n        ];\n      case Token.contractType:\n        const erc20metadata = Token.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          erc20metadata.name,\n          erc20metadata.symbol,\n          contractURI,\n          trustedForwarders,\n          erc20metadata.primary_sale_recipient,\n          erc20metadata.platform_fee_recipient,\n          erc20metadata.platform_fee_basis_points,\n        ];\n      case Vote.contractType:\n        const voteMetadata = Vote.schema.deploy.parse(metadata);\n        return [\n          voteMetadata.name,\n          contractURI,\n          trustedForwarders,\n          voteMetadata.voting_token_address,\n          voteMetadata.voting_delay_in_blocks,\n          voteMetadata.voting_period_in_blocks,\n          BigNumber.from(voteMetadata.proposal_token_threshold),\n          voteMetadata.voting_quorum_fraction,\n        ];\n      case Split.contractType:\n        const splitsMetadata = Split.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          contractURI,\n          trustedForwarders,\n          splitsMetadata.recipients.map((s) => s.address),\n          splitsMetadata.recipients.map((s) => BigNumber.from(s.sharesBps)),\n        ];\n      case Marketplace.contractType:\n        const marketplaceMetadata = Marketplace.schema.deploy.parse(metadata);\n        return [\n          await this.getSignerAddress(),\n          contractURI,\n          trustedForwarders,\n          marketplaceMetadata.platform_fee_recipient,\n          marketplaceMetadata.platform_fee_basis_points,\n        ];\n      case Pack.contractType:\n        const packsMetadata = Pack.schema.deploy.parse(metadata);\n        const vrf = ChainlinkVrf[await this.getChainID()];\n        return [\n          await this.getSignerAddress(),\n          packsMetadata.name,\n          packsMetadata.symbol,\n          contractURI,\n          trustedForwarders,\n          packsMetadata.fee_recipient,\n          packsMetadata.seller_fee_basis_points,\n          vrf.fees,\n          vrf.keyHash,\n        ];\n      default:\n        return [];\n    }\n  }\n\n  private async getDefaultTrustedForwarders(): Promise<string[]> {\n    const chainId = await this.getChainID();\n    const chainEnum = SUPPORTED_CHAIN_IDS.find((c) => c === chainId);\n    const biconomyForwarder = chainEnum\n      ? CONTRACT_ADDRESSES[chainEnum].biconomyForwarder\n      : AddressZero;\n    return biconomyForwarder !== AddressZero\n      ? [OZ_DEFENDER_FORWARDER_ADDRESS, biconomyForwarder]\n      : [OZ_DEFENDER_FORWARDER_ADDRESS];\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc721ContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const TokenErc721ContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const TokenErc721ContractDeploy = TokenErc721ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc721ContractSchema = {\n  deploy: TokenErc721ContractDeploy,\n  output: TokenErc721ContractOutput,\n  input: TokenErc721ContractInput,\n};\n","import {\n  CommonNFTInput,\n  NFTMetadataInput,\n  NFTMetadataOwner,\n} from \"../schema/tokens/common\";\nimport type {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResultWithId,\n} from \"../core\";\nimport { TokenErc721ContractSchema } from \"../schema/contracts/token-erc721\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { TokenERC721, TokenERC721__factory } from \"@thirdweb-dev/contracts\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { Erc721 } from \"../core/classes/erc-721\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { Erc721SignatureMinting } from \"../core/classes/erc-721-signature-minting\";\nimport { GasCostEstimator } from \"../core/classes\";\nimport { TokensMintedEvent } from \"@thirdweb-dev/contracts/dist/TokenERC721\";\nimport { BigNumber } from \"ethers\";\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getNFTCollection(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class NFTCollection extends Erc721<TokenERC721> {\n  static contractType = \"nft-collection\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractFactory = TokenERC721__factory;\n  /**\n   * @internal\n   */\n  static schema = TokenErc721ContractSchema;\n\n  public metadata: ContractMetadata<TokenERC721, typeof NFTCollection.schema>;\n  public roles: ContractRoles<\n    TokenERC721,\n    typeof NFTCollection.contractRoles[number]\n  >;\n  public encoder: ContractEncoder<TokenERC721>;\n  public estimator: GasCostEstimator<TokenERC721>;\n  public primarySale: ContractPrimarySale<TokenERC721>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalty.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<TokenERC721, typeof NFTCollection.schema>;\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n  public signature: Erc721SignatureMinting;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC721>(\n      network,\n      address,\n      NFTCollection.contractFactory.abi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      NFTCollection.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      NFTCollection.contractRoles,\n    );\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.primarySale = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.signature = new Erc721SignatureMinting(\n      this.contractWrapper,\n      this.roles,\n      this.storage,\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint an NFT to the connected wallet\n   *\n   * @remarks See {@link NFTCollection.mintTo}\n   */\n  public async mint(\n    metadata: NFTMetadataInput,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    return this.mintTo(await this.contractWrapper.getSignerAddress(), metadata);\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintTo(toAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async mintTo(\n    to: string,\n    metadata: NFTMetadataInput,\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>> {\n    const uri = await this.storage.uploadMetadata(\n      CommonNFTInput.parse(metadata),\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      uri,\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TokenMinted event not found\");\n    }\n    const id = event[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n      data: () => this.get(id.toString()),\n    };\n  }\n\n  /**\n   * Mint Many NFTs to the connected wallet\n   *\n   * @remarks See {@link NFTCollection.mintBatchTo}\n   */\n  public async mintBatch(\n    metadatas: NFTMetadataInput[],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    return this.mintBatchTo(\n      await this.contractWrapper.getSignerAddress(),\n      metadatas,\n    );\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(toAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async mintBatchTo(\n    to: string,\n    metadatas: NFTMetadataInput[],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const { metadataUris: uris } = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n    );\n    const encoded = uris.map((uri) =>\n      this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        uri,\n      ]),\n    );\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt.logs,\n    );\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n    return events.map((e) => {\n      const id = e.args.tokenIdMinted;\n      return {\n        id,\n        receipt,\n        data: () => this.get(id),\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public addTransferEventListener(\n    listener: (from: string, to: string, tokenId: BigNumber) => void,\n  ) {\n    this.contractWrapper.readContract.on(\"Transfer\", (from, to, tokenId) => {\n      listener(from, to, tokenId);\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public removeTransferEventListeners() {\n    this.contractWrapper.readContract.removeAllListeners(\"Transfer\");\n  }\n}\n","import { Erc1155 } from \"../core/classes/erc-1155\";\nimport { DropERC1155, DropERC1155__factory } from \"@thirdweb-dev/contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  CommonNFTInput,\n  NFTMetadata,\n  NFTMetadataInput,\n} from \"../schema/tokens/common\";\nimport { BigNumberish, BytesLike } from \"ethers\";\nimport { hexZeroPad } from \"ethers/lib/utils\";\nimport { prepareClaim } from \"../common/claim-conditions\";\nimport { DropErc1155ClaimConditions } from \"../core/classes/drop-erc1155-claim-conditions\";\nimport { DropErc1155ContractSchema } from \"../schema/contracts/drop-erc1155\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\nimport { ClaimVerification } from \"../types\";\nimport { TokensLazyMintedEvent } from \"@thirdweb-dev/contracts/dist/DropERC1155\";\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getEditionDrop(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class EditionDrop extends Erc1155<DropERC1155> {\n  static contractType = \"edition-drop\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractFactory = DropERC1155__factory;\n  /**\n   * @internal\n   */\n  static schema = DropErc1155ContractSchema;\n\n  public primarySale: ContractPrimarySale<DropERC1155>;\n  public encoder: ContractEncoder<DropERC1155>;\n  public estimator: GasCostEstimator<DropERC1155>;\n  public metadata: ContractMetadata<DropERC1155, typeof EditionDrop.schema>;\n  public roles: ContractRoles<\n    DropERC1155,\n    typeof EditionDrop.contractRoles[number]\n  >;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalty.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<DropERC1155, typeof EditionDrop.schema>;\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n  public claimConditions: DropErc1155ClaimConditions;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<DropERC1155>(\n      network,\n      address,\n      EditionDrop.contractFactory.abi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      EditionDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      EditionDrop.contractRoles,\n    );\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.primarySale = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(\n      this.contractWrapper,\n      this.metadata,\n      this.storage,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   */\n  public async createBatch(\n    metadatas: NFTMetadataInput[],\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const startFileNumber =\n      await this.contractWrapper.readContract.nextTokenIdToMint();\n    const batch = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.metadataUris.length,\n      `${batch.baseUri.endsWith(\"/\") ? batch.baseUri : `${batch.baseUri}/`}`,\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.getTokenMetadata(id),\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claimTo(\n    destinationAddress: string,\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionResult> {\n    const claimVerification = await this.prepareClaim(\n      tokenId,\n      quantity,\n      proofs,\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"claim\",\n        [\n          destinationAddress,\n          tokenId,\n          quantity,\n          claimVerification.currencyAddress,\n          claimVerification.price,\n          claimVerification.proofs,\n          claimVerification.maxQuantityPerTransaction,\n        ],\n        claimVerification.overrides,\n      ),\n    };\n  }\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionResult> {\n    const address = await this.contractWrapper.getSignerAddress();\n    return this.claimTo(address, tokenId, quantity, proofs);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  private async prepareClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<ClaimVerification> {\n    return prepareClaim(\n      quantity,\n      await this.claimConditions.getActive(tokenId),\n      (await this.metadata.get()).merkle,\n      this.contractWrapper,\n      this.storage,\n      proofs,\n    );\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { MerkleSchema } from \"./common/snapshots\";\n\nexport const DropErc1155ContractInput = CommonContractSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc1155ContractOutput = CommonContractOutputSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc1155ContractDeploy = DropErc1155ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const DropErc1155ContractSchema = {\n  deploy: DropErc1155ContractDeploy,\n  output: DropErc1155ContractOutput,\n  input: DropErc1155ContractInput,\n};\n","import { ContractWrapper } from \"./contract-wrapper\";\nimport { BaseContract, ethers } from \"ethers\";\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nexport class GasCostEstimator<TContract extends BaseContract> {\n  private contractWrapper;\n\n  constructor(contractWrapper: ContractWrapper<TContract>) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   */\n  public async gasCostOf(\n    fn: keyof TContract[\"functions\"],\n    args: Parameters<TContract[\"functions\"][typeof fn]>,\n  ): Promise<string> {\n    const price = await this.contractWrapper.getPreferredGasPrice();\n    const gasUnits = await this.contractWrapper.estimateGas(fn, args);\n    return ethers.utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   */\n  public async currentGasPriceInGwei(): Promise<string> {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return ethers.utils.formatUnits(price, \"gwei\");\n  }\n}\n","import { Erc1155 } from \"../core/classes/erc-1155\";\nimport { TokenERC1155, TokenERC1155__factory } from \"@thirdweb-dev/contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResultWithId,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { TokenErc1155ContractSchema } from \"../schema/contracts/token-erc1155\";\nimport {\n  EditionMetadata,\n  EditionMetadataInput,\n} from \"../schema/tokens/edition\";\nimport { TokensMintedEvent } from \"@thirdweb-dev/contracts/dist/TokenERC1155\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { CommonNFTInput } from \"../schema/tokens/common\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { Erc1155SignatureMinting } from \"../core/classes/erc-1155-signature-minting\";\nimport { GasCostEstimator } from \"../core/classes/gas-cost-estimator\";\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getEdition(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Edition extends Erc1155<TokenERC1155> {\n  static contractType = \"edition\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractFactory = TokenERC1155__factory;\n  /**\n   * @internal\n   */\n  static schema = TokenErc1155ContractSchema;\n\n  public metadata: ContractMetadata<TokenERC1155, typeof Edition.schema>;\n  public roles: ContractRoles<\n    TokenERC1155,\n    typeof Edition.contractRoles[number]\n  >;\n  public primarySale: ContractPrimarySale<TokenERC1155>;\n  public encoder: ContractEncoder<TokenERC1155>;\n  public estimator: GasCostEstimator<TokenERC1155>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalty.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<TokenERC1155, typeof Edition.schema>;\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n  public signature: Erc1155SignatureMinting;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC1155>(\n      network,\n      address,\n      Edition.contractFactory.abi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Edition.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.primarySale = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.signature = new Erc1155SignatureMinting(\n      this.contractWrapper,\n      this.roles,\n      this.storage,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint NFT for the connected wallet\n   *\n   * @remarks See {@link Edition.mintTo}\n   */\n  public async mint(\n    metadataWithSupply: EditionMetadataInput,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this.mintTo(\n      await this.contractWrapper.getSignerAddress(),\n      metadataWithSupply,\n    );\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  public async mintTo(\n    to: string,\n    metadataWithSupply: EditionMetadataInput,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    const uri = await this.storage.uploadMetadata(\n      CommonNFTInput.parse(metadataWithSupply.metadata),\n    );\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      ethers.constants.MaxUint256,\n      uri,\n      metadataWithSupply.supply,\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TokenMinted event not found\");\n    }\n    const id = event[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt,\n      data: () => this.get(id.toString()),\n    };\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to the connected wallet\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  public async mintAdditionalSupply(\n    tokenId: BigNumberish,\n    additionalSupply: BigNumberish,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    return this.mintAdditionalSupplyTo(\n      await this.contractWrapper.getSignerAddress(),\n      tokenId,\n      additionalSupply,\n    );\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  public async mintAdditionalSupplyTo(\n    to: string,\n    tokenId: BigNumberish,\n    additionalSupply: BigNumberish,\n  ): Promise<TransactionResultWithId<EditionMetadata>> {\n    const metadata = await this.getTokenMetadata(tokenId);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [\n      to,\n      tokenId,\n      metadata.uri,\n      additionalSupply,\n    ]);\n    return {\n      id: BigNumber.from(tokenId),\n      receipt,\n      data: () => this.get(tokenId),\n    };\n  }\n\n  /**\n   * Mint Many NFTs for the connected wallet\n   *\n   * @remarks See {@link Edition.mintBatchTo}\n   */\n  public async mintBatch(\n    metadatas: EditionMetadataInput[],\n  ): Promise<TransactionResultWithId<EditionMetadata>[]> {\n    return this.mintBatchTo(\n      await this.contractWrapper.getSignerAddress(),\n      metadatas,\n    );\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  public async mintBatchTo(\n    to: string,\n    metadataWithSupply: EditionMetadataInput[],\n  ): Promise<TransactionResultWithId<EditionMetadata>[]> {\n    const metadatas = metadataWithSupply.map((a) => a.metadata);\n    const supplies = metadataWithSupply.map((a) => a.supply);\n    const { metadataUris: uris } = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n    );\n    const encoded = uris.map((uri, index) =>\n      this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        ethers.constants.MaxUint256,\n        uri,\n        supplies[index],\n      ]),\n    );\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs<TokensMintedEvent>(\n      \"TokensMinted\",\n      receipt.logs,\n    );\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n    return events.map((e) => {\n      const id = e.args.tokenIdMinted;\n      return {\n        id,\n        receipt,\n        data: () => this.get(id),\n      };\n    });\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc1155ContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema);\n\nexport const TokenErc1155ContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema);\n\nexport const TokenErc1155ContractDeploy = TokenErc1155ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc1155ContractSchema = {\n  deploy: TokenErc1155ContractDeploy,\n  output: TokenErc1155ContractOutput,\n  input: TokenErc1155ContractInput,\n};\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonSymbolSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const TokenErc20ContractInput =\n  CommonContractSchema.merge(CommonSymbolSchema);\n\nexport const TokenErc20ContractOutput =\n  CommonContractOutputSchema.merge(CommonSymbolSchema);\n\nexport const TokenErc20ContractDeploy = TokenErc20ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const TokenErc20ContractSchema = {\n  deploy: TokenErc20ContractDeploy,\n  output: TokenErc20ContractOutput,\n  input: TokenErc20ContractInput,\n};\n","import { TokenErc20ContractSchema } from \"../schema/contracts/token-erc20\";\nimport { TokenERC20, TokenERC20__factory } from \"@thirdweb-dev/contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { Erc20 } from \"../core/classes/erc-20\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { TokenMintInput } from \"../schema/tokens/token\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { GasCostEstimator } from \"../core/classes\";\nimport { Amount, CurrencyValue } from \"../types\";\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getToken(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Token extends Erc20<TokenERC20> {\n  static contractType = \"token\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractFactory = TokenERC20__factory;\n  /**\n   * @internal\n   */\n  static schema = TokenErc20ContractSchema;\n\n  public metadata: ContractMetadata<TokenERC20, typeof Token.schema>;\n  public roles: ContractRoles<TokenERC20, typeof Token.contractRoles[number]>;\n  public encoder: ContractEncoder<TokenERC20>;\n  public estimator: GasCostEstimator<TokenERC20>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<TokenERC20>(\n      network,\n      address,\n      Token.contractFactory.abi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Token.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  public async getVoteBalance(): Promise<CurrencyValue> {\n    return await this.getVoteBalanceOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  public async getVoteBalanceOf(account: string): Promise<CurrencyValue> {\n    return await this.getValue(\n      await this.contractWrapper.readContract.getVotes(account),\n    );\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegation(): Promise<string> {\n    return await this.getDelegationOf(\n      await this.contractWrapper.getSignerAddress(),\n    );\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegationOf(account: string): Promise<string> {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  public async mint(amount: Amount): Promise<TransactionResult> {\n    return this.mintTo(await this.contractWrapper.getSignerAddress(), amount);\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  public async mintTo(to: string, amount: Amount): Promise<TransactionResult> {\n    const amountWithDecimals = ethers.utils.parseUnits(\n      BigNumber.from(amount).toString(),\n      await this.contractWrapper.readContract.decimals(),\n    );\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"mintTo\", [\n        to,\n        amountWithDecimals,\n      ]),\n    };\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  public async mintBatchTo(args: TokenMintInput[]): Promise<TransactionResult> {\n    const encoded = [];\n    for (const arg of args) {\n      const amountWithDecimals = ethers.utils.parseUnits(\n        BigNumber.from(arg.amount).toString(),\n        await this.contractWrapper.readContract.decimals(),\n      );\n      encoded.push(\n        this.contractWrapper.readContract.interface.encodeFunctionData(\n          \"mintTo\",\n          [arg.toAddress, amountWithDecimals],\n        ),\n      );\n    }\n    return { receipt: await this.contractWrapper.multiCall(encoded) };\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  public async delegateTo(\n    delegateeAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [\n        delegateeAddress,\n      ]),\n    };\n  }\n}\n","import {\n  IERC20__factory,\n  VoteERC20,\n  VoteERC20__factory,\n} from \"@thirdweb-dev/contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { VoteContractSchema } from \"../schema/contracts/vote\";\nimport {\n  Proposal,\n  ProposalExecutable,\n  ProposalVote,\n  VoteSettings,\n} from \"../types/vote\";\nimport { fetchCurrencyMetadata, fetchCurrencyValue } from \"../common/currency\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { VoteType } from \"../enums\";\nimport deepEqual from \"deep-equal\";\nimport { CurrencyValue } from \"../types/currency\";\nimport { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { GasCostEstimator } from \"../core/classes\";\nimport { ProposalCreatedEvent } from \"@thirdweb-dev/contracts/dist/VoteERC20\";\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getVote(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Vote implements UpdateableNetwork {\n  static contractType = \"vote\" as const;\n  static contractFactory = VoteERC20__factory;\n  /**\n   * @internal\n   */\n  static schema = VoteContractSchema;\n\n  private contractWrapper: ContractWrapper<VoteERC20>;\n  private storage: IStorage;\n\n  public metadata: ContractMetadata<VoteERC20, typeof Vote.schema>;\n  public encoder: ContractEncoder<VoteERC20>;\n  public estimator: GasCostEstimator<VoteERC20>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<VoteERC20>(\n      network,\n      address,\n      Vote.contractFactory.abi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Vote.schema,\n      this.storage,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  public async get(proposalId: BigNumberish): Promise<Proposal> {\n    const all = await this.getAll();\n    const proposals = all.filter((p) =>\n      deepEqual(BigNumber.from(p.proposalId), BigNumber.from(proposalId)),\n    );\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  public async getAll(): Promise<Proposal[]> {\n    return Promise.all(\n      (await this.contractWrapper.readContract.getAllProposals()).map(\n        async (data) => ({\n          proposalId: data.proposalId,\n          proposer: data.proposer,\n          description: data.description,\n          startBlock: data.startBlock,\n          endBlock: data.endBlock,\n          state: await this.contractWrapper.readContract.state(data.proposalId),\n          votes: await this.getProposalVotes(data.proposalId),\n          executions: data[3].map((c, i) => ({\n            toAddress: data.targets[i],\n            nativeTokenValue: c,\n            transactionData: data.calldatas[i],\n          })),\n        }),\n      ),\n    );\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  public async getProposalVotes(\n    proposalId: BigNumber,\n  ): Promise<ProposalVote[]> {\n    const votes = await this.contractWrapper.readContract.proposalVotes(\n      proposalId,\n    );\n    return [\n      {\n        type: VoteType.Against,\n        label: \"Against\",\n        count: votes.againstVotes,\n      },\n      {\n        type: VoteType.For,\n        label: \"For\",\n        count: votes.forVotes,\n      },\n      {\n        type: VoteType.Abstain,\n        label: \"Abstain\",\n        count: votes.abstainVotes,\n      },\n    ];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  public async hasVoted(\n    proposalId: string,\n    account?: string,\n  ): Promise<boolean> {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.readContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  public async canExecute(proposalId: string): Promise<boolean> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.contractWrapper\n        .callStatic()\n        .execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<CurrencyValue> {\n    const balance = await this.contractWrapper.readContract.provider.getBalance(\n      this.contractWrapper.readContract.address,\n    );\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: ethers.utils.formatUnits(balance, 18),\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    const erc20 = IERC20__factory.connect(\n      tokenAddress,\n      this.contractWrapper.getProvider(),\n    );\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      tokenAddress,\n      await erc20.balanceOf(this.contractWrapper.readContract.address),\n    );\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  private async ensureExists(proposalId: string): Promise<void> {\n    try {\n      await this.contractWrapper.readContract.state(proposalId);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  public async settings(): Promise<VoteSettings> {\n    const [\n      votingDelay,\n      votingPeriod,\n      votingTokenAddress,\n      votingQuorumFraction,\n      proposalTokenThreshold,\n    ] = await Promise.all([\n      this.contractWrapper.readContract.votingDelay(),\n      this.contractWrapper.readContract.votingPeriod(),\n      this.contractWrapper.readContract.token(),\n      this.contractWrapper.readContract.quorumNumerator(),\n      this.contractWrapper.readContract.proposalThreshold(),\n    ]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(\n      this.contractWrapper.getProvider(),\n      votingTokenAddress,\n    );\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString(),\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to setup in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal and the transaction receipt.\n   */\n  public async propose(\n    description: string,\n    executions?: ProposalExecutable[],\n  ): Promise<TransactionResultWithId> {\n    if (!executions) {\n      executions = [\n        {\n          toAddress: this.contractWrapper.readContract.address,\n          nativeTokenValue: 0,\n          transactionData: \"0x\",\n        },\n      ];\n    }\n    const tos = executions.map((p) => p.toAddress);\n    const values = executions.map((p) => p.nativeTokenValue);\n    const datas = executions.map((p) => p.transactionData);\n    const receipt = await this.contractWrapper.sendTransaction(\"propose\", [\n      tos,\n      values,\n      datas,\n      description,\n    ]);\n    const event = this.contractWrapper.parseLogs<ProposalCreatedEvent>(\n      \"ProposalCreated\",\n      receipt?.logs,\n    );\n    return {\n      id: event[0].args.proposalId,\n      receipt,\n    };\n  }\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  public async vote(\n    proposalId: string,\n    voteType: VoteType,\n    reason = \"\",\n  ): Promise<TransactionResult> {\n    await this.ensureExists(proposalId);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"castVoteWithReason\",\n        [proposalId, voteType, reason],\n      ),\n    };\n  }\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID ofthe proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  public async execute(proposalId: string): Promise<TransactionResult> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"execute\", [\n        tos,\n        values,\n        datas,\n        descriptionHash,\n      ]),\n    };\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport {\n  AddressSchema,\n  BigNumberishSchema,\n  BigNumberSchema,\n  PercentSchema,\n} from \"../shared\";\nimport { z } from \"zod\";\n\nexport const VoteSettingsInputSchema = z.object({\n  voting_delay_in_blocks: z.number().min(0).default(0),\n  voting_period_in_blocks: z.number().min(1).default(1),\n  voting_token_address: AddressSchema,\n  voting_quorum_fraction: PercentSchema.default(0),\n  proposal_token_threshold: BigNumberishSchema.default(1),\n});\n\nexport const VoteSettingsOuputSchema = VoteSettingsInputSchema.extend({\n  proposal_token_threshold: BigNumberSchema,\n});\n\nexport const VoteContractInput = CommonContractSchema.merge(\n  VoteSettingsInputSchema,\n);\n\nexport const VoteContractOutput = CommonContractOutputSchema.merge(\n  VoteSettingsOuputSchema,\n);\n\nexport const VoteContractDeploy = VoteContractInput.merge(\n  CommonTrustedForwarderSchema,\n);\n\nexport const VoteContractSchema = {\n  deploy: VoteContractDeploy,\n  output: VoteContractOutput,\n  input: VoteContractInput,\n};\n\nexport const ProposalOutputSchema = z.object({\n  proposalId: BigNumberSchema,\n  proposer: z.string(),\n  targets: z.array(z.string()),\n  values: z.array(BigNumberSchema),\n  signatures: z.array(z.string()),\n  calldatas: z.array(z.string()),\n  startBlock: BigNumberSchema,\n  endBlock: BigNumberSchema,\n  description: z.string(),\n});\n","import { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport {\n  IERC20__factory,\n  Split as SplitContract,\n  Split__factory,\n} from \"@thirdweb-dev/contracts\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n} from \"../core\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { CurrencyValue } from \"../types/currency\";\nimport { fetchCurrencyValue } from \"../common/currency\";\nimport { BigNumber } from \"ethers\";\nimport { SplitRecipient } from \"../types/SplitRecipient\";\nimport { SplitsContractSchema } from \"../schema/contracts/splits\";\nimport { GasCostEstimator } from \"../core/classes\";\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getSplit(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Split implements UpdateableNetwork {\n  static contractType = \"split\" as const;\n  static contractFactory = Split__factory;\n  /**\n   * @internal\n   */\n  static schema = SplitsContractSchema;\n\n  private contractWrapper: ContractWrapper<SplitContract>;\n  private storage: IStorage;\n\n  public metadata: ContractMetadata<SplitContract, typeof Split.schema>;\n  public encoder: ContractEncoder<SplitContract>;\n  public estimator: GasCostEstimator<SplitContract>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<SplitContract>(\n      network,\n      address,\n      Split.contractFactory.abi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Split.schema,\n      this.storage,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  public async getAllRecipients(): Promise<SplitRecipient[]> {\n    const recipients: SplitRecipient[] = [];\n    let index = BigNumber.from(0);\n    const totalRecipients =\n      await this.contractWrapper.readContract.payeeCount();\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.readContract.payee(\n          index,\n        );\n        recipients.push(\n          await this.getRecipientSplitPercentage(recipientAddress),\n        );\n        index = index.add(1);\n      } catch (err: any) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\n          \"method\" in err &&\n          (err[\"method\"] as string).toLowerCase().includes(\"payee(uint256)\")\n        ) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  public async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: BigNumber } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  public async balanceOfTokenAllRecipients(tokenAddress: string) {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: CurrencyValue } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(\n        recipient.address,\n        tokenAddress,\n      );\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    const walletBalance =\n      await this.contractWrapper.readContract.provider.getBalance(\n        this.getAddress(),\n      );\n    const totalReleased = await this.contractWrapper.readContract[\n      \"totalReleased()\"\n    ]();\n    const totalReceived = walletBalance.add(totalReleased);\n\n    return this._pendingPayment(\n      address,\n      totalReceived,\n      await this.contractWrapper.readContract[\"released(address)\"](address),\n    );\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue> {\n    const erc20 = IERC20__factory.connect(\n      tokenAddress,\n      this.contractWrapper.getProvider(),\n    );\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\n      \"totalReleased(address)\"\n    ](tokenAddress);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(\n      walletAddress,\n      totalReceived,\n      await this.contractWrapper.readContract[\"released(address,address)\"](\n        tokenAddress,\n        walletAddress,\n      ),\n    );\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      tokenAddress,\n      value,\n    );\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  public async getRecipientSplitPercentage(\n    address: string,\n  ): Promise<SplitRecipient> {\n    const [totalShares, walletsShares] = await Promise.all([\n      this.contractWrapper.readContract.totalShares(),\n      this.contractWrapper.readContract.shares(address),\n    ]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage:\n        walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() /\n        1e5,\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  public async withdraw(walletAddress: string): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address)\", [\n        walletAddress,\n      ]),\n    };\n  }\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  public async withdrawToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"release(address,address)\",\n        [tokenAddress, walletAddress],\n      ),\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  public async distribute(): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute()\", []),\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  public async distributeToken(\n    tokenAddress: string,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"distribute(address)\",\n        [tokenAddress],\n      ),\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private async _pendingPayment(\n    address: string,\n    totalReceived: BigNumber,\n    alreadyReleased: BigNumber,\n  ): Promise<BigNumber> {\n    const addressReceived = totalReceived.mul(\n      await this.contractWrapper.readContract.shares(address),\n    );\n    const totalRoyaltyAvailable = addressReceived.div(\n      await this.contractWrapper.readContract.totalShares(),\n    );\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { z } from \"zod\";\nimport { AddressSchema, BasisPointsSchema } from \"../shared\";\n\nconst SplitRecipientInputSchema = z.object({\n  address: AddressSchema,\n  sharesBps: BasisPointsSchema.gt(0, \"Shares must be greater than 0\"),\n});\n\nconst SplitRecipientOuputSchema = SplitRecipientInputSchema.extend({\n  address: AddressSchema,\n  sharesBps: BasisPointsSchema,\n});\n\nexport const SplitsContractInput = CommonContractSchema.extend({\n  recipients: z\n    .array(SplitRecipientInputSchema)\n    .default([])\n    .superRefine((val, context) => {\n      const addressMap: Record<string, boolean> = {};\n      let totalShares = 0;\n      for (let index = 0; index < val.length; index++) {\n        const entry = val[index];\n        if (addressMap[entry.address]) {\n          context.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: `Duplicate address.`,\n            path: [index, `address`],\n          });\n        }\n        addressMap[entry.address] = true;\n        totalShares += entry.sharesBps;\n        if (totalShares > 10_000) {\n          context.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: `Total shares cannot go over 100%.`,\n            path: [index, `sharesBps`],\n          });\n        }\n      }\n      if (totalShares !== 10_000) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Total shares need to add up to 100%. Total shares are currently ${\n            totalShares / 100\n          }%`,\n          path: [],\n        });\n      }\n    }),\n});\n\nexport const SplitsContractOutput = CommonContractOutputSchema.extend({\n  recipients: z.array(SplitRecipientOuputSchema),\n});\n\nexport const SplitsContractDeploy = SplitsContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(SplitsContractInput)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const SplitsContractSchema = {\n  deploy: SplitsContractDeploy,\n  output: SplitsContractOutput,\n  input: SplitsContractInput,\n};\n","import {\n  Marketplace as MarketplaceContract,\n  Marketplace__factory,\n} from \"@thirdweb-dev/contracts\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n} from \"../core\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { MarketplaceContractSchema } from \"../schema/contracts/marketplace\";\nimport { AuctionListing, DirectListing } from \"../types/marketplace\";\nimport { ListingType } from \"../enums\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { ListingNotFoundError } from \"../common\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { MarketplaceFilter } from \"../types/marketplace/MarketPlaceFilter\";\nimport { getRoleHash } from \"../common/role\";\nimport { MarketplaceDirect } from \"../core/classes/marketplace-direct\";\nimport { MarketplaceAuction } from \"../core/classes/marketplace-auction\";\nimport { GasCostEstimator } from \"../core/classes\";\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getMarketplace(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Marketplace implements UpdateableNetwork {\n  static contractType = \"marketplace\" as const;\n  static contractRoles = [\"admin\", \"lister\", \"asset\"] as const;\n  static contractFactory = Marketplace__factory;\n  /**\n   * @internal\n   */\n  static schema = MarketplaceContractSchema;\n\n  private contractWrapper: ContractWrapper<MarketplaceContract>;\n  private storage: IStorage;\n\n  public encoder: ContractEncoder<MarketplaceContract>;\n  public estimator: GasCostEstimator<MarketplaceContract>;\n  public metadata: ContractMetadata<\n    MarketplaceContract,\n    typeof Marketplace.schema\n  >;\n  public roles: ContractRoles<\n    MarketplaceContract,\n    typeof Marketplace.contractRoles[number]\n  >;\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the NFT contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // in how many seconds will the listing open up\n   *   startTimeInSeconds: 0,\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const listingId = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   */\n  public direct: MarketplaceDirect;\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // in how many seconds with the listing open up\n   *   startTimeInSeconds: 0,\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const listingId = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 2.6;\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  public auction: MarketplaceAuction;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<MarketplaceContract>(\n      network,\n      address,\n      Marketplace.contractFactory.abi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Marketplace.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(\n      this.contractWrapper,\n      Marketplace.contractRoles,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.direct = new MarketplaceDirect(this.contractWrapper, this.storage);\n    this.auction = new MarketplaceAuction(this.contractWrapper, this.storage);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Convenience function to get either a direct or auction listing\n   *\n   * @param listingId - the listing id\n   * @returns either a direct or auction listing\n   */\n  public async getListing(\n    listingId: BigNumberish,\n  ): Promise<AuctionListing | DirectListing> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.assetContract === AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    switch (listing.listingType) {\n      case ListingType.Auction: {\n        return await this.auction.mapListing(listing);\n      }\n      case ListingType.Direct: {\n        return await this.direct.mapListing(listing);\n      }\n      default: {\n        throw new Error(`Unknown listing type: ${listing.listingType}`);\n      }\n    }\n  }\n\n  /**\n   * Get all active listings\n   *\n   * @remarks Fetch all the active listings from this marketplace contract.\n   * @example\n   * ```javascript\n   * const listings = await contract.getActiveListings();\n   * const priceOfFirstActiveListing = listings[0].price;\n   * ```\n   */\n  public async getActiveListings(): Promise<\n    (AuctionListing | DirectListing)[]\n  > {\n    const rawListings = await this.getAllListingsNoFilter();\n    return rawListings.filter((l) => {\n      return (\n        (l.type === ListingType.Auction &&\n          BigNumber.from(l.endTimeInEpochSeconds).gt(\n            BigNumber.from(Math.floor(Date.now() / 1000)),\n          )) ||\n        (l.type === ListingType.Direct && l.quantity > 0)\n      );\n    });\n  }\n\n  /**\n   * Get all the listings\n   *\n   * @remarks Fetch all the listings from this marketplace contract, including sold ones.\n   * @example\n   * ```javascript\n   * const listings = await contract.getAllListings();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filters\n   */\n  public async getAllListings(\n    filter?: MarketplaceFilter,\n  ): Promise<(AuctionListing | DirectListing)[]> {\n    let rawListings = await this.getAllListingsNoFilter();\n\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(\n          (seller) =>\n            seller.sellerAddress.toString().toLowerCase() ===\n            filter?.seller?.toString().toLowerCase(),\n        );\n      }\n      if (filter.tokenContract) {\n        if (!filter.tokenId) {\n          rawListings = rawListings.filter(\n            (tokenContract) =>\n              tokenContract.assetContractAddress.toString().toLowerCase() ===\n              filter?.tokenContract?.toString().toLowerCase(),\n          );\n        } else {\n          rawListings = rawListings.filter(\n            (tokenContract) =>\n              tokenContract.assetContractAddress.toString().toLowerCase() ===\n                filter?.tokenContract?.toString().toLowerCase() &&\n              tokenContract.tokenId.toString() === filter?.tokenId?.toString(),\n          );\n        }\n      }\n      if (filter.start !== undefined) {\n        const start = BigNumber.from(filter.start).toNumber();\n        rawListings = rawListings.filter((_, index) => index >= start);\n        if (filter.count !== undefined && rawListings.length > filter.count) {\n          rawListings = rawListings.slice(\n            0,\n            BigNumber.from(filter.count).toNumber(),\n          );\n        }\n      }\n    }\n    return rawListings.filter((l) => l !== undefined) as (\n      | AuctionListing\n      | DirectListing\n    )[];\n  }\n\n  /**\n   * @internal\n   */\n  public getAll = this.getAllListings;\n\n  /**\n   * Get the total number of Listings\n   * @returns the total number listings on the marketplace\n   * @public\n   */\n  public async getTotalCount(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.totalListings();\n  }\n\n  /**\n   * Get whether listing is restricted only to addresses with the Lister role\n   */\n  public async isRestrictedToListerRoleOnly(): Promise<boolean> {\n    const anyoneCanList = await this.contractWrapper.readContract.hasRole(\n      getRoleHash(\"lister\"),\n      AddressZero,\n    );\n    return !anyoneCanList;\n  }\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  public async getBidBufferBps(): Promise<BigNumber> {\n    return this.contractWrapper.readContract.bidBufferBps();\n  }\n\n  /**\n   * get the buffer time in seconds between offers\n   */\n  public async getTimeBufferInSeconds(): Promise<BigNumber> {\n    return this.contractWrapper.readContract.timeBuffer();\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Purchase NFTs\n   * @remarks Buy a Direct or Auction listing on your marketplace.\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.buyoutListing(listingId, quantityDesired);\n   * ```\n   * @param listingId - the listing ID of the listing you want to buy\n   * @param quantityDesired - the quantity that you want to buy (for ERC1155 tokens)\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet (for direct listings only)\n   */\n  public async buyoutListing(\n    listingId: BigNumberish,\n    quantityDesired?: BigNumberish,\n    receiver?: string,\n  ): Promise<TransactionResult> {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    switch (listing.listingType) {\n      case ListingType.Direct: {\n        invariant(\n          quantityDesired !== undefined,\n          \"quantityDesired is required when buying out a direct listing\",\n        );\n        return await this.direct.buyoutListing(\n          listingId,\n          quantityDesired,\n          receiver,\n        );\n      }\n      case ListingType.Auction: {\n        return await this.auction.buyoutListing(listingId);\n      }\n      default:\n        throw Error(`Unknown listing type: ${listing.listingType}`);\n    }\n  }\n\n  /**\n   * Set the Auction bid buffer\n   * @remarks A percentage (e.g. 5%) in basis points (5% = 500, 100% = 10000). A new bid is considered to be a winning bid only if its bid amount is at least the bid buffer (e.g. 5%) greater than the previous winning bid. This prevents buyers from making very slightly higher bids to win the auctioned items.\n   * @example\n   * ```javascript\n   * // the bid buffer in basis points\n   * const bufferBps = 500;\n   * await contract.setBidBufferBps(bufferBps);\n   * ```\n   * @param bufferBps - the bps value\n   */\n  public async setBidBufferBps(bufferBps: BigNumberish): Promise<void> {\n    await this.roles.verify(\n      [\"admin\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const timeBuffer = await this.getTimeBufferInSeconds();\n    await this.contractWrapper.sendTransaction(\"setAuctionBuffers\", [\n      timeBuffer,\n      BigNumber.from(bufferBps),\n    ]);\n  }\n\n  /**\n   * Set the Auction Time buffer:\n   * @remarks Measured in seconds (e.g. 15 minutes or 900 seconds). If a winning bid is made within the buffer of the auction closing (e.g. 15 minutes within the auction closing), the auction's closing time is increased by the buffer to prevent buyers from making last minute winning bids, and to give time to other buyers to make a higher bid if they wish to.\n   * @example\n   * ```javascript\n   * // the time buffer in seconds\n   * const bufferInSeconds = 60;\n   * await contract.setTimeBufferInSeconds(bufferInSeconds);\n   * ```\n   * @param bufferInSeconds - the seconds value\n   */\n  public async setTimeBufferInSeconds(\n    bufferInSeconds: BigNumberish,\n  ): Promise<void> {\n    await this.roles.verify(\n      [\"admin\"],\n      await this.contractWrapper.getSignerAddress(),\n    );\n\n    const bidBuffer = await this.getBidBufferBps();\n    await this.contractWrapper.sendTransaction(\"setAuctionBuffers\", [\n      BigNumber.from(bufferInSeconds),\n      bidBuffer,\n    ]);\n  }\n\n  /**\n   * Restrict listing NFTs only from the specified NFT contract address.\n   * It is possible to allow listing from multiple contract addresses.\n   * @param contractAddress - the NFT contract address\n   */\n  public async allowListingFromSpecificAssetOnly(contractAddress: string) {\n    const encoded = [];\n    const members = await this.roles.get(\"asset\");\n    if (members.includes(AddressZero)) {\n      encoded.push(\n        this.encoder.encode(\"revokeRole\", [getRoleHash(\"asset\"), AddressZero]),\n      );\n    }\n    encoded.push(\n      this.encoder.encode(\"grantRole\", [getRoleHash(\"asset\"), contractAddress]),\n    );\n\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /**\n   * Allow listings from any NFT contract\n   */\n  public async allowListingFromAnyAsset() {\n    const encoded = [];\n    const members = await this.roles.get(\"asset\");\n    for (const addr in members) {\n      encoded.push(\n        this.encoder.encode(\"revokeRole\", [getRoleHash(\"asset\"), addr]),\n      );\n    }\n    encoded.push(\n      this.encoder.encode(\"grantRole\", [getRoleHash(\"asset\"), AddressZero]),\n    );\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  private async getAllListingsNoFilter(): Promise<\n    (AuctionListing | DirectListing)[]\n  > {\n    const listings = await Promise.all(\n      Array.from(\n        Array(\n          (await this.contractWrapper.readContract.totalListings()).toNumber(),\n        ).keys(),\n      ).map(async (i) => {\n        let listing;\n\n        try {\n          listing = await this.getListing(i);\n        } catch (err) {\n          return undefined;\n        }\n\n        if (listing.type === ListingType.Auction) {\n          return listing;\n        }\n\n        const valid = await this.direct.isStillValidListing(listing);\n        if (!valid) {\n          return undefined;\n        }\n\n        return listing;\n      }),\n    );\n    return listings.filter((l) => l !== undefined) as (\n      | AuctionListing\n      | DirectListing\n    )[];\n  }\n\n  // TODO: Complete method implementation with subgraph\n  // /**\n  //  * @beta - This method is not yet complete.\n  //  *\n  //  * @param listingId\n  //  * @returns\n  //  */\n  // public async getActiveOffers(listingId: BigNumberish): Promise<Offer[]> {\n  //   const listing = await this.validateDirectListing(BigNumber.from(listingId));\n\n  //   const offers = await this.readOnlyContract.offers(listing.id, \"\");\n\n  //   return await Promise.all(\n  //     offers.map(async (offer: any) => {\n  //       return await this.mapOffer(BigNumber.from(listingId), offer);\n  //     }),\n  //   );\n  // }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const MarketplaceContractInput = CommonContractSchema;\n\nexport const MarketplaceContractOutput = CommonContractOutputSchema;\n\nexport const MarketplaceContractDeploy = MarketplaceContractInput.merge(\n  CommonPlatformFeeSchema,\n).merge(CommonTrustedForwarderSchema);\n\nexport const MarketplaceContractSchema = {\n  deploy: MarketplaceContractDeploy,\n  output: MarketplaceContractOutput,\n  input: MarketplaceContractInput,\n};\n","import { UpdateableNetwork } from \"../core/interfaces/contract\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport {\n  IStorage,\n  NetworkOrSignerOrProvider,\n  TransactionResult,\n  TransactionResultWithId,\n} from \"../core\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport {\n  IERC1155__factory,\n  IERC20__factory,\n  Pack as PackContract,\n  Pack__factory,\n} from \"@thirdweb-dev/contracts\";\nimport { PacksContractSchema } from \"../schema/contracts/packs\";\nimport { ContractRoles } from \"../core/classes/contract-roles\";\nimport { NFTMetadata } from \"../schema/tokens/common\";\nimport {\n  PackAddedEvent,\n  PackOpenRequestedEvent,\n} from \"@thirdweb-dev/contracts/dist/Pack\";\nimport { BigNumber, BigNumberish, BytesLike, ethers } from \"ethers\";\nimport { fetchTokenMetadataForContract } from \"../common/nft\";\nimport {\n  IPackBatchArgs,\n  IPackCreateArgs,\n  PackMetadata,\n  PackMetadataWithBalance,\n  PackNFTMetadata,\n} from \"../types/packs\";\nimport { NotFoundError } from \"../common\";\nimport { CurrencyValue } from \"../types/currency\";\nimport { fetchCurrencyValue } from \"../common/currency\";\nimport { ChainlinkVrf } from \"../constants/chainlink\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { GasCostEstimator } from \"../core/classes\";\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getPack(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class Pack implements UpdateableNetwork {\n  static contractType = \"pack\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"pauser\", \"transfer\"] as const;\n  static contractFactory = Pack__factory;\n  /**\n   * @internal\n   */\n  static schema = PacksContractSchema;\n\n  private contractWrapper: ContractWrapper<PackContract>;\n  private storage: IStorage;\n\n  public metadata: ContractMetadata<PackContract, typeof Pack.schema>;\n  public roles: ContractRoles<PackContract, typeof Pack.contractRoles[number]>;\n  public encoder: ContractEncoder<PackContract>;\n  public estimator: GasCostEstimator<PackContract>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalty.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<PackContract, typeof Pack.schema>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<PackContract>(\n      network,\n      address,\n      Pack.contractFactory.abi,\n      options,\n    ),\n  ) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      Pack.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n\n  onNetworkUpdated(network: NetworkOrSignerOrProvider) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  getAddress(): string {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a pack by id\n   * @param packId - the id of the pack to fetch\n   * @returns the pack metadata\n   */\n  public async get(packId: string): Promise<PackMetadata> {\n    const [meta, state, supply] = await Promise.all([\n      fetchTokenMetadataForContract(\n        this.getAddress(),\n        this.contractWrapper.getProvider(),\n        packId,\n        this.storage,\n      ),\n      this.contractWrapper.readContract.packs(packId),\n      this.contractWrapper.readContract\n        .totalSupply(packId)\n        .catch(() => BigNumber.from(\"0\")),\n    ]);\n    return {\n      id: packId,\n      metadata: meta,\n      creator: state.creator,\n      currentSupply: supply,\n      openStart: state.openStart.gt(0)\n        ? new Date(state.openStart.toNumber() * 1000)\n        : null,\n    };\n  }\n\n  /**\n   * Get Pack Data\n   *\n   * @remarks Get data associated with every pack in this contract.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getAll(): Promise<PackMetadata[]> {\n    const maxId = (\n      await this.contractWrapper.readContract.nextTokenId()\n    ).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * Get Pack Reward Data\n   *\n   * @remarks Get data associated with the rewards inside a specified pack\n   *\n   * @example\n   * ```javascript\n   * // The pack ID of the pack whos rewards you want to get\n   * const packId = 0;\n   *\n   * const nfts = await contract.getNFTs(packId);\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  public async getNFTs(packId: string): Promise<PackNFTMetadata[]> {\n    const packReward =\n      await this.contractWrapper.readContract.getPackWithRewards(packId);\n    if (!packReward.source) {\n      throw new NotFoundError();\n    }\n    const rewards = await Promise.all(\n      packReward.tokenIds.map((tokenId) =>\n        fetchTokenMetadataForContract(\n          packReward.source,\n          this.contractWrapper.getProvider(),\n          tokenId.toString(),\n          this.storage,\n        ),\n      ),\n    );\n    return rewards.map((reward, i) => ({\n      supply: packReward.amountsPacked[i],\n      metadata: reward,\n    }));\n  }\n\n  /**\n   * Get Pack Balance\n   *\n   * @remarks Get a wallets pack balance (number of a specific packs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check pack balance\n   * const address = \"{{wallet_address}}\";\n   * // The token ID of the pack you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await contract.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.balanceOf(\n      await this.contractWrapper.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.contractWrapper.readContract.isApprovedForAll(\n      address,\n      operator,\n    );\n  }\n\n  public async getLinkBalance(): Promise<CurrencyValue> {\n    const chainId = await this.contractWrapper.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = IERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.contractWrapper.getProvider(),\n    );\n    return await fetchCurrencyValue(\n      this.contractWrapper.getProvider(),\n      chainlink.linkTokenAddress,\n      await erc20.balanceOf(this.getAddress()),\n    );\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of PackMetadataWithBalance objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<PackMetadataWithBalance[]> {\n    const address = _address\n      ? _address\n      : await this.contractWrapper.getSignerAddress();\n    const maxId = await this.contractWrapper.readContract.nextTokenId();\n    const balances = await this.contractWrapper.readContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async ({ tokenId, balance }) => {\n        const token = await this.get(tokenId.toString());\n        return { ...token, ownedByAddress: balance };\n      }),\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Open Pack\n   *\n   * @remarks Open a pack to burn it and obtain the reward asset inside.\n   *\n   * @example\n   * ```javascript\n   * // The pack ID of the asset you want to buy\n   * const packId = \"0\";\n   * const tx = await contract.open(packId);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const packId = tx.id; // the id of the pack that was opened\n   * const rewards = tx.data(); // the contents of the opened pack\n   * ```\n   */\n  public async open(\n    packId: string,\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [\n      packId,\n    ]);\n    const logs = this.contractWrapper.parseLogs<PackOpenRequestedEvent>(\n      \"PackOpenRequested\",\n      receipt?.logs,\n    );\n    if (logs.length === 0) {\n      throw new Error(\"Failed to open pack\");\n    }\n    const event = logs[0];\n\n    const requestId = event.args.requestId;\n    const opener = event.args.opener;\n\n    // TODO type this\n    const fulfillEvent: any = await new Promise((resolve) => {\n      this.contractWrapper.readContract.once(\n        this.contractWrapper.readContract.filters.PackOpenFulfilled(\n          null,\n          opener,\n        ),\n        (_packId, _opener, _requestId, rewardContract, rewardIds) => {\n          if (requestId === _requestId) {\n            resolve({\n              packId: _packId,\n              opener: _opener,\n              requestId,\n              rewardContract,\n              rewardIds,\n            });\n          }\n        },\n      );\n    });\n\n    const { rewardIds, rewardContract } = fulfillEvent;\n\n    return rewardIds.map((rewardId: BigNumber) => ({\n      id: packId,\n      receipt,\n      data: () =>\n        fetchTokenMetadataForContract(\n          rewardContract,\n          this.contractWrapper.getProvider(),\n          rewardId.toString(),\n          this.storage,\n        ),\n    }));\n  }\n\n  /**\n   * Create Pack\n   *\n   * @remarks Create a new pack with its own rewards.\n   *\n   * @example\n   * ```javascript\n   * // Data to create the pack\n   * const pack = {\n   *   // The address of the contract that holds the rewards you want to include\n   *   assetContract: \"0x...\",\n   *   // The metadata of the pack\n   *   metadata: {\n   *     name: \"Cool Pack\",\n   *     description: \"This is a cool pack\",\n   *     // This can be an image url or image file\n   *     image: readFileSync(\"path/to/image.png\"),\n   *   },\n   *   // The NFTs you want to include in the pack\n   *   assets: [\n   *     {\n   *       tokenId: 0, // The token ID of the asset you want to add\n   *       amount: 1, // The amount of the asset you want to add\n   *     }, {\n   *       tokenId: 1,\n   *       amount: 1,\n   *     }\n   *   ],\n   * };\n   *\n   * await contract.create(pack);\n   * ```\n   *\n   * @param args - Args for the pack creation\n   * @returns - The newly created pack metadata\n   */\n  public async create(\n    args: IPackCreateArgs,\n  ): Promise<TransactionResultWithId<PackMetadata>> {\n    const asset = IERC1155__factory.connect(\n      args.assetContract,\n      this.contractWrapper.getSigner() || this.contractWrapper.getProvider(),\n    );\n\n    const from = await this.contractWrapper.getSignerAddress();\n    const ids = args.assets.map((a) => a.tokenId);\n    const amounts = args.assets.map((a) => a.amount);\n    const uri = await this.storage.uploadMetadata(args.metadata);\n\n    const packParams = ethers.utils.defaultAbiCoder.encode(\n      [\"string\", \"uint256\", \"uint256\"],\n      [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1],\n    );\n\n    // TODO: make it gasless\n    const tx = await asset.safeBatchTransferFrom(\n      from,\n      this.getAddress(),\n      ids,\n      amounts,\n      packParams,\n      await this.contractWrapper.getCallOverrides(),\n    );\n\n    const receipt = await tx.wait();\n    const log = this.contractWrapper.parseLogs<PackAddedEvent>(\n      \"PackAdded\",\n      receipt.logs,\n    );\n    if (log.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = log[0].args.packId;\n    return { id: packId, receipt, data: () => this.get(packId.toString()) };\n  }\n\n  /**\n   * Transfer Pack\n   *\n   * @remarks Transfer a pack from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the pack to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the pack you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of packs you want to send\n   * const amount = 1;\n   *\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumber,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom\", [\n        await this.contractWrapper.getSignerAddress(),\n        to,\n        tokenId,\n        amount,\n        [0],\n      ]),\n    };\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom\", [\n        from,\n        to,\n        args.tokenId,\n        args.amount,\n        data,\n      ]),\n    };\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionResult> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\n        \"safeBatchTransferFrom\",\n        [from, to, ids, amounts, data],\n      ),\n    };\n  }\n\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionResult> {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [\n        operator,\n        approved,\n      ]),\n    };\n  }\n\n  public async depositLink(amount: BigNumberish): Promise<TransactionResult> {\n    const chainId = await this.contractWrapper.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = IERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.contractWrapper.getProvider(),\n    );\n    // TODO: make it gasless\n    const tx = await erc20.transfer(\n      this.getAddress(),\n      amount,\n      await this.contractWrapper.getCallOverrides(),\n    );\n    return { receipt: await tx.wait() };\n  }\n\n  // TODO new withdraw LINK function in contract\n  // public async withdrawLink(to: string, amount: BigNumberish) {\n  //   const chainId = await this.contractWrapper.getChainID();\n  //   const chainlink = ChainlinkVrf[chainId];\n  //   await this.contractWrapper.sendTransaction(\"transferERC20\", [\n  //     chainlink.linkTokenAddress,\n  //     to,\n  //     amount,\n  //   ]);\n  // }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\n\nexport const PacksContractInput =\n  CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\n\nexport const PacksContractOutput =\n  CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(\n    CommonSymbolSchema,\n  );\n\nexport const PacksContractDeploy = PacksContractInput.merge(\n  CommonPlatformFeeSchema,\n).merge(CommonTrustedForwarderSchema);\n\nexport const PacksContractSchema = {\n  deploy: PacksContractDeploy,\n  output: PacksContractOutput,\n  input: PacksContractInput,\n};\n","import { ContractRoles } from \"../core/classes/contract-roles\";\nimport { DropERC721, DropERC721__factory } from \"@thirdweb-dev/contracts\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish, BytesLike, ethers } from \"ethers\";\nimport { ContractMetadata } from \"../core/classes/contract-metadata\";\nimport { ContractRoyalty } from \"../core/classes/contract-royalty\";\nimport { ContractWrapper } from \"../core/classes/contract-wrapper\";\nimport { IStorage } from \"../core/interfaces/IStorage\";\nimport {\n  NetworkOrSignerOrProvider,\n  TransactionResultWithId,\n} from \"../core/types\";\nimport { DropErc721ContractSchema } from \"../schema/contracts/drop-erc721\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport {\n  CommonNFTInput,\n  NFTMetadata,\n  NFTMetadataInput,\n  NFTMetadataOwner,\n} from \"../schema/tokens/common\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../types/QueryParams\";\nimport { DropErc721ClaimConditions } from \"../core/classes/drop-erc721-claim-conditions\";\nimport { Erc721 } from \"../core/classes/erc-721\";\nimport { ContractPrimarySale } from \"../core/classes/contract-sales\";\nimport { prepareClaim } from \"../common/claim-conditions\";\nimport { ContractEncoder } from \"../core/classes/contract-encoder\";\nimport { DelayedReveal } from \"../core/classes/delayed-reveal\";\nimport { GasCostEstimator } from \"../core/classes\";\nimport { ClaimVerification } from \"../types\";\nimport { TokensLazyMintedEvent } from \"@thirdweb-dev/contracts/dist/DropERC1155\";\nimport { TokensClaimedEvent } from \"@thirdweb-dev/contracts/dist/DropERC721\";\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const contract = sdk.getNFTDrop(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\nexport class NFTDrop extends Erc721<DropERC721> {\n  static contractType = \"nft-drop\" as const;\n  static contractRoles = [\"admin\", \"minter\", \"transfer\"] as const;\n  static contractFactory = DropERC721__factory;\n  /**\n   * @internal\n   */\n  static schema = DropErc721ContractSchema;\n\n  public encoder: ContractEncoder<DropERC721>;\n  public estimator: GasCostEstimator<DropERC721>;\n  public metadata: ContractMetadata<DropERC721, typeof NFTDrop.schema>;\n  public primarySale: ContractPrimarySale<DropERC721>;\n  public roles: ContractRoles<DropERC721, typeof NFTDrop.contractRoles[number]>;\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalty.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalty.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  public royalty: ContractRoyalty<DropERC721, typeof NFTDrop.schema>;\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await dropContract.claimConditions.set(claimConditions);\n   * ```\n   */\n  public claimConditions: DropErc721ClaimConditions;\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n  public revealer: DelayedReveal<DropERC721>;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    address: string,\n    storage: IStorage,\n    options: SDKOptions = {},\n    contractWrapper = new ContractWrapper<DropERC721>(\n      network,\n      address,\n      NFTDrop.contractFactory.abi,\n      options,\n    ),\n  ) {\n    super(contractWrapper, storage, options);\n    this.metadata = new ContractMetadata(\n      this.contractWrapper,\n      NFTDrop.schema,\n      this.storage,\n    );\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalty = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.primarySale = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc721ClaimConditions(\n      this.contractWrapper,\n      this.metadata,\n      this.storage,\n    );\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.revealer = new DelayedReveal<DropERC721>(\n      this.contractWrapper,\n      this.storage,\n    );\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadata[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = BigNumber.from(\n      Math.min(\n        (\n          await this.contractWrapper.readContract.nextTokenIdToMint()\n        ).toNumber(),\n        start + count,\n      ),\n    );\n    const unmintedId =\n      await this.contractWrapper.readContract.nextTokenIdToClaim();\n    return await Promise.all(\n      Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map((i) =>\n        this.getTokenMetadata(unmintedId.add(i).toString()),\n      ),\n    );\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.contractWrapper.readContract.nextTokenIdToClaim();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    return (await this.contractWrapper.readContract.nextTokenIdToMint()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   */\n  public async createBatch(\n    metadatas: NFTMetadataInput[],\n  ): Promise<TransactionResultWithId<NFTMetadata>[]> {\n    const startFileNumber =\n      await this.contractWrapper.readContract.nextTokenIdToMint();\n    const batch = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n    const baseUri = batch.baseUri;\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.metadataUris.length,\n      baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n      ethers.utils.toUtf8Bytes(\"\"),\n    ]);\n    const event = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.getTokenMetadata(id),\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async claimTo(\n    destinationAddress: string,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    const claimVerification = await this.prepareClaim(quantity, proofs);\n    const receipt = await this.contractWrapper.sendTransaction(\n      \"claim\",\n      [\n        destinationAddress,\n        quantity,\n        claimVerification.currencyAddress,\n        claimVerification.price,\n        claimVerification.proofs,\n        claimVerification.maxQuantityPerTransaction,\n      ],\n      claimVerification.overrides,\n    );\n    const event = this.contractWrapper.parseLogs<TokensClaimedEvent>(\n      \"TokensClaimed\",\n      receipt?.logs,\n    );\n    const startingIndex: BigNumber = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.get(id),\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  public async claim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionResultWithId<NFTMetadataOwner>[]> {\n    return this.claimTo(\n      await this.contractWrapper.getSignerAddress(),\n      quantity,\n      proofs,\n    );\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  private async prepareClaim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<ClaimVerification> {\n    return prepareClaim(\n      quantity,\n      await this.claimConditions.getActive(),\n      (await this.metadata.get()).merkle,\n      this.contractWrapper,\n      this.storage,\n      proofs,\n    );\n  }\n}\n","import {\n  CommonContractOutputSchema,\n  CommonContractSchema,\n  CommonPlatformFeeSchema,\n  CommonPrimarySaleSchema,\n  CommonRoyaltySchema,\n  CommonSymbolSchema,\n  CommonTrustedForwarderSchema,\n} from \"./common\";\nimport { MerkleSchema } from \"./common/snapshots\";\n\nexport const DropErc721ContractInput = CommonContractSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc721ContractOutput = CommonContractOutputSchema.merge(\n  CommonRoyaltySchema,\n)\n  .merge(MerkleSchema)\n  .merge(CommonSymbolSchema);\n\nexport const DropErc721ContractDeploy = DropErc721ContractInput.merge(\n  CommonPlatformFeeSchema,\n)\n  .merge(CommonPrimarySaleSchema)\n  .merge(CommonTrustedForwarderSchema);\n\nexport const DropErc721ContractSchema = {\n  deploy: DropErc721ContractDeploy,\n  output: DropErc721ContractOutput,\n  input: DropErc721ContractInput,\n};\n","import { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { ContractWrapper } from \"./contract-wrapper\";\nimport { DropERC721 } from \"@thirdweb-dev/contracts\";\nimport {\n  CommonNFTInput,\n  NFTMetadata,\n  NFTMetadataInput,\n} from \"../../schema/tokens/common\";\nimport { IStorage, TransactionResult, TransactionResultWithId } from \"../index\";\nimport { fetchTokenMetadata } from \"../../common/nft\";\nimport { BatchToReveal } from \"../../types/delayed-reveal\";\nimport { TokensLazyMintedEvent } from \"@thirdweb-dev/contracts/dist/DropERC721\";\n\n/**\n * Handles delayed reveal logic\n * @public\n */\nexport class DelayedReveal<T extends DropERC721> {\n  private contractWrapper: ContractWrapper<T>;\n  private storage: IStorage;\n\n  constructor(contractWrapper: ContractWrapper<T>, storage: IStorage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until your reveal them!\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time!\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @param placeholder - the placeholder NFT to show before the reveal\n   * @param metadatas - the final NFTs that will be hidden\n   * @param password - the password that will be used to reveal these NFTs\n   */\n  public async createDelayedRevealBatch(\n    placeholder: NFTMetadataInput,\n    metadatas: NFTMetadataInput[],\n    password: string,\n  ): Promise<TransactionResultWithId[]> {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n\n    const { baseUri: placeholderUri } = await this.storage.uploadMetadataBatch(\n      [CommonNFTInput.parse(placeholder)],\n      0,\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n\n    const startFileNumber =\n      await this.contractWrapper.readContract.nextTokenIdToMint();\n\n    const batch = await this.storage.uploadMetadataBatch(\n      metadatas.map((m) => CommonNFTInput.parse(m)),\n      startFileNumber.toNumber(),\n      this.contractWrapper.readContract.address,\n      await this.contractWrapper.getSigner()?.getAddress(),\n    );\n\n    const baseUri = batch.baseUri;\n    const baseUriId = await this.contractWrapper.readContract.getBaseURICount();\n    const encryptedBaseUri =\n      await this.contractWrapper.readContract.encryptDecrypt(\n        ethers.utils.toUtf8Bytes(\n          baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n        ),\n        await this.hashDelayRevealPasword(baseUriId, password),\n      );\n\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [\n      batch.metadataUris.length,\n      placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`,\n      encryptedBaseUri,\n    ]);\n\n    const events = this.contractWrapper.parseLogs<TokensLazyMintedEvent>(\n      \"TokensLazyMinted\",\n      receipt?.logs,\n    );\n    const startingIndex = events[0].args.startTokenId;\n    const endingIndex = events[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Reveal a batch of hidden NFTs\n   * @param batchId - the id of the batch to reveal\n   * @param password - the password\n   */\n  public async reveal(\n    batchId: BigNumberish,\n    password: string,\n  ): Promise<TransactionResult> {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const key = await this.hashDelayRevealPasword(batchId, password);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper\n        .callStatic()\n        .reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"reveal\", [\n        batchId,\n        key,\n      ]),\n    };\n  }\n\n  /**\n   * Gets the list of unrevealed NFT batches.\n   */\n  public async getBatchesToReveal(): Promise<BatchToReveal[]> {\n    const count = await this.contractWrapper.readContract.getBaseURICount();\n    if (count.isZero()) {\n      return [];\n    }\n\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(\n      countRangeArray.map((i) =>\n        this.contractWrapper.readContract.baseURIIndices(i),\n      ),\n    );\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenUris = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.contractWrapper.readContract.tokenURI(i),\n      ),\n    );\n\n    const tokenMetadatas = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.getNftMetadata(i.toString()),\n      ),\n    );\n\n    // index is the uri indicies, which is end token id. different from uris\n    const encryptedBaseUris = await Promise.all(\n      Array.from([...uriIndices]).map((i) =>\n        this.contractWrapper.readContract.encryptedBaseURI(i),\n      ),\n    );\n\n    return tokenUris\n      .map((uri, index) => ({\n        batchId: BigNumber.from(index),\n        batchUri: uri,\n        placeholderMetadata: tokenMetadatas[index],\n      }))\n      .filter(\n        (_, index) => ethers.utils.hexDataLength(encryptedBaseUris[index]) > 0,\n      );\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  private async hashDelayRevealPasword(\n    batchTokenIndex: BigNumberish,\n    password: string,\n  ) {\n    const chainId = await this.contractWrapper.getChainID();\n    const contractAddress = this.contractWrapper.readContract.address;\n    return ethers.utils.solidityKeccak256(\n      [\"string\", \"uint256\", \"uint256\", \"address\"],\n      [password, chainId, batchTokenIndex, contractAddress],\n    );\n  }\n\n  private async getNftMetadata(tokenId: BigNumberish): Promise<NFTMetadata> {\n    const tokenUri = await this.contractWrapper.readContract.tokenURI(tokenId);\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n}\n","import { NFTCollection } from \"./nft-collection\";\nimport { EditionDrop } from \"./edition-drop\";\nimport { Edition } from \"./edition\";\nimport { Token } from \"./token\";\nimport { Vote } from \"./vote\";\nimport { Split } from \"./split\";\nimport { Marketplace } from \"./marketplace\";\nimport { Pack } from \"./pack\";\nimport { NFTDrop } from \"./nft-drop\";\n\n/**\n * @internal\n */\nexport const CONTRACTS_MAP = {\n  [NFTDrop.contractType]: NFTDrop,\n  [NFTCollection.contractType]: NFTCollection,\n  [EditionDrop.contractType]: EditionDrop,\n  [Edition.contractType]: Edition,\n  [Token.contractType]: Token,\n  [Vote.contractType]: Vote,\n  [Split.contractType]: Split,\n  [Marketplace.contractType]: Marketplace,\n  [Pack.contractType]: Pack,\n} as const;\n\n/**\n * @internal\n */\nexport const REMOTE_CONTRACT_NAME = {\n  [NFTDrop.contractType]: \"DropERC721\",\n  [NFTCollection.contractType]: \"TokenERC721\",\n  [EditionDrop.contractType]: \"DropERC1155\",\n  [Edition.contractType]: \"TokenERC1155\",\n  [Token.contractType]: \"TokenERC20\",\n  [Vote.contractType]: \"VoteERC20\",\n  [Split.contractType]: \"Split\",\n  [Marketplace.contractType]: \"Marketplace\",\n  [Pack.contractType]: \"Pack\",\n} as const;\n\n/**\n * @internal\n */\nexport const REMOTE_CONTRACT_TO_CONTRACT_TYPE = {\n  DropERC721: NFTDrop.contractType,\n  TokenERC721: NFTCollection.contractType,\n  DropERC1155: EditionDrop.contractType,\n  TokenERC1155: Edition.contractType,\n  TokenERC20: Token.contractType,\n  VoteERC20: Vote.contractType,\n  Split: Split.contractType,\n  Marketplace: Marketplace.contractType,\n  Pack: Pack.contractType,\n} as const;\n","import { NetworkOrSignerOrProvider, ValidContractClass } from \"../types\";\nimport { z } from \"zod\";\nimport { ContractRegistry } from \"./registry\";\nimport { getContractAddressByChainId } from \"../../constants/addresses\";\nimport { ContractFactory } from \"./factory\";\nimport { SDKOptions } from \"../../schema/sdk-options\";\nimport { IStorage } from \"../interfaces\";\nimport { RPCConnectionHandler } from \"./rpc-connection-handler\";\nimport {\n  Edition,\n  EditionDrop,\n  Marketplace,\n  NFTCollection,\n  NFTDrop,\n  Pack,\n  Split,\n  Token,\n  Vote,\n} from \"../../contracts\";\nimport {\n  MarketplaceContractDeployMetadata,\n  NFTContractDeployMetadata,\n  SplitContractDeployMetadata,\n  TokenContractDeployMetadata,\n  VoteContractDeployMetadata,\n} from \"../../types/deploy/deploy-metadata\";\n\n/**\n * Handles deploying new contracts\n * @public\n */\nexport class ContractDeployer extends RPCConnectionHandler {\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getFactory} instead\n   */\n  private _factory: Promise<ContractFactory> | undefined;\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getRegistry} instead\n   */\n  private _registry: Promise<ContractRegistry> | undefined;\n  private storage: IStorage;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions,\n    storage: IStorage,\n  ) {\n    super(network, options);\n    this.storage = storage;\n  }\n\n  /**\n   * Deploys a new NFTCollection contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployNFTCollection(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployContract(NFTCollection.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new NFTDrop contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployNFTDrop(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployContract(NFTDrop.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Edition contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployEdition(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployContract(Edition.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new EditionDrop contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployEditionDrop(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    const parsed = EditionDrop.schema.deploy.parse(metadata);\n    return await this.deployContract(EditionDrop.contractType, parsed);\n  }\n\n  /**\n   * Deploys a new Token contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployToken(\n    metadata: TokenContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployContract(Token.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Marketplace contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployMarketplace(\n    metadata: MarketplaceContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployContract(Marketplace.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Pack contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployPack(\n    metadata: NFTContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployContract(Pack.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Split contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deploySplit(\n    metadata: SplitContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployContract(Split.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Vote contract\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  public async deployVote(\n    metadata: VoteContractDeployMetadata,\n  ): Promise<string> {\n    return await this.deployContract(Vote.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new contract\n   *\n   * @internal\n   * @param contractType - the type of contract to deploy\n   * @param contractMetadata - the metadata to deploy the contract with\n   * @returns a promise of the address of the newly deployed contract\n   */\n  public async deployContract<TContract extends ValidContractClass>(\n    contractType: TContract[\"contractType\"],\n    contractMetadata: z.input<TContract[\"schema\"][\"deploy\"]>,\n  ): Promise<string> {\n    const factory = await this.getFactory();\n    return await factory.deploy(contractType, contractMetadata);\n  }\n\n  /**\n   * @internal\n   */\n  public async getRegistry(): Promise<ContractRegistry> {\n    // if we already have a registry just return it back\n    if (this._registry) {\n      return this._registry;\n    }\n    // otherwise get the registry address for the active chain and get a new one\n    const chainId = (await this.getProvider().getNetwork()).chainId;\n    const registryAddress = getContractAddressByChainId(chainId, \"twRegistry\");\n    return (this._registry = Promise.resolve(\n      new ContractRegistry(registryAddress, this.getProvider(), this.options),\n    ));\n  }\n\n  private async getFactory(): Promise<ContractFactory> {\n    // if we already have a factory just return it back\n    if (this._factory) {\n      return this._factory;\n    }\n    // otherwise get the factory address for the active chain and get a new one\n    const chainId = (await this.getProvider().getNetwork()).chainId;\n    const factoryAddress = getContractAddressByChainId(chainId, \"twFactory\");\n    return (this._factory = Promise.resolve(\n      new ContractFactory(\n        factoryAddress,\n        this.getSignerOrProvider(),\n        this.storage,\n        this.options,\n      ),\n    ));\n  }\n\n  public override updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n\n  private updateContractSignerOrProvider() {\n    // has to be promises now\n    this._factory?.then((factory) => {\n      factory.updateSignerOrProvider(this.getSignerOrProvider());\n    });\n    // has to be promises now\n    this._registry?.then((registry) => {\n      registry.updateSignerOrProvider(this.getSignerOrProvider());\n    });\n  }\n}\n","import { ethers } from \"ethers\";\nimport { IStorage } from \"./interfaces/IStorage\";\nimport {\n  CONTRACTS_MAP,\n  Edition,\n  EditionDrop,\n  Marketplace,\n  NFTCollection,\n  NFTDrop,\n  Pack,\n  REMOTE_CONTRACT_TO_CONTRACT_TYPE,\n  Split,\n  Token,\n  Vote,\n} from \"../contracts\";\nimport { SDKOptions } from \"../schema/sdk-options\";\nimport { IpfsStorage } from \"./classes/ipfs-storage\";\nimport { RPCConnectionHandler } from \"./classes/rpc-connection-handler\";\nimport type {\n  ContractForContractType,\n  ContractType,\n  NetworkOrSignerOrProvider,\n  ValidContractInstance,\n} from \"./types\";\nimport { IThirdwebContract__factory } from \"@thirdweb-dev/contracts\";\nimport { ContractDeployer } from \"./classes/contract-deployer\";\n\n/**\n * The main entry point for the thirdweb SDK\n * @public\n */\nexport class ThirdwebSDK extends RPCConnectionHandler {\n  /**\n   * @internal\n   * the cache of contracts that we have already seen\n   */\n  private contractCache = new Map<string, ValidContractInstance>();\n  private storage: IStorage;\n  /**\n   * New contract deployer\n   */\n  public deployer: ContractDeployer;\n\n  constructor(\n    network: NetworkOrSignerOrProvider,\n    options: SDKOptions = {},\n    storage: IStorage = new IpfsStorage(),\n  ) {\n    super(network, options);\n    // this.factory = new ContractFactory(network, storage, options);\n    // this.registry = new ContractRegistry(network, options);\n    this.storage = storage;\n    this.deployer = new ContractDeployer(network, options, storage);\n  }\n\n  /**\n   * Get an instance of a Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @returns the contract\n   */\n  public getNFTDrop(contractAddress: string): NFTDrop {\n    return this.getContract(contractAddress, NFTDrop.contractType) as NFTDrop;\n  }\n\n  /**\n   * Get an instance of a NFT Collection contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getNFTCollection(address: string): NFTCollection {\n    return this.getContract(\n      address,\n      NFTCollection.contractType,\n    ) as NFTCollection;\n  }\n\n  /**\n   * Get an instance of a Edition Drop contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getEditionDrop(address: string): EditionDrop {\n    return this.getContract(address, EditionDrop.contractType) as EditionDrop;\n  }\n\n  /**\n   * Get an instance of an Edition contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getEdition(address: string): Edition {\n    return this.getContract(address, Edition.contractType) as Edition;\n  }\n\n  /**\n   * Get an instance of a Token contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getToken(address: string): Token {\n    return this.getContract(address, Token.contractType) as Token;\n  }\n\n  /**\n   * Get an instance of a Vote contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getVote(address: string): Vote {\n    return this.getContract(address, Vote.contractType) as Vote;\n  }\n\n  /**\n   * Get an instance of a Splits contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getSplit(address: string): Split {\n    return this.getContract(address, Split.contractType) as Split;\n  }\n\n  /**\n   * Get an instance of a Marketplace contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getMarketplace(address: string): Marketplace {\n    return this.getContract(address, Marketplace.contractType) as Marketplace;\n  }\n\n  /**\n   * Get an instance of a Pack contract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   */\n  public getPack(address: string): Pack {\n    return this.getContract(address, Pack.contractType) as Pack;\n  }\n\n  /**\n   *\n   * @internal\n   * @param address - the address of the contract to instantiate\n   * @param contractType - optional, the type of contract to instantiate\n   * @returns a promise that resolves with the contract instance\n   */\n  public getContract<TContractType extends ContractType = ContractType>(\n    address: string,\n    contractType: TContractType,\n  ): ContractForContractType<TContractType> {\n    // if we have a contract in the cache we will return it\n    // we will do this **without** checking any contract type things for simplicity, this may have to change in the future?\n    if (this.contractCache.has(address)) {\n      return this.contractCache.get(\n        address,\n      ) as ContractForContractType<TContractType>;\n    }\n    const newContract = new CONTRACTS_MAP[\n      // we have to do this as here because typescript is not smart enough to figure out\n      // that the type is a key of the map (checked by the if statement above)\n      contractType as keyof typeof CONTRACTS_MAP\n    ](this.getSignerOrProvider(), address, this.storage, this.options);\n    // if we have a contract type && the contract type is part of the map\n\n    this.contractCache.set(address, newContract);\n\n    // return the new contract\n    return newContract as ContractForContractType<TContractType>;\n  }\n\n  /**\n   * @param contractAddress - the address of the contract to attempt to resolve the contract type for\n   * @returns the {@link ContractType} for the given contract address\n   * @throws if the contract type cannot be determined (is not a valid thirdweb contract)\n   */\n  public async resolveContractType(\n    contractAddress: string,\n  ): Promise<ContractType> {\n    const contract = IThirdwebContract__factory.connect(\n      contractAddress,\n      this.getSignerOrProvider(),\n    );\n    const remoteContractType = ethers.utils\n      .toUtf8String(await contract.contractType())\n      // eslint-disable-next-line no-control-regex\n      .replace(/\\x00/g, \"\") as keyof typeof REMOTE_CONTRACT_TO_CONTRACT_TYPE;\n    return REMOTE_CONTRACT_TO_CONTRACT_TYPE[remoteContractType];\n  }\n\n  /**\n   * Return all the contracts deployed by the specified address\n   * @param walletAddress - the deployed address\n   */\n  public async getContractList(walletAddress: string) {\n    const addresses = await (\n      await this.deployer.getRegistry()\n    ).getContractAddresses(walletAddress);\n\n    const addressesWithContractTypes = await Promise.all(\n      addresses.map(async (adrr) => ({\n        address: adrr,\n        contractType: await this.resolveContractType(adrr).catch((err) => {\n          console.error(\n            `failed to get contract type for address: ${adrr}`,\n            err,\n          );\n          return \"\" as ContractType;\n        }),\n      })),\n    );\n\n    return addressesWithContractTypes.map(({ address, contractType }) => ({\n      address,\n      contractType,\n      metadata: () => this.getContract(address, contractType).metadata.get(),\n    }));\n  }\n\n  /**\n   * Update the active signer or provider for all contracts\n   * @param network - the new signer or provider\n   */\n  public override updateSignerOrProvider(network: NetworkOrSignerOrProvider) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n\n  private updateContractSignerOrProvider() {\n    this.deployer.updateSignerOrProvider(this.getSignerOrProvider());\n    for (const [, contract] of this.contractCache) {\n      contract.onNetworkUpdated(this.getSignerOrProvider());\n    }\n  }\n}\n","import { Json } from \"../types\";\n\n/**\n * Given a map of file hashes to ipfs uris, this function will hash\n * all properties recursively and replace them with the ipfs uris\n * from the map passed in. If a hash is missing from the map, the function\n * will throw an error.\n *\n * @internal\n *\n * @param object - The object to recursively process\n * @param cids - The array of file hashes to ipfs uris in the recurse order\n * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n */\nexport function replaceFilePropertiesWithHashes(\n  object: Record<string, any>,\n  cids: string[],\n) {\n  const keys = Object.keys(object);\n  for (const key in keys) {\n    const val = object[keys[key]];\n    const isFile = val instanceof File || val instanceof Buffer;\n    if (typeof val === \"object\" && !isFile) {\n      replaceFilePropertiesWithHashes(val, cids);\n      continue;\n    }\n\n    if (!isFile) {\n      continue;\n    }\n\n    object[keys[key]] = `ipfs://${cids.splice(0, 1)[0]}`;\n  }\n  return object;\n}\n\n/**\n * Replaces all ipfs:// hashes (or any other scheme) with gateway url\n * @param object\n * @param scheme\n * @param gatewayUrl\n */\nexport function replaceHashWithGatewayUrl(\n  object: Record<string, any>,\n  scheme: string,\n  gatewayUrl: string,\n): Record<string, any> {\n  const keys = Object.keys(object);\n  for (const key in keys) {\n    const val = object[keys[key]];\n    object[keys[key]] = resolveGatewayUrl(val, scheme, gatewayUrl);\n    if (Array.isArray(val)) {\n      object[keys[key]] = val.map((el) => {\n        if (typeof el === \"object\") {\n          return replaceHashWithGatewayUrl(el, scheme, gatewayUrl);\n        } else {\n          return resolveGatewayUrl(el, scheme, gatewayUrl);\n        }\n      });\n    }\n    if (typeof val === \"object\") {\n      replaceHashWithGatewayUrl(val, scheme, gatewayUrl);\n    }\n  }\n  return object;\n}\n\n/**\n * Resolves the full URL of a file for a given gateway.\n *\n * For example, if the hash of a file is `ipfs://bafkreib3u2u6ir2fsl5nkuwixfsb3l4xehri3psjv5yga4inuzsjunk2sy`, then the URL will be:\n * \"https://cloudflare-ipfs.com/ipfs/bafkreibnwjhx5s3r2rggdoy3hw7lr7wmgy4bas35oky3ed6eijklk2oyvq\"\n * if the gateway is `cloudflare-ipfs.com`.\n *\n * @param ipfsHash\n * @param scheme\n * @param gatewayUrl\n */\nexport function resolveGatewayUrl<T extends Json>(\n  ipfsHash: T,\n  scheme: string,\n  gatewayUrl: string,\n): T {\n  if (typeof ipfsHash === \"string\") {\n    return ipfsHash && ipfsHash.toLowerCase().includes(scheme)\n      ? (ipfsHash.replace(scheme, gatewayUrl) as T)\n      : ipfsHash;\n  } else {\n    return ipfsHash;\n  }\n}\n","import {\n  DuplicateFileNameError,\n  FetchError,\n  UploadError,\n} from \"../../common/error\";\nimport {\n  DEFAULT_IPFS_GATEWAY,\n  PINATA_IPFS_URL,\n  TW_IPFS_SERVER_URL,\n} from \"../../constants/urls\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { FileOrBuffer, JsonObject } from \"../types\";\nimport {\n  replaceFilePropertiesWithHashes,\n  replaceHashWithGatewayUrl,\n  resolveGatewayUrl,\n} from \"../helpers/storage\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\n/**\n * @internal\n */\ninterface CidWithFileName {\n  // base cid of the directory\n  cid: string;\n\n  // file name of the file without cid\n  fileNames: string[];\n}\n\n/**\n * IPFS Storage implementation, accepts custom IPFS gateways\n * @public\n */\nexport class IpfsStorage implements IStorage {\n  private gatewayUrl: string;\n\n  constructor(gatewayUrl: string = DEFAULT_IPFS_GATEWAY) {\n    this.gatewayUrl = `${gatewayUrl.replace(/\\/$/, \"\")}/`;\n  }\n\n  /**\n   * {@inheritDoc IStorage.upload}\n   */\n  public async upload(\n    data: string | FileOrBuffer,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    const cid = await this.uploadBatch(\n      [data],\n      0,\n      contractAddress,\n      signerAddress,\n    );\n    return `${cid}0`;\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadBatch}\n   */\n  public async uploadBatch(\n    files: (string | FileOrBuffer)[],\n    fileStartNumber = 0,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    const { cid } = await this.uploadBatchWithCid(\n      files,\n      fileStartNumber,\n      contractAddress,\n      signerAddress,\n    );\n\n    return `ipfs://${cid}/`;\n  }\n\n  /**\n   * {@inheritDoc IStorage.getUploadToken}\n   */\n  public async getUploadToken(contractAddress: string): Promise<string> {\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const res = await fetch(`${TW_IPFS_SERVER_URL}/grant`, {\n      method: \"GET\",\n      headers,\n    });\n    if (!res.ok) {\n      throw new FetchError(`Failed to get upload token`);\n    }\n    const body = await res.text();\n    return body;\n  }\n\n  /**\n   * {@inheritDoc IStorage.get}\n   */\n  public async get(hash: string): Promise<Record<string, any>> {\n    const res = await this._get(hash);\n    const json = await res.json();\n    return replaceHashWithGatewayUrl(json, \"ipfs://\", this.gatewayUrl);\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadMetadata}\n   */\n  public async uploadMetadata(\n    metadata: JsonObject,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    // since there's only single object, always use the first index\n    const { metadataUris } = await this.uploadMetadataBatch(\n      [metadata],\n      0,\n      contractAddress,\n      signerAddress,\n    );\n    return metadataUris[0];\n  }\n\n  /**\n   * {@inheritDoc IStorage.uploadMetadataBatch}\n   */\n  public async uploadMetadataBatch(\n    metadatas: JsonObject[],\n    fileStartNumber?: number,\n    contractAddress?: string,\n    signerAddress?: string,\n  ) {\n    const metadataToUpload = (await this.batchUploadProperties(metadatas)).map(\n      (m: any) => JSON.stringify(m),\n    );\n\n    const { cid, fileNames } = await this.uploadBatchWithCid(\n      metadataToUpload,\n      fileStartNumber,\n      contractAddress,\n      signerAddress,\n    );\n\n    const baseUri = `ipfs://${cid}/`;\n    const uris = fileNames.map((filename) => `${baseUri}${filename}`);\n\n    return {\n      baseUri,\n      metadataUris: uris,\n    };\n  }\n\n  /** *************************\n   * PRIVATE FUNCTIONS\n   *************************/\n\n  private async _get(hash: string): Promise<Response> {\n    let uri = hash;\n    if (hash) {\n      uri = resolveGatewayUrl(hash, \"ipfs://\", this.gatewayUrl);\n    }\n    const result = await fetch(uri);\n    if (!result.ok) {\n      throw new Error(`Status code (!= 200) =${result.status}`);\n    }\n    return result;\n  }\n\n  /**\n   * Pre-processes metadata and uploads all file properties\n   * to storage in *bulk*, then performs a string replacement of\n   * all file properties -\\> the resulting ipfs uri. This is\n   * called internally by `uploadMetadataBatch`.\n   *\n   * @internal\n   *\n   * @param metadata - The metadata to recursively process\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n   */\n  private async batchUploadProperties(metadatas: JsonObject[]) {\n    const filesToUpload = metadatas.flatMap((m) =>\n      this.buildFilePropertiesMap(m, []),\n    );\n    if (filesToUpload.length === 0) {\n      return metadatas;\n    }\n    const { cid, fileNames } = await this.uploadBatchWithCid(filesToUpload);\n\n    const cids = [];\n    // recurse ordered array\n    for (const filename of fileNames) {\n      cids.push(`${cid}/${filename}`);\n    }\n\n    const finalMetadata = await replaceFilePropertiesWithHashes(\n      metadatas,\n      cids,\n    );\n    return finalMetadata;\n  }\n\n  /**\n   * This function recurisely traverses an object and hashes any\n   * `Buffer` or `File` objects into the returned map.\n   *\n   * @param object - the Json Object\n   * @param files - The running array of files or buffer to upload\n   * @returns - The final map of all hashes to files\n   */\n  private buildFilePropertiesMap(\n    object: JsonObject,\n    files: (File | Buffer)[] = [],\n  ): (File | Buffer)[] {\n    if (Array.isArray(object)) {\n      object.forEach((element) => {\n        this.buildFilePropertiesMap(element, files);\n      });\n    } else if (object) {\n      const values = Object.values(object);\n      for (const val of values) {\n        if (val instanceof File || val instanceof Buffer) {\n          files.push(val);\n        } else if (typeof val === \"object\") {\n          this.buildFilePropertiesMap(val as JsonObject, files);\n        }\n      }\n    }\n    return files;\n  }\n\n  private async uploadBatchWithCid(\n    files: (string | FileOrBuffer)[],\n    fileStartNumber = 0,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<CidWithFileName> {\n    const token = await this.getUploadToken(contractAddress || \"\");\n    const metadata = {\n      name: `CONSOLE-TS-SDK-${contractAddress}`,\n      keyvalues: {\n        sdk: \"typescript\",\n        contractAddress,\n        signerAddress,\n      },\n    };\n    const data = new FormData();\n    const fileNames: string[] = [];\n    files.forEach((file, i) => {\n      let fileName = \"\";\n      let fileData = file;\n      // if it is a file, we passthrough the file extensions,\n      // if it is a buffer or string, the filename would be fileStartNumber + index\n      // if it is a buffer or string with names, the filename would be the name\n      if (file instanceof File) {\n        let extensions = \"\";\n        if (file.name) {\n          const extensionStartIndex = file.name.lastIndexOf(\".\");\n          if (extensionStartIndex > -1) {\n            extensions = file.name.substring(extensionStartIndex);\n          }\n        }\n        fileName = `${i + fileStartNumber}${extensions}`;\n      } else if (file instanceof Buffer || typeof file === \"string\") {\n        fileName = `${i + fileStartNumber}`;\n      } else if (file && file.name && file?.data) {\n        fileData = file?.data;\n        fileName = `${file.name}`;\n      } else {\n        // default behavior\n        fileName = `${i + fileStartNumber}`;\n      }\n\n      const filepath = `files/${fileName}`;\n      if (fileNames.indexOf(fileName) > -1) {\n        throw new DuplicateFileNameError(fileName);\n      }\n      fileNames.push(fileName);\n      if (typeof window === \"undefined\") {\n        data.append(\"file\", fileData as any, { filepath } as any);\n      } else {\n        // browser does blob things, filepath is parsed differently on browser vs node.\n        // pls pinata?\n        data.append(\"file\", new Blob([fileData as any]), filepath);\n      }\n    });\n\n    data.append(\"pinataMetadata\", JSON.stringify(metadata));\n    const res = await fetch(PINATA_IPFS_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      body: data as any,\n    });\n    const body = await res.json();\n    if (!res.ok) {\n      console.log(body);\n      throw new UploadError(\"Failed to upload files to IPFS\");\n    }\n    return {\n      cid: body.IpfsHash,\n      fileNames,\n    };\n  }\n}\n","import { z } from \"zod\";\nimport { AddressSchema, PriceSchema } from \"../shared\";\n\n/**\n * @internal\n */\nexport const TokenMintInputSchema = z.object({\n  toAddress: AddressSchema,\n  amount: PriceSchema,\n});\n\n/**\n * @public\n */\nexport type TokenMintInput = z.input<typeof TokenMintInputSchema>;\n"],"mappings":"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","names":[]}