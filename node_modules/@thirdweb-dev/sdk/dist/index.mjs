var Fr=Object.defineProperty,yo=Object.defineProperties;var wo=Object.getOwnPropertyDescriptors;var Rr=Object.getOwnPropertySymbols;var Co=Object.prototype.hasOwnProperty,To=Object.prototype.propertyIsEnumerable;var tr=(o,t,e)=>t in o?Fr(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e,S=(o,t)=>{for(var e in t||(t={}))Co.call(t,e)&&tr(o,e,t[e]);if(Rr)for(var e of Rr(t))To.call(t,e)&&tr(o,e,t[e]);return o},k=(o,t)=>yo(o,wo(t)),p=(o,t)=>Fr(o,"name",{value:t,configurable:!0}),Ir=(o=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(o,{get:(t,e)=>(typeof require!="undefined"?require:t)[e]}):o)(function(o){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+o+'" is not supported')});var g=(o,t,e)=>(tr(o,typeof t!="symbol"?t+"":t,e),e);import"cross-fetch/polyfill";var W=class{constructor(t){this.contractWrapper=t}encode(t,e){return this.contractWrapper.readContract.interface.encodeFunctionData(t,e)}decode(t,e){return this.contractWrapper.readContract.interface.decodeFunctionData(t,e)}};p(W,"ContractEncoder");var v=class{constructor(t,e,r){this.contractWrapper=t,this.schema=e,this.storage=r}parseOutputMetadata(t){return this.schema.output.parse(t)}parseInputMetadata(t){return this.schema.input.parse(t)}async get(){let t=await this.contractWrapper.readContract.contractURI(),e=await this.storage.get(t);return this.parseOutputMetadata(e)}async set(t){let e=await this._parseAndUploadMetadata(t);return{receipt:await this.contractWrapper.sendTransaction("setContractURI",[e]),data:this.get}}async update(t){return await this.set(S(S({},await this.get()),t))}async _parseAndUploadMetadata(t){let e=this.parseInputMetadata(t);return this.storage.uploadMetadata(e)}};p(v,"ContractMetadata");import{ethers as _r}from"ethers";var So={admin:"",transfer:"TRANSFER_ROLE",minter:"MINTER_ROLE",pauser:"PAUSER_ROLE",editor:"EDITOR_ROLE",lister:"LISTER_ROLE",asset:"ASSET_ROLE"};function R(o){return o==="admin"?_r.utils.hexZeroPad([0],32):_r.utils.id(So[o])}p(R,"getRoleHash");import Ot from"tiny-invariant";var pt=class extends Error{constructor(t){super(t?`Object with id ${t} NOT FOUND`:"NOT_FOUND")}};p(pt,"NotFoundError");var Dr=class extends Error{constructor(t){super(t?`'${t}' is an invalid address`:"Invalid address passed")}};p(Dr,"InvalidAddressError");var ye=class extends Error{constructor(t,e){super(`MISSING ROLE: ${t} does not have the '${e}' role`)}};p(ye,"MissingRoleError");var Nr=class extends Error{constructor(t="The asset you're trying to use could not be found."){super(`message: ${t}`)}};p(Nr,"AssetNotFoundError");var we=class extends Error{constructor(t){super(`UPLOAD_FAILED: ${t}`)}};p(we,"UploadError");var Or=class extends Error{constructor(){super("File name is required when object is not a `File` type object.")}};p(Or,"FileNameMissingError");var Ce=class extends Error{constructor(t){super(`DUPLICATE_FILE_NAME_ERROR: File name ${t} was passed for more than one file.`)}};p(Ce,"DuplicateFileNameError");var Br=class extends Error{constructor(t,e,r){super(`BALANCE ERROR: you do not have enough balance on contract ${t} to use ${e} tokens. You have ${r} tokens available.`)}};p(Br,"NotEnoughTokensError");var Mr=class extends Error{constructor(){super("LIST ERROR: you should be the owner of the token to list it.")}};p(Mr,"MissingOwnerRoleError");var Lr=class extends Error{constructor(t){super(`BUY ERROR: You cannot buy more than ${t} tokens`)}};p(Lr,"QuantityAboveLimitError");var Te=class extends Error{constructor(t,e){super(`FETCH_FAILED: ${t}`);this.innerError=e}};p(Te,"FetchError");var Se=class extends Error{constructor(t){super(`DUPLICATE_LEAFS${t?` : ${t}`:""}`)}};p(Se,"DuplicateLeafsError");var be=class extends Error{constructor(t){super(`Auction already started with existing bid${t?`, id: ${t}`:""}`)}};p(be,"AuctionAlreadyStartedError");var Ur=class extends Error{constructor(t){super(`FUNCTION DEPRECATED. ${t?`Use ${t} instead`:""}`)}};p(Ur,"FunctionDeprecatedError");var ft=class extends Error{constructor(t,e){super(`Could not find listing.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}`)}};p(ft,"ListingNotFoundError");var Nt=class extends Error{constructor(t,e,r,a){super(`Incorrect listing type. Are you sure you're using the right method?.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}${a?` expected type: ${a}`:""}${r?` actual type: ${r}`:""}`)}};p(Nt,"WrongListingTypeError");var $r=class extends Error{constructor(t){super(`Failed to transfer asset, transfer is restricted.${t?` Address : ${t}`:""}`)}};p($r,"RestrictedTransferError");var Vr=class extends Error{constructor(t,e,r="Failed to execute transaction"){super(`${r}, admin role is missing${t?` on address: ${t}`:""}${e?` on contract: ${e}`:""}`)}};p(Vr,"AdminRoleMissingError");var Ae=class extends Error{constructor(t,e){super(`Auction has not ended yet${t?`, id: ${t}`:""}${e?`, end time: ${e.toString()}`:""}`)}};p(Ae,"AuctionHasNotEndedError");var er=class extends Error{constructor(t,e,r,a,n,s,i){let c=`Contract transaction failed

`;c+=`Message: ${t}`,c+=`

| Transaction info |
`,c+=qt("from",e),c+=qt("to",r),c+=qt("data",a),c+=qt("chain",`${n.name} (${n.chainId})`);try{let d=new URL(s);c+=qt("RPC",d.hostname)}catch{}c+=`

`,c+="Need help with this error? Join our community: https://discord.gg/thirdweb",c+=`



`,c+="| Raw error |",c+=`

`,c+=i;super(c);this.reason=t,this.from=e,this.to=r,this.data=a,this.chain=n,this.rpcUrl=s}};p(er,"TransactionError");async function Gr(o,t,e,r){let a;if(o.data)a=JSON.stringify(o.data);else if(o instanceof Error)a=o.message;else return o;let n=Jt(/.*?"message[^a-zA-Z0-9]*([^"\\]*).*?/,a),s=Jt(/.*?"data[^a-zA-Z0-9]*([^"\\]*).*?/,a),i=Jt(/.*?"url[^a-zA-Z0-9]*([^"\\]*).*?/,a),c=Jt(/.*?"from[^a-zA-Z0-9]*([^"\\]*).*?/,a),d=Jt(/.*?"to[^a-zA-Z0-9]*([^"\\]*).*?/,a);return d===""&&(d=r),c===""&&(c=e),new er(n,c,d,s,t,i,a)}p(Gr,"convertToTWError");function qt(o,t){if(t==="")return t;let e=Array(10-o.length).fill(" ").join("");return`
${o}:${e}${t}`}p(qt,"withSpaces");function Jt(o,t){let e=t.match(o)||[],r="";return(e==null?void 0:e.length)>0&&(r+=e[1]),r}p(Jt,"parseMessageParts");var Z=class{constructor(t,e){this.contractWrapper=t,this.roles=e}async getAll(){Ot(this.roles.length,"this contract has no support for roles");let t={};for(let e of this.roles)t[e]=await this.get(e);return t}async get(t){Ot(this.roles.includes(t),`this contract does not support the "${t}" role`);let e=R(t),r=(await this.contractWrapper.readContract.getRoleMemberCount(e)).toNumber();return await Promise.all(Array.from(Array(r).keys()).map(a=>this.contractWrapper.readContract.getRoleMember(e,a)))}async setAll(t){let e=Object.keys(t);Ot(e.length,"you must provide at least one role to set"),Ot(e.every(n=>this.roles.includes(n)),"this contract does not support the given role");let r=await this.getAll(),a=[];return e.sort(n=>n==="admin"?1:-1).forEach(async n=>{let s=t[n]||[],i=r[n]||[],c=s.filter(m=>!i.includes(m)),d=i.filter(m=>!s.includes(m));c.length&&c.forEach(m=>{a.push(this.contractWrapper.readContract.interface.encodeFunctionData("grantRole",[R(n),m]))}),d.length&&d.forEach(async m=>{let h=await this.getRevokeRoleFunctionName(m);a.push(this.contractWrapper.readContract.interface.encodeFunctionData(h,[R(n),m]))})}),{receipt:await this.contractWrapper.multiCall(a)}}async verify(t,e){await Promise.all(t.map(async r=>{if(!(await this.get(r)).map(n=>n.toLowerCase()).includes(e.toLowerCase()))throw new ye(e,r)}))}async grant(t,e){return Ot(this.roles.includes(t),`this contract does not support the "${t}" role`),{receipt:await this.contractWrapper.sendTransaction("grantRole",[R(t),e])}}async revoke(t,e){Ot(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=await this.getRevokeRoleFunctionName(e);return{receipt:await this.contractWrapper.sendTransaction(r,[R(t),e])}}async getRevokeRoleFunctionName(t){return(await this.contractWrapper.getSignerAddress()).toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}};p(Z,"ContractRoles");import{BigNumber as rr}from"ethers";import{isAddress as bo}from"ethers/lib/utils";import{z as w}from"zod";globalThis.File||(globalThis.File=Ir("@web-std/file").File);var ar=1e4,Ao=p(()=>typeof window<"u","isBrowser"),Wo=Ao()?[w.instanceof(File),w.string()]:[w.instanceof(Buffer),w.string()],Pt=w.union(Wo),Hr=w.union([w.array(w.number()),w.string()]),b=w.union([w.string(),w.number(),w.bigint(),w.instanceof(rr)]).transform(o=>rr.from(o)),st=b.transform(o=>o.toString()),St=w.number().max(ar,"Cannot exeed 100%").min(0,"Cannot be below 0%"),jr=w.number().max(100,"Cannot exeed 100%").min(0,"Cannot be below 0%"),We=w.union([w.string(),w.number(),w.boolean(),w.null()]),kt=w.lazy(()=>w.union([We,w.array(kt),w.record(kt)])),Bs=w.record(kt),zr=w.union([w.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,"Invalid hex color").transform(o=>o.replace("#","")),w.string().length(0)]),rt=w.string().refine(o=>bo(o),o=>({message:`${o} is not a valid address`})),bt=w.union([w.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/,"Invalid price"),w.number().min(0,"Price cannot be negative")]).transform(o=>typeof o=="number"?o.toString():o),Zr=w.date().transform(o=>rr.from(Math.floor(o.getTime()/1e3))),ve=Zr.default(new Date),Kr=Zr.default(new Date(Date.now()+1e3*60*60*24*365*10));import{AddressZero as da}from"@ethersproject/constants";import{z as Y}from"zod";import{z as Xt}from"zod";import{BigNumber as Eo,ethers as Yr}from"ethers";import{hexZeroPad as ko}from"ethers/lib/utils";var f;(function(o){o[o.Mainnet=1]="Mainnet",o[o.Ropsten=3]="Ropsten",o[o.Rinkeby=4]="Rinkeby",o[o.Goerli=5]="Goerli",o[o.Kovan=42]="Kovan",o[o.BSC=56]="BSC",o[o.xDai=100]="xDai",o[o.Polygon=137]="Polygon",o[o.Moonriver=1285]="Moonriver",o[o.Mumbai=80001]="Mumbai",o[o.Harmony=16666e5]="Harmony",o[o.Localhost=1337]="Localhost",o[o.Hardhat=31337]="Hardhat",o[o.Fantom=250]="Fantom",o[o.FantomTestnet=4002]="FantomTestnet",o[o.Avalanche=43114]="Avalanche",o[o.AvalancheFujiTestnet=43113]="AvalancheFujiTestnet"})(f||(f={}));var qr=[f.Mainnet,f.Rinkeby,f.Goerli,f.Polygon,f.Mumbai,f.Fantom,f.FantomTestnet,f.Avalanche,f.AvalancheFujiTestnet];var At="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",vo={[f.Mainnet]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",name:"Wrapped Ether",symbol:"WETH"}},[f.Rinkeby]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xc778417E063141139Fce010982780140Aa0cD5Ab",name:"Wrapped Ether",symbol:"WETH"}},[f.Goerli]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7",name:"Wrapped Ether",symbol:"WETH"}},[f.Polygon]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",name:"Wrapped Matic",symbol:"WMATIC"}},[f.Mumbai]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",name:"Wrapped Matic",symbol:"WMATIC"}},[f.Avalanche]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",name:"Wrapped AVAX",symbol:"WAVAX"}},[f.AvalancheFujiTestnet]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xd00ae08403B9bbb9124bB305C09058E32C39A48c",name:"Wrapped AVAX",symbol:"WAVAX"}},[f.Fantom]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",name:"Wrapped Fantom",symbol:"WFTM"}},[f.FantomTestnet]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0xf1277d1Ed8AD466beddF92ef448A132661956621",name:"Wrapped Fantom",symbol:"WFTM"}},[f.Hardhat]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x5FbDB2315678afecb367f032d93F642f64180aa3",name:"Wrapped Ether",symbol:"WETH"}}};function Jr(o){return vo[o]}p(Jr,"getNativeTokenByChainId");import{z as Qt}from"zod";var xo=Qt.object({name:Qt.string(),symbol:Qt.string(),decimals:Qt.number()}),Qr=xo.extend({value:b,displayValue:Qt.string()});import{z as F}from"zod";var Bt=F.object({merkle:F.record(F.string()).default({})}),or=F.object({address:F.string(),maxClaimable:F.number().default(0)}),Mt=F.union([F.array(F.string()).transform(o=>o.map(t=>or.parse({address:t}))),F.array(or)]),Yt=F.object({merkleRoot:F.string(),claims:F.array(or.extend({proof:F.array(F.string())}))}),zs=F.object({merkleRoot:F.string(),snapshotUri:F.string(),snapshot:Yt});var te=Xt.object({startTime:ve,currencyAddress:Xt.string().default(At),price:bt.default(0),maxQuantity:st.default(Yr.constants.MaxUint256),quantityLimitPerTransaction:st.default(Yr.constants.MaxUint256),waitInSeconds:st.default(0),merkleRootHash:Hr.default(ko([0],32)),snapshot:Xt.optional(Mt)}),Xr=Xt.array(te),ei=te.partial(),nr=te.extend({availableSupply:Xt.string().default(""),currencyMetadata:Qr.default({value:Eo.from("0"),displayValue:"0",symbol:"",decimals:18,name:""}),price:b,maxQuantity:b,quantityLimitPerTransaction:b,waitInSeconds:b,startTime:b.transform(o=>new Date(o.toNumber()*1e3))});import{z as Rt}from"zod";import{z as gt}from"zod";import{z as Wt}from"zod";var ta=We.or(Pt),Po=Wt.union([Wt.array(Wt.object({key:Wt.string(),value:ta})).superRefine((o,t)=>{if(!o)return;let e={};o.forEach(({key:r},a)=>{e[r]||(e[r]=0),e[r]++,e[r]>1&&t.addIssue({code:Wt.ZodIssueCode.custom,message:`Duplicate key: ${r}`,path:[a,"key"]})})}),Wt.record(ta)]).optional(),ea=Wt.preprocess(o=>{let t=o;return Array.isArray(t)?t.filter(e=>e.value):t},Po).transform(o=>Array.isArray(o)?o.reduce((t,e)=>k(S({},t),{[e.key]:e.value}),{}):o),ra=Wt.record(We).optional();var aa=gt.object({name:gt.string().nonempty({message:"A name is required."}),description:gt.string().optional(),image:Pt.optional(),external_url:gt.string().optional()}).catchall(gt.lazy(()=>kt)),Ro=aa.extend({id:b,uri:gt.string(),image:gt.string().optional(),external_url:gt.string().optional()}),U=aa.extend({animation_url:Pt.optional(),background_color:zr.optional(),properties:ea}),xe=Ro.extend({animation_url:gt.string().optional(),properties:ra});import{AddressZero as sr}from"@ethersproject/constants";import{ethers as _o}from"ethers";import{v4 as Fo}from"uuid";import{hexlify as oa,toUtf8Bytes as Io}from"ethers/lib/utils";function na(o){if(o===void 0){let t=Buffer.alloc(16);return Fo({},t),oa(Io(t.toString("hex")))}else return oa(o)}p(na,"resolveOrGenerateId");var Ee=Rt.object({metadata:U,to:Rt.string().default(sr),price:bt.default(0),currencyAddress:Rt.string().default(At),mintStartTime:ve,mintEndTime:Kr,uid:Rt.string().optional().transform(o=>na(o)),royaltyRecipient:Rt.string().default(sr),royaltyBps:St.default(0),primarySaleRecipient:Rt.string().default(sr)}),ir=Ee.extend({uri:Rt.string(),royaltyBps:b,mintStartTime:b,mintEndTime:b}),sa=Ee.extend({tokenId:st.default(_o.constants.MaxUint256),quantity:st}),ia=ir.extend({tokenId:b,quantity:b}),ca=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"uri",type:"string"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],pa=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"tokenId",type:"uint256"},{name:"uri",type:"string"},{name:"quantity",type:"uint256"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}];var x=Y.object({name:Y.string(),description:Y.string().optional(),image:Pt.optional(),external_link:Y.string().url().optional()}),I=x.extend({image:Y.string().optional()}).catchall(Y.lazy(()=>kt)),_=Y.object({seller_fee_basis_points:St.default(0),fee_recipient:rt.default(da)}),dt=Y.object({primary_sale_recipient:rt}),K=Y.object({platform_fee_basis_points:St.default(0),platform_fee_recipient:rt.default(da)}),D=Y.object({trusted_forwarders:Y.array(rt).default([])}),q=Y.object({symbol:Y.string().optional().default("")});var at=class{constructor(t,e){this.contractWrapper=t,this.metadata=e}async getDefaultRoyaltyInfo(){let[t,e]=await this.contractWrapper.readContract.getDefaultRoyaltyInfo();return _.parse({fee_recipient:t,seller_fee_basis_points:e})}async getTokenRoyaltyInfo(t){let[e,r]=await this.contractWrapper.readContract.getRoyaltyInfoForToken(t);return _.parse({fee_recipient:e,seller_fee_basis_points:r})}async setDefaultRoyaltyInfo(t){let e=await this.metadata.get(),r=this.metadata.parseInputMetadata(S(S({},e),t)),a=await this.metadata._parseAndUploadMetadata(r),n=[this.contractWrapper.readContract.interface.encodeFunctionData("setDefaultRoyaltyInfo",[r.fee_recipient,r.seller_fee_basis_points]),this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[a])];return{receipt:await this.contractWrapper.multiCall(n),data:()=>this.getDefaultRoyaltyInfo()}}async setTokenRoyaltyInfo(t,e){return{receipt:await this.contractWrapper.sendTransaction("setRoyaltyInfoForToken",[t,e.fee_recipient,e.seller_fee_basis_points]),data:()=>this.getDefaultRoyaltyInfo()}}};p(at,"ContractRoyalty");var mt=class{constructor(t){this.contractWrapper=t}async getRecipient(){return await this.contractWrapper.readContract.primarySaleRecipient()}async setRecipient(t){return{receipt:await this.contractWrapper.sendTransaction("setPrimarySaleRecipient",[t])}}};p(mt,"ContractPrimarySale");import{IERC20__factory as dn}from"@thirdweb-dev/contracts";import{BigNumber as wr,ethers as mn}from"ethers";import{AddressZero as an}from"@ethersproject/constants";import{BigNumber as it,Contract as en,ethers as ut}from"ethers";import{JsonRpcBatchProvider as Do,Provider as No,WebSocketProvider as Oo}from"@ethersproject/providers";import{ethers as ae,Signer as pr}from"ethers";import{EventEmitter2 as Bo}from"eventemitter2";import{AddressZero as ke}from"@ethersproject/constants";var ee="0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81",yt="0x7c487845f98938Bb955B1D5AD069d9a30e4131fd",wt="0x11c34F062Cb10a20B9F463E12Ff9dA62D76FDf65",cr={[f.Mainnet]:{biconomyForwarder:"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693",twFactory:wt,twRegistry:yt},[f.Rinkeby]:{biconomyForwarder:"0xFD4973FeB2031D4409fB57afEE5dF2051b171104",twFactory:wt,twRegistry:yt},[f.Goerli]:{biconomyForwarder:ke,twFactory:wt,twRegistry:yt},[f.Polygon]:{biconomyForwarder:"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8",twFactory:wt,twRegistry:yt},[f.Mumbai]:{biconomyForwarder:"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",twFactory:wt,twRegistry:yt},[f.Avalanche]:{biconomyForwarder:"0x64CD353384109423a966dCd3Aa30D884C9b2E057",twFactory:wt,twRegistry:yt},[f.AvalancheFujiTestnet]:{biconomyForwarder:"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF",twFactory:wt,twRegistry:yt},[f.Fantom]:{biconomyForwarder:ke,twFactory:wt,twRegistry:yt},[f.FantomTestnet]:{biconomyForwarder:ke,twFactory:wt,twRegistry:yt}};function re(o,t){return o===f.Hardhat?t==="twFactory"?process.env.factoryAddress:t==="twRegistry"?process.env.registryAddress:ke:cr[o][t]}p(re,"getContractAddressByChainId");import{z as $}from"zod";var ot=$.object({readonlySettings:$.object({rpcUrl:$.string().url(),chainId:$.number().optional()}).optional(),gasSettings:$.object({maxPriceInGwei:$.number().min(1,"gas price cannot be less than 1").default(300),speed:$.enum(["standard","fast","fastest"]).default("fastest")}).default({maxPriceInGwei:300,speed:"fastest"}),gasless:$.union([$.object({openzeppelin:$.object({relayerUrl:$.string().url(),relayerForwarderAddress:$.string().default(ee)})}),$.object({biconomy:$.object({apiId:$.string(),apiKey:$.string(),deadlineSeconds:$.number().min(1,"deadlineSeconds cannot be les than 1").default(3600)})})]).optional()}).default({gasSettings:{maxPriceInGwei:300,speed:"fastest"}});var vt=class extends Bo{constructor(t,e){super();let[r,a]=this.getSignerAndProvider(t,e);this.signer=r,this.provider=a;try{this.options=ot.parse(e)}catch(n){console.error("invalid sdk options object passed, falling back to default options",n),this.options=ot.parse({})}}updateSignerOrProvider(t){let[e,r]=this.getSignerAndProvider(t,this.options);this.signer=e,this.provider=r}isReadOnly(){return!pr.isSigner(this.signer)}getSigner(){return this.signer}getProvider(){return this.provider}getSignerOrProvider(){return this.getSigner()||this.getProvider()}getSignerAndProvider(t,e){var n;let r,a;return pr.isSigner(t)&&(r=t,t.provider&&(a=t.provider)),e!=null&&e.readonlySettings&&(a=this.getReadOnlyProvider(e.readonlySettings.rpcUrl,e.readonlySettings.chainId)),a||(No.isProvider(t)?a=t:pr.isSigner(t)||(typeof t=="string"?a=this.getReadOnlyProvider(t,(n=e==null?void 0:e.readonlySettings)==null?void 0:n.chainId):a=ae.getDefaultProvider(t))),a||(a=ae.getDefaultProvider(),console.error("No provider found, using default provider on default chain!")),[r,a]}getReadOnlyProvider(t,e){try{let r=t.match(/^(ws|http)s?:/i);if(r)switch(r[1]){case"http":return new Do(t,e);case"ws":return new Oo(t,e);default:return ae.getDefaultProvider(t)}else return ae.getDefaultProvider(t)}catch{return ae.getDefaultProvider(t)}}};p(vt,"RPCConnectionHandler");var lt;(function(o){o.Transaction="transaction",o.Signature="signature"})(lt||(lt={}));import Ut from"tiny-invariant";import{BigNumber as dr}from"ethers";var la=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],ua=[{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"batchId",type:"uint256"}],name:"getNonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],Lt={},ma={};async function mr(o,t,e){let r=e.join("|"),a=ma[r],n=Date.now()-a>=2e3;if(!(r in Lt)||n){let i=await o.functions[t](...e);Array.isArray(i)&&i.length>0?Lt[r]=dr.from(i[0]):Lt[r]=dr.from(i),ma[r]=Date.now()}let s=Lt[r];return Lt[r]=dr.from(Lt[r]).add(1),s}p(mr,"getAndIncrementNonce");import{Forwarder__factory as rn}from"@thirdweb-dev/contracts";import{BigNumber as Mo,Contract as hr,ethers as ur}from"ethers";import{ethers as lr}from"ethers";async function oe(o,t,e,r){var i,c;let a=o==null?void 0:o.provider;if(!a)throw new Error("missing provider");let n=lr.utils._TypedDataEncoder.getPayload(t,e,r),s="";if((i=a==null?void 0:a.provider)!=null&&i.isWalletConnect)s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else try{s=await o._signTypedData(t,e,r)}catch(d){if((c=d==null?void 0:d.message)!=null&&c.includes("Method eth_signTypedData_v4 not supported"))s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else throw d}return{payload:n,signature:lr.utils.joinSignature(lr.utils.splitSignature(s))}}p(oe,"signTypedDataInternal");var Lo=[{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],Uo=[{constant:!0,inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],name:"getDomainSeperator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}],$o=[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNonce",outputs:[{internalType:"uint256",name:"nonce",type:"uint256"}],stateMutability:"view",type:"function"}];async function Vo(o,t){let e=new hr(t,$o,o);try{return await e.nonces(await o.getAddress())}catch{return await e.getNonce(await o.getAddress())}}p(Vo,"getSignerNonce");async function Go(o,t){let e=new hr(t,Uo,o);try{return await e.DOMAIN_SEPARATOR()}catch{return await e.getDomainSeperator()}}p(Go,"getDomainSeperator");async function Ho(o,t){return new hr(t,Lo,o).name()}p(Ho,"getTokenName");async function jo(o,t){let e=await Go(o,t.verifyingContract),r={name:t.name,version:t.version,verifyingContract:t.verifyingContract,salt:ur.utils.hexZeroPad(Mo.from(t.chainId).toHexString(),32)};return ur.utils._TypedDataEncoder.hashDomain(r)===e?r:t}p(jo,"getChainDomainSeperator");async function ha(o,t,e,r,a,n,s){let i=await jo(o,{name:await Ho(o,t),version:"1",chainId:await o.getChainId(),verifyingContract:t});s=s!=null?s:(await Vo(o,t)).toString(),n=n!=null?n:ur.constants.MaxUint256;let c={owner:e,spender:r,value:a,nonce:s,deadline:n},d={Permit:[{name:"owner",type:"address"},{name:"spender",type:"address"},{name:"value",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]},{signature:m}=await oe(o,i,d,c);return{message:c,signature:m}}p(ha,"signEIP2612Permit");import{ethers as fr}from"ethers";function zo(o){switch(o){case f.Polygon:return"https://gasstation-mainnet.matic.network/v2";case f.Mumbai:return"https://gasstation-mumbai.matic.today/v2"}}p(zo,"getGasStationUrl");var Zo=fr.utils.parseUnits("31","gwei"),Ko=fr.utils.parseUnits("1","gwei");function qo(o){switch(o){case f.Polygon:return Zo;case f.Mumbai:return Ko}}p(qo,"getDefaultGasFee");async function fa(o){let t=zo(o);try{let r=(await(await fetch(t)).json()).standard.maxPriorityFee;if(r>0){let a=parseFloat(r).toFixed(9);return fr.utils.parseUnits(a,"gwei")}}catch(e){console.error("failed to fetch gas",e)}return qo(o)}p(fa,"getPolygonGasPriorityFee");import{ethers as ne}from"ethers";var se={[f.Polygon]:{vrfCoordinator:"0x3d2341ADb2D31f1c5530cDC622016af293177AE0",linkTokenAddress:"0xb0897686c545045aFc77CF20eC7A532E3120E0F1",keyHash:"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",fees:ne.utils.parseEther("0.0001")},[f.Mumbai]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:ne.utils.parseEther("0.0001")},[f.Rinkeby]:{vrfCoordinator:"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",linkTokenAddress:"0x01be23585060835e02b77ef475b0cc51aa1e0709",keyHash:"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",fees:ne.utils.parseEther("0.1")},[f.Mainnet]:{vrfCoordinator:"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",linkTokenAddress:"0x514910771AF9Ca656af840dff83E8264EcF986CA",keyHash:"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",fees:ne.utils.parseEther("2")},[f.Hardhat]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:ne.utils.parseEther("0.0001")}};import{arrayify as ga}from"ethers/lib/utils";var Ft=ga("0x80ac58cd"),It=ga("0xd9b67a26");var ya="https://gateway.ipfscdn.io/ipfs/",wa="https://upload.nftlabs.co",Ca="https://api.pinata.cloud/pinning/pinFileToIPFS";import Jo from"merkletreejs";import Qo from"keccak256";import{BigNumber as Yo,ethers as Xo}from"ethers";async function Ta(o,t){let e=Mt.parse(o),r=e.map(d=>d.address);if(new Set(r).size<r.length)throw new Se;let n=e.map(d=>tn(d.address,d.maxClaimable)),s=new Jo(n,Qo,{sort:!0}),i=Yt.parse({merkleRoot:s.getHexRoot(),claims:e.map((d,m)=>{let h=s.getHexProof(n[m]);return{address:d.address,maxClaimable:d.maxClaimable,proof:h}})}),c=await t.uploadMetadata(i);return{merkleRoot:s.getHexRoot(),snapshotUri:c,snapshot:i}}p(Ta,"createSnapshot");function tn(o,t){return Xo.utils.solidityKeccak256(["address","uint256"],[o,Yo.from(t)])}p(tn,"hashLeafNode");var C=class extends vt{constructor(t,e,r,a){super(t,a);this.writeContract=new en(e,r,this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.writeContract=this.writeContract.connect(this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}async getChainID(){let t=this.getProvider(),{chainId:e}=await t.getNetwork();return e}async getSignerAddress(){let t=this.getSigner();if(!t)throw new Error("This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.");return await t.getAddress()}callStatic(){return this.writeContract.callStatic}async getCallOverrides(){let t=await this.getProvider().getFeeData();if(t.maxFeePerGas&&t.maxPriorityFeePerGas){let r=await this.getChainID(),a=await this.getProvider().getBlock("latest"),n=a&&a.baseFeePerGas?a.baseFeePerGas:ut.utils.parseUnits("1","gwei"),s;r===f.Mumbai||r===f.Polygon?s=await fa(r):s=it.from(t.maxPriorityFeePerGas);let i=this.getPreferredPriorityFee(s);return{maxFeePerGas:n.mul(2).add(i),maxPriorityFeePerGas:i}}else return{gasPrice:await this.getPreferredGasPrice()}}getPreferredPriorityFee(t){let e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a;switch(e){case"standard":a=it.from(0);break;case"fast":a=t.div(100).mul(5);break;case"fastest":a=t.div(100).mul(10);break}let n=t.add(a),s=ut.utils.parseUnits(r.toString(),"gwei"),i=ut.utils.parseUnits("2.5","gwei");return n.gt(s)&&(n=s),n.lt(i)&&(n=i),n}async getPreferredGasPrice(){let t=await this.getProvider().getGasPrice(),e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a=t,n;switch(e){case"standard":n=it.from(1);break;case"fast":n=t.div(100).mul(5);break;case"fastest":n=t.div(100).mul(10);break}a=a.add(n);let s=ut.utils.parseUnits(r.toString(),"gwei");return a.gt(s)&&(a=s),a}emitTransactionEvent(t,e){this.emit(lt.Transaction,{status:t,transactionHash:e})}async multiCall(t){return this.sendTransaction("multicall",[t])}async estimateGas(t,e){return this.writeContract.estimateGas[t](...e)}async sendTransaction(t,e,r){var a;if(r||(r=await this.getCallOverrides()),((a=this.options)==null?void 0:a.gasless)&&("openzeppelin"in this.options.gasless||"biconomy"in this.options.gasless)){let n=this.getProvider(),s=await this.sendGaslessTransaction(t,e,r);this.emitTransactionEvent("submitted",s);let i=await n.waitForTransaction(s);return this.emitTransactionEvent("completed",s),i}else{let n=await this.sendTransactionByFunction(t,e,r);this.emitTransactionEvent("submitted",n.hash);let s=n.wait();return this.emitTransactionEvent("completed",n.hash),s}}async sendTransactionByFunction(t,e,r){let a=this.writeContract.functions[t];if(!a)throw new Error("invalid function");try{return await a(...e,r)}catch(n){let s=await this.getProvider().getNetwork(),i=await this.getSignerAddress(),c=await this.readContract.address;throw await Gr(n,s,i,c)}}async sendGaslessTransaction(t,e=[],r){let a=this.getSigner();Ut(a,"Cannot execute gasless transaction without valid signer");let n=await this.getChainID(),s=await this.getSignerAddress(),i=this.writeContract.address,c=(r==null?void 0:r.value)||0;if(it.from(c).gt(0))throw new Error("Cannot send native token value with gasless transaction");let d=this.writeContract.interface.encodeFunctionData(t,e),m=await this.writeContract.estimateGas[t](...e),h=m.mul(2);m.lt(25e3)&&(h=it.from(5e5));let y={from:s,to:i,data:d,chainId:n,gasLimit:h,functionName:t.toString(),functionArgs:e,callOverrides:r};return await this.defaultGaslessSendFunction(y)}async signTypedData(t,e,r,a){this.emit(lt.Signature,{status:"submitted",message:a,signature:""});let{signature:n}=await oe(t,e,r,a);return this.emit(lt.Signature,{status:"completed",message:a,signature:n}),n}parseLogs(t,e){if(!e||e.length===0)return[];let r=this.writeContract.interface.getEventTopic(t);return e.filter(n=>n.topics.indexOf(r)>=0).map(n=>this.writeContract.interface.parseLog(n))}async defaultGaslessSendFunction(t){return this.options.gasless&&"biconomy"in this.options.gasless?this.biconomySendFunction(t):this.defenderSendFunction(t)}async biconomySendFunction(t){var h,y;Ut(this.options.gasless&&"biconomy"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();Ut(e&&r,"signer and provider must be set");let a=new ut.Contract(re(t.chainId,"biconomyForwarder"),ua,r),n=0,s=await mr(a,"getNonce",[t.from,n]),i={from:t.from,to:t.to,token:ut.constants.AddressZero,txGas:t.gasLimit.toNumber(),tokenGasPrice:"0",batchId:n,batchNonce:s.toNumber(),deadline:Math.floor(Date.now()/1e3+(((h=this.options)==null?void 0:h.gasless)&&"biconomy"in this.options.gasless&&((y=this.options.gasless.biconomy)==null?void 0:y.deadlineSeconds)||3600)),data:t.data},c=ut.utils.arrayify(ut.utils.solidityKeccak256(["address","address","address","uint256","uint256","uint256","uint256","uint256","bytes32"],[i.from,i.to,i.token,i.txGas,i.tokenGasPrice,i.batchId,i.batchNonce,i.deadline,ut.utils.keccak256(i.data)]));this.emit(lt.Signature,{status:"submitted",message:c,signature:""});let d=await e.signMessage(c);this.emit(lt.Signature,{status:"completed",message:c,signature:d});let m=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:JSON.stringify({from:t.from,apiId:this.options.gasless.biconomy.apiId,params:[i,d],to:t.to,gasLimit:t.gasLimit.toHexString()}),headers:{"x-api-key":this.options.gasless.biconomy.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(m.ok){let T=await m.json();if(!T.txHash)throw new Error(`relay transaction failed: ${T.log}`);return T.txHash}throw new Error(`relay transaction failed with status: ${m.status} (${m.statusText})`)}async defenderSendFunction(t){Ut(this.options.gasless&&"openzeppelin"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();Ut(e,"provider is not set"),Ut(r,"provider is not set");let a=this.options.gasless.openzeppelin.relayerForwarderAddress,n=rn.connect(a,r),s=await mr(n,"getNonce",[t.from]),i={name:"GSNv2 Forwarder",version:"0.0.1",chainId:t.chainId,verifyingContract:a},c={ForwardRequest:la},d={from:t.from,to:t.to,value:it.from(0).toString(),gas:it.from(t.gasLimit).toString(),nonce:it.from(s).toString(),data:t.data},m;if(this.emit(lt.Signature,{status:"submitted",message:d,signature:""}),t.functionName==="approve"&&t.functionArgs.length===2){let Q=t.functionArgs[0],ct=t.functionArgs[1],{message:nt,signature:et}=await ha(e,this.writeContract.address,t.from,Q,ct),{r:ho,s:fo,v:go}=ut.utils.splitSignature(et);d={to:this.readContract.address,owner:nt.owner,spender:nt.spender,value:it.from(nt.value).toString(),nonce:it.from(nt.nonce).toString(),deadline:it.from(nt.deadline).toString(),r:ho,s:fo,v:go},m=et}else{let{signature:Q}=await oe(e,i,c,d);m=Q}let h="forward";d!=null&&d.owner&&(h="permit");let y=JSON.stringify({request:d,signature:m,type:h});this.emit(lt.Signature,{status:"completed",message:d,signature:m});let T=await fetch(this.options.gasless.openzeppelin.relayerUrl,{method:"POST",body:y});if(T.ok){let Q=await T.json();return JSON.parse(Q.result).txHash}throw new Error(`relay transaction failed with status: ${T.status} (${T.statusText})`)}};p(C,"ContractWrapper");import{BigNumber as gr,ethers as on}from"ethers";import{IERC20__factory as Sa,TokenERC20__factory as nn}from"@thirdweb-dev/contracts";import{formatUnits as sn}from"ethers/lib/utils";function ht(o){return o.toLowerCase()===At||o.toLowerCase()===an}p(ht,"isNativeToken");async function X(o,t,e){let r=await xt(o,e);return on.utils.parseUnits(bt.parse(t),r.decimals)}p(X,"normalizePriceValue");async function xt(o,t){if(ht(t)){let e=await o.getNetwork(),r=Jr(e.chainId);return{name:r.name,symbol:r.symbol,decimals:r.decimals}}else{let e=nn.connect(t,o),[r,a,n]=await Promise.all([e.name(),e.symbol(),e.decimals()]);return{name:r,symbol:a,decimals:n}}}p(xt,"fetchCurrencyMetadata");async function V(o,t,e){let r=await xt(o,t);return k(S({},r),{value:gr.from(e),displayValue:sn(e,r.decimals)})}p(V,"fetchCurrencyValue");async function Ct(o,t,e,r){if(ht(e))r.value=t;else{let a=o.getSigner(),n=o.getProvider(),s=new C(a||n,e,Sa.abi,{}),i=await o.getSignerAddress(),c=o.readContract.address,d=await s.readContract.allowance(i,c);return d.lt(t)&&await s.sendTransaction("approve",[c,t.sub(d)]),r}}p(Ct,"setErc20Allowance");async function ba(o,t,e,r){let a=o.getSigner(),n=o.getProvider(),s=new C(a||n,t,Sa.abi,{}),i=await o.getSignerAddress(),c=o.readContract.address,d=await s.readContract.allowance(i,c),m=gr.from(e).mul(gr.from(r));d.lt(m)&&await s.sendTransaction("approve",[c,d.add(m)])}p(ba,"approveErc20Allowance");import ln from"deep-equal";var N;(function(o){o[o.Direct=0]="Direct",o[o.Auction=1]="Auction"})(N||(N={}));var Aa;(function(o){o[o.Pending=0]="Pending",o[o.Active=1]="Active",o[o.Canceled=2]="Canceled",o[o.Defeated=3]="Defeated",o[o.Succeeded=4]="Succeeded",o[o.Queued=5]="Queued",o[o.Expired=6]="Expired",o[o.Executed=7]="Executed"})(Aa||(Aa={}));var $t;(function(o){o[o.Against=0]="Against",o[o.For=1]="For",o[o.Abstain=2]="Abstain"})($t||($t={}));var A;(function(o){o.NotEnoughSupply="There is not enough supply to claim.",o.AddressNotAllowed="This address is not on the allowlist.",o.WaitBeforeNextClaimTransaction="Not enough time since last claim transaction. Please wait.",o.AlreadyClaimed="You have already claimed the token.",o.NotEnoughTokens="There are not enough tokens in the wallet to pay for the claim.",o.NoActiveClaimPhase="There is no active claim phase at the moment. Please check back in later.",o.NoClaimConditionSet="There is no claim condition set.",o.Unknown="No claim conditions found."})(A||(A={}));import{BigNumber as Vt}from"ethers";import{hexZeroPad as cn}from"@ethersproject/bytes";import{AddressZero as Wa}from"@ethersproject/constants";async function Pe(o,t,e,r,a,n=[cn([0],32)]){let s=await r.getSignerAddress(),i=0;try{if(!t.merkleRootHash.toString().startsWith(Wa)){let h=await yr(t.merkleRootHash.toString(),e,a),y=h&&h.find(T=>T.address.toLowerCase()===s.toLowerCase());if(y===void 0)throw new Error("No claim found for this address");n=y.proof,i=y.maxClaimable}}catch(h){if((h==null?void 0:h.message)==="No claim found for this address")throw h;console.warn("failed to check claim condition merkle root hash, continuing anyways",h)}let c=await r.getCallOverrides()||{},d=t.price,m=t.currencyAddress;return d.gt(0)&&(ht(m)?c.value=Vt.from(d).mul(o):await ba(r,m,d,o)),{overrides:c,proofs:n,maxQuantityPerTransaction:Vt.from(i),price:d,currencyAddress:m}}p(Pe,"prepareClaim");async function yr(o,t,e){let r=t[o],a;if(r){let n=await e.get(r),s=Yt.parse(n);o===s.merkleRoot&&(a=s.claims)}return a}p(yr,"fetchSnapshot");function Re(o,t,e){if(o>=e.length)throw Error(`Index out of bounds - got index: ${o} with ${e.length} conditions`);let r=te.parse(S(k(S({},e[o]),{price:e[o].price.toString()}),t)),a=nr.parse(r);return e.map((n,s)=>{let i;return s===o?i=a:i=n,k(S({},i),{price:i.price.toString()})})}p(Re,"updateExsitingClaimConditions");async function Fe(o,t,e,r){let a=await yr(t,e,r);if(a===void 0)return{proof:[],maxClaimable:0};let n=a.find(s=>s.address.toLowerCase()===(o==null?void 0:o.toLowerCase()));return n===void 0?{proof:[],maxClaimable:0}:{proof:n.proof,maxClaimable:n.maxClaimable}}p(Fe,"getClaimerProofs");async function Ie(o,t,e){let r=[],a=await Promise.all(o.map(async i=>{if(i.snapshot){let c=await Ta(Mt.parse(i.snapshot),e);r.push(c),i.merkleRootHash=c.merkleRoot}return i})),n=Xr.parse(a),s=(await Promise.all(n.map(i=>pn(i,t)))).sort((i,c)=>{let d=Vt.from(i.startTimestamp),m=Vt.from(c.startTimestamp);return d.eq(m)?0:d.gt(m)?1:-1});return{snapshotInfos:r,sortedConditions:s}}p(Ie,"processClaimConditionInputs");async function pn(o,t){let e=o.currencyAddress===Wa?At:o.currencyAddress;return{startTimestamp:o.startTime,maxClaimableSupply:o.maxQuantity,supplyClaimed:0,quantityLimitPerTransaction:o.quantityLimitPerTransaction,waitTimeInSecondsBetweenClaims:o.waitInSeconds,pricePerToken:await X(t,o.price,e),currency:e,merkleRoot:o.merkleRootHash}}p(pn,"convertToContractModel");async function Gt(o,t,e,r){let a=await V(t,o.currency,o.pricePerToken),n=await yr(o.merkleRoot,e,r);return nr.parse({startTime:o.startTimestamp,maxQuantity:o.maxClaimableSupply.toString(),currentMintSupply:o.supplyClaimed.toString(),availableSupply:Vt.from(o.maxClaimableSupply).sub(o.supplyClaimed).toString(),quantityLimitPerTransaction:o.quantityLimitPerTransaction.toString(),waitInSeconds:o.waitTimeInSecondsBetweenClaims.toString(),price:Vt.from(o.pricePerToken),currency:o.currency,currencyAddress:o.currency,currencyMetadata:a,merkleRootHash:o.merkleRoot,snapshot:n})}p(Gt,"transformResultToClaimCondition");var _e=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(){let t=await this.contractWrapper.readContract.getActiveClaimConditionId(),e=await this.contractWrapper.readContract.getClaimConditionById(t),r=await this.metadata.get();return await Gt(e,this.contractWrapper.getProvider(),r.merkle,this.storage)}async getAll(){let t=await this.contractWrapper.readContract.claimCondition(),e=t.currentStartId.toNumber(),r=t.count.toNumber(),a=[];for(let s=e;s<e+r;s++)a.push(await this.contractWrapper.readContract.getClaimConditionById(s));let n=await this.metadata.get();return Promise.all(a.map(s=>Gt(s,this.contractWrapper.getProvider(),n.merkle,this.storage)))}async canClaim(t,e){return e===void 0&&(e=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e)).length===0}async getClaimIneligibilityReasons(t,e){let r=[],a,n;if(e===void 0)throw new Error("addressToCheck is required");try{[a,n]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(),this.getActive()])}catch(d){return d.message.includes("no public mint condition.")?(r.push(A.NoClaimConditionSet),r):d.message.includes("no active mint condition.")?(r.push(A.NoActiveClaimPhase),r):(r.push(A.Unknown),r)}if(wr.from(n.availableSupply).lt(t)&&r.push(A.NotEnoughSupply),mn.utils.stripZeros(n.merkleRootHash).length>0){let d=n.merkleRootHash.toString(),m=await this.metadata.get(),h=await Fe(e,d,m.merkle,this.storage);try{let[y]=await this.contractWrapper.readContract.verifyClaimMerkleProof(a,e,t,h.proof,h.maxClaimable);if(!y)return r.push(A.AddressNotAllowed),r}catch{return r.push(A.AddressNotAllowed),r}}let[,i]=await this.contractWrapper.readContract.getClaimTimestamp(a,e);if(wr.from(Date.now()).div(1e3).lt(i)&&(wr.from(n.waitInSeconds).eq(i)?(await this.contractWrapper.readContract.balanceOf(e)).gte(1)&&r.push(A.AlreadyClaimed):r.push(A.WaitBeforeNextClaimTransaction)),n.price.gt(0)){let d=n.price.mul(t),m=this.contractWrapper.getProvider();ht(n.currencyAddress)?(await m.getBalance(e)).lt(d)&&r.push(A.NotEnoughTokens):(await new C(m,n.currencyAddress,dn.abi,{}).readContract.balanceOf(e)).lt(d)&&r.push(A.NotEnoughTokens)}return r}async set(t,e=!1){let{snapshotInfos:r,sortedConditions:a}=await Ie(t,this.contractWrapper.getProvider(),this.storage),n={};r.forEach(c=>{n[c.merkleRoot]=c.snapshotUri});let s=await this.metadata.get(),i=[];if(!ln(s.merkle,n)){let c=this.metadata.parseInputMetadata(k(S({},s),{merkle:n})),d=await this.metadata._parseAndUploadMetadata(c);i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[d]))}return i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[a,e])),{receipt:await this.contractWrapper.multiCall(i)}}async update(t,e){let r=await this.getAll(),a=Re(t,e,r);return await this.set(a)}};p(_e,"DropErc721ClaimConditions");import{IERC20__factory as un}from"@thirdweb-dev/contracts";import{BigNumber as Cr,ethers as hn}from"ethers";import fn from"deep-equal";var De=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(t){let e=await this.contractWrapper.readContract.getActiveClaimConditionId(t),r=await this.contractWrapper.readContract.getClaimConditionById(t,e),a=await this.metadata.get();return await Gt(r,this.contractWrapper.getProvider(),a.merkle,this.storage)}async getAll(t){let e=await this.contractWrapper.readContract.claimCondition(t),r=e.currentStartId.toNumber(),a=e.count.toNumber(),n=[];for(let i=r;i<r+a;i++)n.push(await this.contractWrapper.readContract.getClaimConditionById(t,i));let s=await this.metadata.get();return Promise.all(n.map(i=>Gt(i,this.contractWrapper.getProvider(),s.merkle,this.storage)))}async canClaim(t,e,r){return r===void 0&&(r=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e,r)).length===0}async getClaimIneligibilityReasons(t,e,r){let a=[],n,s;if(r===void 0)throw new Error("addressToCheck is required");try{[n,s]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(t),this.getActive(t)])}catch(m){return m.message.includes("no active mint condition.")?(a.push(A.NoActiveClaimPhase),a):(a.push(A.Unknown),a)}if(Cr.from(s.availableSupply).lt(e)&&a.push(A.NotEnoughSupply),hn.utils.stripZeros(s.merkleRootHash).length>0){let m=s.merkleRootHash.toString(),h=await this.metadata.get(),y=await Fe(r,m,h.merkle,this.storage);try{let[T]=await this.contractWrapper.readContract.verifyClaimMerkleProof(n,r,t,e,y.proof,y.maxClaimable);if(!T)return a.push(A.AddressNotAllowed),a}catch{return a.push(A.AddressNotAllowed),a}}let[,c]=await this.contractWrapper.readContract.getClaimTimestamp(t,n,r);if(Cr.from(Date.now()).div(1e3).lt(c)&&(Cr.from(s.waitInSeconds).eq(c)?(await this.contractWrapper.readContract.balanceOf(r,t)).gte(1)&&a.push(A.AlreadyClaimed):a.push(A.WaitBeforeNextClaimTransaction)),s.price.gt(0)){let m=s.price.mul(e),h=this.contractWrapper.getProvider();ht(s.currencyAddress)?(await h.getBalance(r)).lt(m)&&a.push(A.NotEnoughTokens):(await new C(h,s.currencyAddress,un.abi,{}).readContract.balanceOf(r)).lt(m)&&a.push(A.NotEnoughTokens)}return a}async set(t,e,r=!1){let{snapshotInfos:a,sortedConditions:n}=await Ie(e,this.contractWrapper.getProvider(),this.storage),s={};a.forEach(d=>{s[d.merkleRoot]=d.snapshotUri});let i=await this.metadata.get(),c=[];for(let d of Object.keys(i.merkle))s[d]=i.merkle[d];if(!fn(i.merkle,s)){let d=this.metadata.parseInputMetadata(k(S({},i),{merkle:s})),m=await this.metadata._parseAndUploadMetadata(d);c.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[m]))}return c.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[t,n,r])),{receipt:await this.contractWrapper.multiCall(c)}}async update(t,e,r){let a=await this.getAll(t),n=Re(e,r,a);return await this.set(t,n)}};p(De,"DropErc1155ClaimConditions");import{BigNumber as Ht,ethers as ie}from"ethers";import{AddressZero as gn}from"@ethersproject/constants";var Ne=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=ot.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ot.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(){return await xt(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.readContract.balanceOf(t))}async totalSupply(){return await this.getValue(await this.contractWrapper.readContract.totalSupply())}async allowance(t){return await this.allowanceOf(await this.contractWrapper.getSignerAddress(),t)}async allowanceOf(t,e){return await this.getValue(await this.contractWrapper.readContract.allowance(t,e))}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(R("transfer"),gn)}async transfer(t,e){let r=ie.utils.parseUnits(Ht.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transfer",[t,r])}}async transferFrom(t,e,r){let a=ie.utils.parseUnits(Ht.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transferFrom",[t,e,a])}}async setAllowance(t,e){let r=ie.utils.parseUnits(Ht.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("approve",[t,r])}}async transferBatch(t){let e=t.map(r=>this.contractWrapper.readContract.interface.encodeFunctionData("transfer",[r.toAddress,r.amount]));await this.contractWrapper.multiCall(e)}async burn(t){let e=ie.utils.parseUnits(Ht.from(t).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burn",[e])}}async burnFrom(t,e){let r=ie.utils.parseUnits(Ht.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burnFrom",[t,r])}}async getValue(t){return await V(this.contractWrapper.getProvider(),this.getAddress(),Ht.from(t))}};p(Ne,"Erc20");import{BigNumber as va}from"ethers";import{AddressZero as xa}from"@ethersproject/constants";var Oe=100;import{BigNumber as yn}from"ethers";import{ERC165__factory as wn,TokenERC1155__factory as Cn,TokenERC721__factory as Tn}from"@thirdweb-dev/contracts";async function _t(o,t,e){let r=await e.get(t);return xe.parse(S({id:yn.from(o),uri:t},r))}p(_t,"fetchTokenMetadata");async function Et(o,t,e,r){let a,n=wn.connect(o,t),s=await n.supportsInterface(Ft),i=await n.supportsInterface(It);if(s)a=await Tn.connect(o,t).tokenURI(e);else if(i)a=await Cn.connect(o,t).uri(e);else throw Error("Contract must implement ERC 1155 or ERC 721.");if(!a)throw new pt;return _t(e,a,r)}p(Et,"fetchTokenMetadataForContract");var jt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=ot.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ot.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.ownerOf(t).catch(()=>xa),this.getTokenMetadata(t)]);return{owner:e,metadata:r}}async getAll(t){let e=va.from((t==null?void 0:t.start)||0).toNumber(),r=va.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.balanceOf(e),a=Array.from(Array(r.toNumber()).keys()),n=await Promise.all(a.map(s=>this.contractWrapper.readContract.tokenOfOwnerByIndex(e,s)));return await Promise.all(n.map(s=>this.get(s.toString())))}async ownerOf(t){return await this.contractWrapper.readContract.ownerOf(t)}async totalSupply(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async balanceOf(t){return await this.contractWrapper.readContract.balanceOf(t)}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(R("transfer"),xa)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom(address,address,uint256)",[r,t,e])}}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[t])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);if(!e)throw new pt;return _t(t,e,this.storage)}};p(jt,"Erc721");import{BigNumber as br}from"ethers";import{z as Tr}from"zod";var Sr=Tr.object({supply:b,metadata:xe}),Fp=Sr.extend({owner:Tr.string(),quantityOwned:b}),Ip=Tr.object({supply:st,metadata:U});import{AddressZero as Sn}from"@ethersproject/constants";var Ea;(function(o){o[o.None=0]="None",o[o.ERC20=1]="ERC20",o[o.ERC721=2]="ERC721"})(Ea||(Ea={}));var zt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=ot.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ot.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalSupply(t).catch(()=>br.from(0)),this.getTokenMetadata(t)]);return Sr.parse({supply:e,metadata:r})}async getAll(t){let e=br.from((t==null?void 0:t.start)||0).toNumber(),r=br.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenIdToMint(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async s=>{let i=await this.get(s.tokenId.toString());return k(S({},i),{owner:e,quantityOwned:s.balance})}))}async totalSupply(t){return await this.contractWrapper.readContract.totalSupply(t)}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(R("transfer"),Sn)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e,r,a=[0]){let n=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[n,t,e,r,a])}}async burn(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("burn",[r,t,e])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.uri(t);if(!e)throw new pt;return _t(t,e,this.storage)}};p(zt,"Erc1155");import{BigNumber as bn}from"ethers";import An from"tiny-invariant";var Be=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await Ct(this.contractWrapper,bn.from(a.price),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(s=>Ee.parse(s)),{metadataUris:r}=await this.storage.uploadMetadataBatch(e.map(s=>s.metadata)),a=await this.contractWrapper.getChainID(),n=this.contractWrapper.getSigner();return An(n,"No signer available"),await Promise.all(e.map(async(s,i)=>{let c=r[i],d=ir.parse(k(S({},s),{uri:c})),m=await this.contractWrapper.signTypedData(n,{name:"TokenERC721",version:"1",chainId:a,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:ca},await this.mapPayloadToContractStruct(d));return{payload:d,signature:m.toString()}}))}async mapPayloadToContractStruct(t){let e=await X(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:e,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};p(Be,"Erc721SignatureMinting");import Wn from"tiny-invariant";var Me=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await Ct(this.contractWrapper,a.pricePerToken.mul(a.quantity),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(s=>sa.parse(s)),{metadataUris:r}=await this.storage.uploadMetadataBatch(e.map(s=>s.metadata)),a=await this.contractWrapper.getChainID(),n=this.contractWrapper.getSigner();return Wn(n,"No signer available"),await Promise.all(e.map(async(s,i)=>{let c=r[i],d=ia.parse(k(S({},s),{uri:c})),m=await this.contractWrapper.signTypedData(n,{name:"TokenERC1155",version:"1",chainId:a,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:pa},await this.mapPayloadToContractStruct(d));return{payload:d,signature:m.toString()}}))}async mapPayloadToContractStruct(t){let e=await X(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:e,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};p(Me,"Erc1155SignatureMinting");import{ERC165__factory as vn,IERC1155__factory as xn,IERC721__factory as En}from"@thirdweb-dev/contracts";import{BigNumber as Tt}from"ethers";import{AddressZero as _a}from"@ethersproject/constants";import{BigNumber as Ar}from"ethers";import{ERC165__factory as ka,IERC1155__factory as Pa,IERC721__factory as Ra}from"@thirdweb-dev/contracts";import Dt from"tiny-invariant";async function Fa(o,t,e,r,a){try{let n=ka.connect(e,o),s=await n.supportsInterface(Ft),i=await n.supportsInterface(It);if(s){let c=Ra.connect(e,o);return await c.isApprovedForAll(a,t)?!0:(await c.getApproved(r)).toLowerCase()===t.toLowerCase()}else return i?await Pa.connect(e,o).isApprovedForAll(a,t):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}catch(n){return console.error("Failed to check if token is approved",n),!1}}p(Fa,"isTokenApprovedForMarketplace");async function Le(o,t,e,r,a){let n=ka.connect(e,o),s=await n.supportsInterface(Ft),i=await n.supportsInterface(It);if(s){let c=new C(o,e,Ra.abi,{});await c.readContract.isApprovedForAll(a,t)||(await c.readContract.getApproved(r)).toLowerCase()===t.toLowerCase()||await c.sendTransaction("setApprovalForAll",[t,!0])}else if(i){let c=new C(o,e,Pa.abi,{});await c.readContract.isApprovedForAll(a,t)||await c.sendTransaction("setApprovalForAll",[t,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}p(Le,"handleTokenApproval");function Ue(o){switch(Dt(o.assetContractAddress!==void 0&&o.assetContractAddress!==null,"Asset contract address is required"),Dt(o.buyoutPricePerToken!==void 0&&o.buyoutPricePerToken!==null,"Buyout price is required"),Dt(o.listingDurationInSeconds!==void 0&&o.listingDurationInSeconds!==null,"Listing duration is required"),Dt(o.startTimeInSeconds!==void 0&&o.startTimeInSeconds!==null,"Start time is required"),Dt(o.tokenId!==void 0&&o.tokenId!==null,"Token ID is required"),Dt(o.quantity!==void 0&&o.quantity!==null,"Quantity is required"),o.type){case"NewAuctionListing":Dt(o.reservePricePerToken!==void 0&&o.reservePricePerToken!==null,"Reserve price is required")}}p(Ue,"validateNewListingParam");async function $e(o,t,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await V(o,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:t}}p($e,"mapOffer");function Ia(o,t,e){return e=Ar.from(e),o=Ar.from(o),t=Ar.from(t),t.sub(o).mul(ar).div(o).gte(e)}p(Ia,"isWinningBid");import kn from"tiny-invariant";import{isAddress as Pn}from"ethers/lib/utils";var Ve=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===_a)throw new ft(this.getAddress(),t.toString());if(e.listingType!==N.Direct)throw new Nt(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(e)}async getActiveOffer(t,e){await this.validateListing(Tt.from(t)),kn(Pn(e),"Address must be a valid address");let r=await this.contractWrapper.readContract.offers(t,e);if(r.offeror!==_a)return await $e(this.contractWrapper.getProvider(),Tt.from(t),r)}async createListing(t){Ue(t),await Le(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await X(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:N.Direct,quantityToList:t.quantity,reservePricePerToken:e,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",r==null?void 0:r.logs)[0].args.listingId,receipt:r}}async makeOffer(t,e,r,a){if(ht(r))throw new Error("You must use the wrapped native token address when making an offer with a native token");let n=await X(this.contractWrapper.getProvider(),a,r);try{await this.getListing(t)}catch(d){throw console.error("Failed to get listing, err =",d),new Error(`Error getting the listing with id ${t}`)}let s=Tt.from(e),i=Tt.from(n).mul(s),c=await this.contractWrapper.getCallOverrides()||{};return await Ct(this.contractWrapper,i,r,c),{receipt:await this.contractWrapper.sendTransaction("offer",[t,e,r,n],c)}}async acceptOffer(t,e){await this.validateListing(Tt.from(t));let r=await this.contractWrapper.readContract.offers(t,e);return{receipt:await this.contractWrapper.sendTransaction("acceptOffer",[t,e,r.currency,r.pricePerToken])}}async buyoutListing(t,e,r){let a=await this.validateListing(Tt.from(t));if(!await this.isStillValidListing(a,e))throw new Error("The asset on this listing has been moved from the lister's wallet, this listing is now invalid");let s=r||await this.contractWrapper.getSignerAddress(),i=Tt.from(e),c=Tt.from(a.buyoutPrice).mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await Ct(this.contractWrapper,c,a.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("buy",[t,s,i,a.currencyContractAddress,c],d)}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInSeconds,t.secondsUntilEnd])}}async cancelListing(t){return{receipt:await this.contractWrapper.sendTransaction("cancelDirectListing",[t])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:Tt.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await V(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await Et(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:N.Direct}}async isStillValidListing(t,e){if(!await Fa(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return!1;let a=this.contractWrapper.getProvider(),n=vn.connect(t.assetContractAddress,a),s=await n.supportsInterface(Ft),i=await n.supportsInterface(It);return s?(await En.connect(t.assetContractAddress,a).ownerOf(t.tokenId)).toLowerCase()===t.sellerAddress.toLowerCase():i?(await xn.connect(t.assetContractAddress,a).balanceOf(t.sellerAddress,t.tokenId)).gte(e||t.quantity):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}};p(Ve,"MarketplaceDirect");import{BigNumber as J,ethers as Rn}from"ethers";import{AddressZero as Da}from"@ethersproject/constants";import Na from"tiny-invariant";var Ge=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.listingId.toString()!==t.toString())throw new ft(this.getAddress(),t.toString());if(e.listingType!==N.Auction)throw new Nt(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(e)}async getWinningBid(t){await this.validateListing(J.from(t));let e=await this.contractWrapper.readContract.winningBid(t);if(e.offeror!==Da)return await $e(this.contractWrapper.getProvider(),J.from(t),e)}async getWinner(t){let r=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find(a=>a.args.listingId.eq(J.from(t)));if(!r)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return r.args.winningBidder}async createListing(t){Ue(t),await Le(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await X(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await X(this.contractWrapper.getProvider(),t.reservePricePerToken,t.currencyContractAddress),a=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:N.Auction,quantityToList:t.quantity,reservePricePerToken:r,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs)[0].args.listingId,receipt:a}}async buyoutListing(t){let e=await this.validateListing(J.from(t)),r=await xt(this.contractWrapper.getProvider(),e.currencyContractAddress);return this.makeBid(t,Rn.utils.formatUnits(e.buyoutPrice,r.decimals))}async makeBid(t,e){let r=await this.validateListing(J.from(t)),a=await X(this.contractWrapper.getProvider(),e,r.currencyContractAddress),n=await this.contractWrapper.readContract.bidBufferBps(),s=await this.getWinningBid(t);if(s){let m=Ia(s.pricePerToken,a,n);Na(m,"Bid price is too low based on the current winning bid and the bid buffer")}else{let m=a,h=J.from(r.reservePrice);Na(m.gte(h),"Bid price is too low based on reserve price")}let i=J.from(r.quantity),c=a.mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await Ct(this.contractWrapper,c,r.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("offer",[t,r.quantity,r.currencyContractAddress,a],d)}}async cancelListing(t){let e=await this.validateListing(J.from(t)),r=J.from(Math.floor(Date.now()/1e3)),a=J.from(e.startTimeInEpochSeconds),n=await this.contractWrapper.readContract.winningBid(t);if(r.gt(a)&&n.offeror!==Da)throw new be(t.toString());return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[J.from(t),await this.contractWrapper.getSignerAddress()])}}async closeListing(t,e){e||(e=await this.contractWrapper.getSignerAddress());let r=await this.validateListing(J.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[J.from(t),e])}}catch(a){throw a.message.includes("cannot close auction before it has ended")?new Ae(t.toString(),r.endTimeInEpochSeconds.toString()):a}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:J.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await V(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await Et(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await V(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:J.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:N.Auction}}};p(Ge,"MarketplaceAuction");import{TWRegistry__factory as Fn}from"@thirdweb-dev/contracts";import{isAddress as In}from"ethers/lib/utils";import{AddressZero as _n}from"@ethersproject/constants";var He=class extends C{constructor(t,e,r){super(e,t,Fn.abi,r)}async getContractAddresses(t){return(await this.readContract.getAll(t)).filter(e=>In(e)&&e.toLowerCase()!==_n)}};p(He,"ContractRegistry");import{TWFactory__factory as Cs}from"@thirdweb-dev/contracts";import{BigNumber as mo,ethers as Ts}from"ethers";var Oa=x.merge(_).merge(q),Dn=I.merge(_).merge(q),Nn=Oa.merge(K).merge(dt).merge(D),Ba={deploy:Nn,output:Dn,input:Oa};import{TokenERC721__factory as On}from"@thirdweb-dev/contracts";var ce=class extends jt{constructor(t,e,r,a={},n=new C(t,e,ce.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,ce.schema,this.storage),this.roles=new Z(this.contractWrapper,ce.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new mt(this.contractWrapper),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.signature=new Be(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await this.storage.uploadMetadata(U.parse(e)),a=await this.contractWrapper.sendTransaction("mintTo",[t,r]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let{metadataUris:r}=await this.storage.uploadMetadataBatch(e.map(i=>U.parse(i))),a=r.map(i=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,i])),n=await this.contractWrapper.multiCall(a),s=this.contractWrapper.parseLogs("TokensMinted",n.logs);if(s.length===0||s.length<e.length)throw new Error("TokenMinted event not found, minting failed");return s.map(i=>{let c=i.args.tokenIdMinted;return{id:c,receipt:n,data:()=>this.get(c)}})}addTransferEventListener(t){this.contractWrapper.readContract.on("Transfer",(e,r,a)=>{t(e,r,a)})}removeTransferEventListeners(){this.contractWrapper.readContract.removeAllListeners("Transfer")}},G=ce;p(G,"NFTCollection"),g(G,"contractType","nft-collection"),g(G,"contractRoles",["admin","minter","transfer"]),g(G,"contractFactory",On),g(G,"schema",Ba);import{DropERC1155__factory as Ln}from"@thirdweb-dev/contracts";import{hexZeroPad as Wr}from"ethers/lib/utils";var Ma=x.merge(_).merge(Bt).merge(q),Bn=I.merge(_).merge(Bt).merge(q),Mn=Ma.merge(K).merge(dt).merge(D),La={deploy:Mn,output:Bn,input:Ma};import{ethers as Ua}from"ethers";var E=class{constructor(t){this.contractWrapper=t}async gasCostOf(t,e){let r=await this.contractWrapper.getPreferredGasPrice(),a=await this.contractWrapper.estimateGas(t,e);return Ua.utils.formatEther(a.mul(r))}async currentGasPriceInGwei(){let t=await this.contractWrapper.getProvider().getGasPrice();return Ua.utils.formatUnits(t,"gwei")}};p(E,"GasCostEstimator");var pe=class extends zt{constructor(t,e,r,a={},n=new C(t,e,pe.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,pe.schema,this.storage),this.roles=new Z(this.contractWrapper,pe.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new mt(this.contractWrapper),this.claimConditions=new De(this.contractWrapper,this.metadata,this.storage),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}async createBatch(t){var d;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(m=>U.parse(m)),e.toNumber(),this.contractWrapper.readContract.address,await((d=this.contractWrapper.getSigner())==null?void 0:d.getAddress())),a=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,`${r.baseUri.endsWith("/")?r.baseUri:`${r.baseUri}/`}`]),n=this.contractWrapper.parseLogs("TokensLazyMinted",a==null?void 0:a.logs),s=n[0].args.startTokenId,i=n[0].args.endTokenId,c=[];for(let m=s;m.lte(i);m=m.add(1))c.push({id:m,receipt:a,data:()=>this.getTokenMetadata(m)});return c}async claimTo(t,e,r,a=[Wr([0],32)]){let n=await this.prepareClaim(e,r,a);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,e,r,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async claim(t,e,r=[Wr([0],32)]){let a=await this.contractWrapper.getSignerAddress();return this.claimTo(a,t,e,r)}async prepareClaim(t,e,r=[Wr([0],32)]){return Pe(e,await this.claimConditions.getActive(t),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,r)}},P=pe;p(P,"EditionDrop"),g(P,"contractType","edition-drop"),g(P,"contractRoles",["admin","minter","transfer"]),g(P,"contractFactory",Ln),g(P,"schema",La);import{TokenERC1155__factory as Vn}from"@thirdweb-dev/contracts";var $a=x.merge(_),Un=I.merge(_),$n=$a.merge(K).merge(dt).merge(D),Va={deploy:$n,output:Un,input:$a};import{BigNumber as Gn,ethers as Ga}from"ethers";var de=class extends zt{constructor(t,e,r,a={},n=new C(t,e,de.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,de.schema,this.storage),this.roles=new Z(this.contractWrapper,de.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new mt(this.contractWrapper),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.signature=new Me(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await this.storage.uploadMetadata(U.parse(e.metadata)),a=await this.contractWrapper.sendTransaction("mintTo",[t,Ga.constants.MaxUint256,r,e.supply]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintAdditionalSupply(t,e){return this.mintAdditionalSupplyTo(await this.contractWrapper.getSignerAddress(),t,e)}async mintAdditionalSupplyTo(t,e,r){let a=await this.getTokenMetadata(e),n=await this.contractWrapper.sendTransaction("mintTo",[t,e,a.uri,r]);return{id:Gn.from(e),receipt:n,data:()=>this.get(e)}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let r=e.map(d=>d.metadata),a=e.map(d=>d.supply),{metadataUris:n}=await this.storage.uploadMetadataBatch(r.map(d=>U.parse(d))),s=n.map((d,m)=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,Ga.constants.MaxUint256,d,a[m]])),i=await this.contractWrapper.multiCall(s),c=this.contractWrapper.parseLogs("TokensMinted",i.logs);if(c.length===0||c.length<r.length)throw new Error("TokenMinted event not found, minting failed");return c.map(d=>{let m=d.args.tokenIdMinted;return{id:m,receipt:i,data:()=>this.get(m)}})}},H=de;p(H,"Edition"),g(H,"contractType","edition"),g(H,"contractRoles",["admin","minter","transfer"]),g(H,"contractFactory",Vn),g(H,"schema",Va);var Ha=x.merge(q),Hn=I.merge(q),jn=Ha.merge(K).merge(dt).merge(D),ja={deploy:jn,output:Hn,input:Ha};import{TokenERC20__factory as zn}from"@thirdweb-dev/contracts";import{BigNumber as za,ethers as Za}from"ethers";var me=class extends Ne{constructor(t,e,r,a={},n=new C(t,e,me.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,me.schema,this.storage),this.roles=new Z(this.contractWrapper,me.contractRoles),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=Za.utils.parseUnits(za.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("mintTo",[t,r])}}async mintBatchTo(t){let e=[];for(let r of t){let a=Za.utils.parseUnits(za.from(r.amount).toString(),await this.contractWrapper.readContract.decimals());e.push(this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[r.toAddress,a]))}return{receipt:await this.contractWrapper.multiCall(e)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}},O=me;p(O,"Token"),g(O,"contractType","token"),g(O,"contractRoles",["admin","minter","transfer"]),g(O,"contractFactory",zn),g(O,"schema",ja);import{IERC20__factory as Jn,VoteERC20__factory as Qn}from"@thirdweb-dev/contracts";import{z as tt}from"zod";var Ka=tt.object({voting_delay_in_blocks:tt.number().min(0).default(0),voting_period_in_blocks:tt.number().min(1).default(1),voting_token_address:rt,voting_quorum_fraction:jr.default(0),proposal_token_threshold:st.default(1)}),Zn=Ka.extend({proposal_token_threshold:b}),qa=x.merge(Ka),Kn=I.merge(Zn),qn=qa.merge(D),Ja={deploy:qn,output:Kn,input:qa},Hm=tt.object({proposalId:b,proposer:tt.string(),targets:tt.array(tt.string()),values:tt.array(b),signatures:tt.array(tt.string()),calldatas:tt.array(tt.string()),startBlock:b,endBlock:b,description:tt.string()});import{BigNumber as Qa,ethers as vr}from"ethers";import Yn from"deep-equal";var je=class{constructor(t,e,r,a={},n=new C(t,e,je.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new v(this.contractWrapper,je.schema,this.storage),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let r=(await this.getAll()).filter(a=>Yn(Qa.from(a.proposalId),Qa.from(t)));if(r.length===0)throw new Error("proposal not found");return r[0]}async getAll(){return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async t=>({proposalId:t.proposalId,proposer:t.proposer,description:t.description,startBlock:t.startBlock,endBlock:t.endBlock,state:await this.contractWrapper.readContract.state(t.proposalId),votes:await this.getProposalVotes(t.proposalId),executions:t[3].map((e,r)=>({toAddress:t.targets[r],nativeTokenValue:e,transactionData:t.calldatas[r]}))})))}async getProposalVotes(t){let e=await this.contractWrapper.readContract.proposalVotes(t);return[{type:$t.Against,label:"Against",count:e.againstVotes},{type:$t.For,label:"For",count:e.forVotes},{type:$t.Abstain,label:"Abstain",count:e.abstainVotes}]}async hasVoted(t,e){return e||(e=await this.contractWrapper.getSignerAddress()),this.contractWrapper.readContract.hasVoted(t,e)}async canExecute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=vr.utils.id(e.description);try{return await this.contractWrapper.callStatic().execute(r,a,n,s),!0}catch{return!1}}async balance(){let t=await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);return{name:"",symbol:"",decimals:18,value:t,displayValue:vr.utils.formatUnits(t,18)}}async balanceOfToken(t){let e=Jn.connect(t,this.contractWrapper.getProvider());return await V(this.contractWrapper.getProvider(),t,await e.balanceOf(this.contractWrapper.readContract.address))}async ensureExists(t){try{await this.contractWrapper.readContract.state(t)}catch{throw Error(`Proposal ${t} not found`)}}async settings(){let[t,e,r,a,n]=await Promise.all([this.contractWrapper.readContract.votingDelay(),this.contractWrapper.readContract.votingPeriod(),this.contractWrapper.readContract.token(),this.contractWrapper.readContract.quorumNumerator(),this.contractWrapper.readContract.proposalThreshold()]),s=await xt(this.contractWrapper.getProvider(),r);return{votingDelay:t.toString(),votingPeriod:e.toString(),votingTokenAddress:r,votingTokenMetadata:s,votingQuorumFraction:a.toString(),proposalTokenThreshold:n.toString()}}async propose(t,e){e||(e=[{toAddress:this.contractWrapper.readContract.address,nativeTokenValue:0,transactionData:"0x"}]);let r=e.map(c=>c.toAddress),a=e.map(c=>c.nativeTokenValue),n=e.map(c=>c.transactionData),s=await this.contractWrapper.sendTransaction("propose",[r,a,n,t]);return{id:this.contractWrapper.parseLogs("ProposalCreated",s==null?void 0:s.logs)[0].args.proposalId,receipt:s}}async vote(t,e,r=""){return await this.ensureExists(t),{receipt:await this.contractWrapper.sendTransaction("castVoteWithReason",[t,e,r])}}async execute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=vr.utils.id(e.description);return{receipt:await this.contractWrapper.sendTransaction("execute",[r,a,n,s])}}},j=je;p(j,"Vote"),g(j,"contractType","vote"),g(j,"contractFactory",Qn),g(j,"schema",Ja);import{IERC20__factory as rs,Split__factory as as}from"@thirdweb-dev/contracts";import{BigNumber as to}from"ethers";import{z as Zt}from"zod";var Ya=Zt.object({address:rt,sharesBps:St.gt(0,"Shares must be greater than 0")}),Xn=Ya.extend({address:rt,sharesBps:St}),xr=x.extend({recipients:Zt.array(Ya).default([]).superRefine((o,t)=>{let e={},r=0;for(let a=0;a<o.length;a++){let n=o[a];e[n.address]&&t.addIssue({code:Zt.ZodIssueCode.custom,message:"Duplicate address.",path:[a,"address"]}),e[n.address]=!0,r+=n.sharesBps,r>1e4&&t.addIssue({code:Zt.ZodIssueCode.custom,message:"Total shares cannot go over 100%.",path:[a,"sharesBps"]})}r!==1e4&&t.addIssue({code:Zt.ZodIssueCode.custom,message:`Total shares need to add up to 100%. Total shares are currently ${r/100}%`,path:[]})})}),ts=I.extend({recipients:Zt.array(Xn)}),es=xr.merge(K).merge(xr).merge(D),Xa={deploy:es,output:ts,input:xr};var ze=class{constructor(t,e,r,a={},n=new C(t,e,ze.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new v(this.contractWrapper,ze.schema,this.storage),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAllRecipients(){let t=[],e=to.from(0),r=await this.contractWrapper.readContract.payeeCount();for(;e.lt(r);)try{let a=await this.contractWrapper.readContract.payee(e);t.push(await this.getRecipientSplitPercentage(a)),e=e.add(1)}catch(a){if("method"in a&&a.method.toLowerCase().includes("payee(uint256)"))break;throw a}return t}async balanceOfAllRecipients(){let t=await this.getAllRecipients(),e={};for(let r of t)e[r.address]=await this.balanceOf(r.address);return e}async balanceOfTokenAllRecipients(t){let e=await this.getAllRecipients(),r={};for(let a of e)r[a.address]=await this.balanceOfToken(a.address,t);return r}async balanceOf(t){let e=await this.contractWrapper.readContract.provider.getBalance(this.getAddress()),r=await this.contractWrapper.readContract["totalReleased()"](),a=e.add(r);return this._pendingPayment(t,a,await this.contractWrapper.readContract["released(address)"](t))}async balanceOfToken(t,e){let a=await rs.connect(e,this.contractWrapper.getProvider()).balanceOf(this.getAddress()),n=await this.contractWrapper.readContract["totalReleased(address)"](e),s=a.add(n),i=await this._pendingPayment(t,s,await this.contractWrapper.readContract["released(address,address)"](e,t));return await V(this.contractWrapper.getProvider(),e,i)}async getRecipientSplitPercentage(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalShares(),this.contractWrapper.readContract.shares(t)]);return{address:t,splitPercentage:r.mul(to.from(1e7)).div(e).toNumber()/1e5}}async withdraw(t){return{receipt:await this.contractWrapper.sendTransaction("release(address)",[t])}}async withdrawToken(t,e){return{receipt:await this.contractWrapper.sendTransaction("release(address,address)",[e,t])}}async distribute(){return{receipt:await this.contractWrapper.sendTransaction("distribute()",[])}}async distributeToken(t){return{receipt:await this.contractWrapper.sendTransaction("distribute(address)",[t])}}async _pendingPayment(t,e,r){return e.mul(await this.contractWrapper.readContract.shares(t)).div(await this.contractWrapper.readContract.totalShares()).sub(r)}},z=ze;p(z,"Split"),g(z,"contractType","split"),g(z,"contractFactory",as),g(z,"schema",Xa);import{Marketplace__factory as ss}from"@thirdweb-dev/contracts";var eo=x,os=I,ns=eo.merge(K).merge(D),ro={deploy:ns,output:os,input:eo};import{BigNumber as Kt}from"ethers";import is from"tiny-invariant";import{AddressZero as le}from"@ethersproject/constants";var ue=class{constructor(t,e,r,a={},n=new C(t,e,ue.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new v(this.contractWrapper,ue.schema,this.storage),this.roles=new Z(this.contractWrapper,ue.contractRoles),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.direct=new Ve(this.contractWrapper,this.storage),this.auction=new Ge(this.contractWrapper,this.storage)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===le)throw new ft(this.getAddress(),t.toString());switch(e.listingType){case N.Auction:return await this.auction.mapListing(e);case N.Direct:return await this.direct.mapListing(e);default:throw new Error(`Unknown listing type: ${e.listingType}`)}}async getActiveListings(){return(await this.getAllListingsNoFilter()).filter(e=>e.type===N.Auction&&Kt.from(e.endTimeInEpochSeconds).gt(Kt.from(Math.floor(Date.now()/1e3)))||e.type===N.Direct&&e.quantity>0)}async getAllListings(t){let e=await this.getAllListingsNoFilter();if(t&&(t.seller&&(e=e.filter(r=>{var a;return r.sellerAddress.toString().toLowerCase()===((a=t==null?void 0:t.seller)==null?void 0:a.toString().toLowerCase())})),t.tokenContract&&(t.tokenId?e=e.filter(r=>{var a,n;return r.assetContractAddress.toString().toLowerCase()===((a=t==null?void 0:t.tokenContract)==null?void 0:a.toString().toLowerCase())&&r.tokenId.toString()===((n=t==null?void 0:t.tokenId)==null?void 0:n.toString())}):e=e.filter(r=>{var a;return r.assetContractAddress.toString().toLowerCase()===((a=t==null?void 0:t.tokenContract)==null?void 0:a.toString().toLowerCase())})),t.start!==void 0)){let r=Kt.from(t.start).toNumber();e=e.filter((a,n)=>n>=r),t.count!==void 0&&e.length>t.count&&(e=e.slice(0,Kt.from(t.count).toNumber()))}return e.filter(r=>r!==void 0)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.readContract.hasRole(R("lister"),le)}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getTimeBufferInSeconds(){return this.contractWrapper.readContract.timeBuffer()}async buyoutListing(t,e,r){let a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new ft(this.getAddress(),t.toString());switch(a.listingType){case N.Direct:return is(e!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing(t,e,r);case N.Auction:return await this.auction.buyoutListing(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}async setBidBufferBps(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getTimeBufferInSeconds();await this.contractWrapper.sendTransaction("setAuctionBuffers",[e,Kt.from(t)])}async setTimeBufferInSeconds(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getBidBufferBps();await this.contractWrapper.sendTransaction("setAuctionBuffers",[Kt.from(t),e])}async allowListingFromSpecificAssetOnly(t){let e=[];(await this.roles.get("asset")).includes(le)&&e.push(this.encoder.encode("revokeRole",[R("asset"),le])),e.push(this.encoder.encode("grantRole",[R("asset"),t])),await this.contractWrapper.multiCall(e)}async allowListingFromAnyAsset(){let t=[],e=await this.roles.get("asset");for(let r in e)t.push(this.encoder.encode("revokeRole",[R("asset"),r]));t.push(this.encoder.encode("grantRole",[R("asset"),le])),await this.contractWrapper.multiCall(t)}async getAllListingsNoFilter(){return(await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map(async e=>{let r;try{r=await this.getListing(e)}catch{return}if(r.type===N.Auction)return r;if(!!await this.direct.isStillValidListing(r))return r}))).filter(e=>e!==void 0)}},B=ue;p(B,"Marketplace"),g(B,"contractType","marketplace"),g(B,"contractRoles",["admin","lister","asset"]),g(B,"contractFactory",ss),g(B,"schema",ro);import{IERC1155__factory as ds,IERC20__factory as no,Pack__factory as ms}from"@thirdweb-dev/contracts";var ao=x.merge(_).merge(q),cs=I.merge(_).merge(q),ps=ao.merge(K).merge(D),oo={deploy:ps,output:cs,input:ao};import{BigNumber as ls,ethers as us}from"ethers";var he=class{constructor(t,e,r,a={},n=new C(t,e,he.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new v(this.contractWrapper,he.schema,this.storage),this.roles=new Z(this.contractWrapper,he.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r,a]=await Promise.all([Et(this.getAddress(),this.contractWrapper.getProvider(),t,this.storage),this.contractWrapper.readContract.packs(t),this.contractWrapper.readContract.totalSupply(t).catch(()=>ls.from("0"))]);return{id:t,metadata:e,creator:r.creator,currentSupply:a,openStart:r.openStart.gt(0)?new Date(r.openStart.toNumber()*1e3):null}}async getAll(){let t=(await this.contractWrapper.readContract.nextTokenId()).toNumber();return await Promise.all(Array.from(Array(t).keys()).map(e=>this.get(e.toString())))}async getNFTs(t){let e=await this.contractWrapper.readContract.getPackWithRewards(t);if(!e.source)throw new pt;return(await Promise.all(e.tokenIds.map(a=>Et(e.source,this.contractWrapper.getProvider(),a.toString(),this.storage)))).map((a,n)=>({supply:e.amountsPacked[n],metadata:a}))}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async getLinkBalance(){let t=await this.contractWrapper.getChainID(),e=se[t],r=no.connect(e.linkTokenAddress,this.contractWrapper.getProvider());return await V(this.contractWrapper.getProvider(),e.linkTokenAddress,await r.balanceOf(this.getAddress()))}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenId(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async({tokenId:s,balance:i})=>{let c=await this.get(s.toString());return k(S({},c),{ownedByAddress:i})}))}async open(t){let e=await this.contractWrapper.sendTransaction("openPack",[t]),r=this.contractWrapper.parseLogs("PackOpenRequested",e==null?void 0:e.logs);if(r.length===0)throw new Error("Failed to open pack");let a=r[0],n=a.args.requestId,s=a.args.opener,i=await new Promise(m=>{this.contractWrapper.readContract.once(this.contractWrapper.readContract.filters.PackOpenFulfilled(null,s),(h,y,T,Q,ct)=>{n===T&&m({packId:h,opener:y,requestId:n,rewardContract:Q,rewardIds:ct})})}),{rewardIds:c,rewardContract:d}=i;return c.map(m=>({id:t,receipt:e,data:()=>Et(d,this.contractWrapper.getProvider(),m.toString(),this.storage)}))}async create(t){let e=ds.connect(t.assetContract,this.contractWrapper.getSigner()||this.contractWrapper.getProvider()),r=await this.contractWrapper.getSignerAddress(),a=t.assets.map(y=>y.tokenId),n=t.assets.map(y=>y.amount),s=await this.storage.uploadMetadata(t.metadata),i=us.utils.defaultAbiCoder.encode(["string","uint256","uint256"],[s,t.secondsUntilOpenStart||0,t.rewardsPerOpen||1]),d=await(await e.safeBatchTransferFrom(r,this.getAddress(),a,n,i,await this.contractWrapper.getCallOverrides())).wait(),m=this.contractWrapper.parseLogs("PackAdded",d.logs);if(m.length===0)throw new Error("PackCreated event not found");let h=m[0].args.packId;return{id:h,receipt:d,data:()=>this.get(h.toString())}}async transfer(t,e,r){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[await this.contractWrapper.getSignerAddress(),t,e,r,[0]])}}async transferFrom(t,e,r,a=[0]){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[t,e,r.tokenId,r.amount,a])}}async transferBatchFrom(t,e,r,a=[0]){let n=r.map(i=>i.tokenId),s=r.map(i=>i.amount);return{receipt:await this.contractWrapper.sendTransaction("safeBatchTransferFrom",[t,e,n,s,a])}}async setApproval(t,e=!0){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async depositLink(t){let e=await this.contractWrapper.getChainID(),r=se[e];return{receipt:await(await no.connect(r.linkTokenAddress,this.contractWrapper.getProvider()).transfer(this.getAddress(),t,await this.contractWrapper.getCallOverrides())).wait()}}},M=he;p(M,"Pack"),g(M,"contractType","pack"),g(M,"contractRoles",["admin","minter","pauser","transfer"]),g(M,"contractFactory",ms),g(M,"schema",oo);import{DropERC721__factory as ys}from"@thirdweb-dev/contracts";import{hexZeroPad as kr}from"@ethersproject/bytes";import{BigNumber as fe,ethers as ws}from"ethers";var so=x.merge(_).merge(Bt).merge(q),hs=I.merge(_).merge(Bt).merge(q),fs=so.merge(K).merge(dt).merge(D),io={deploy:fs,output:hs,input:so};import{BigNumber as gs,ethers as Er}from"ethers";var Ze=class{constructor(t,e){this.contractWrapper=t,this.storage=e}async createDelayedRevealBatch(t,e,r){var ct,nt;if(!r)throw new Error("Password is required");let{baseUri:a}=await this.storage.uploadMetadataBatch([U.parse(t)],0,this.contractWrapper.readContract.address,await((ct=this.contractWrapper.getSigner())==null?void 0:ct.getAddress())),n=await this.contractWrapper.readContract.nextTokenIdToMint(),s=await this.storage.uploadMetadataBatch(e.map(et=>U.parse(et)),n.toNumber(),this.contractWrapper.readContract.address,await((nt=this.contractWrapper.getSigner())==null?void 0:nt.getAddress())),i=s.baseUri,c=await this.contractWrapper.readContract.getBaseURICount(),d=await this.contractWrapper.readContract.encryptDecrypt(Er.utils.toUtf8Bytes(i.endsWith("/")?i:`${i}/`),await this.hashDelayRevealPasword(c,r)),m=await this.contractWrapper.sendTransaction("lazyMint",[s.metadataUris.length,a.endsWith("/")?a:`${a}/`,d]),h=this.contractWrapper.parseLogs("TokensLazyMinted",m==null?void 0:m.logs),y=h[0].args.startTokenId,T=h[0].args.endTokenId,Q=[];for(let et=y;et.lte(T);et=et.add(1))Q.push({id:et,receipt:m});return Q}async reveal(t,e){if(!e)throw new Error("Password is required");let r=await this.hashDelayRevealPasword(t,e);try{let a=await this.contractWrapper.callStatic().reveal(t,r);if(!a.includes("://")||!a.endsWith("/"))throw new Error("invalid password")}catch{throw new Error("invalid password")}return{receipt:await this.contractWrapper.sendTransaction("reveal",[t,r])}}async getBatchesToReveal(){let t=await this.contractWrapper.readContract.getBaseURICount();if(t.isZero())return[];let e=Array.from(Array(t.toNumber()).keys()),r=await Promise.all(e.map(c=>this.contractWrapper.readContract.baseURIIndices(c))),a=r.slice(0,r.length-1),n=await Promise.all(Array.from([0,...a]).map(c=>this.contractWrapper.readContract.tokenURI(c))),s=await Promise.all(Array.from([0,...a]).map(c=>this.getNftMetadata(c.toString()))),i=await Promise.all(Array.from([...r]).map(c=>this.contractWrapper.readContract.encryptedBaseURI(c)));return n.map((c,d)=>({batchId:gs.from(d),batchUri:c,placeholderMetadata:s[d]})).filter((c,d)=>Er.utils.hexDataLength(i[d])>0)}async hashDelayRevealPasword(t,e){let r=await this.contractWrapper.getChainID(),a=this.contractWrapper.readContract.address;return Er.utils.solidityKeccak256(["string","uint256","uint256","address"],[e,r,t,a])}async getNftMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);return _t(t,e,this.storage)}};p(Ze,"DelayedReveal");var ge=class extends jt{constructor(t,e,r,a={},n=new C(t,e,ge.contractFactory.abi,a)){super(n,r,a);this.metadata=new v(this.contractWrapper,ge.schema,this.storage),this.roles=new Z(this.contractWrapper,ge.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new mt(this.contractWrapper),this.claimConditions=new _e(this.contractWrapper,this.metadata,this.storage),this.encoder=new W(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.revealer=new Ze(this.contractWrapper,this.storage)}async getAllClaimed(t){let e=fe.from((t==null?void 0:t.start)||0).toNumber(),r=fe.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),e+r);return await Promise.all(Array.from(Array(a).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){let e=fe.from((t==null?void 0:t.start)||0).toNumber(),r=fe.from((t==null?void 0:t.count)||100).toNumber(),a=fe.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),e+r)),n=await this.contractWrapper.readContract.nextTokenIdToClaim();return await Promise.all(Array.from(Array(a.sub(n).toNumber()).keys()).map(s=>this.getTokenMetadata(n.add(s).toString())))}async totalClaimedSupply(){return await this.contractWrapper.readContract.nextTokenIdToClaim()}async totalUnclaimedSupply(){return(await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply())}async createBatch(t){var m;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(h=>U.parse(h)),e.toNumber(),this.contractWrapper.readContract.address,await((m=this.contractWrapper.getSigner())==null?void 0:m.getAddress())),a=r.baseUri,n=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,a.endsWith("/")?a:`${a}/`,ws.utils.toUtf8Bytes("")]),s=this.contractWrapper.parseLogs("TokensLazyMinted",n==null?void 0:n.logs),i=s[0].args.startTokenId,c=s[0].args.endTokenId,d=[];for(let h=i;h.lte(c);h=h.add(1))d.push({id:h,receipt:n,data:()=>this.getTokenMetadata(h)});return d}async claimTo(t,e,r=[kr([0],32)]){let a=await this.prepareClaim(e,r),n=await this.contractWrapper.sendTransaction("claim",[t,e,a.currencyAddress,a.price,a.proofs,a.maxQuantityPerTransaction],a.overrides),i=this.contractWrapper.parseLogs("TokensClaimed",n==null?void 0:n.logs)[0].args.startTokenId,c=i.add(e),d=[];for(let m=i;m.lt(c);m=m.add(1))d.push({id:m,receipt:n,data:()=>this.get(m)});return d}async claim(t,e=[kr([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,e)}async prepareClaim(t,e=[kr([0],32)]){return Pe(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},L=ge;p(L,"NFTDrop"),g(L,"contractType","nft-drop"),g(L,"contractRoles",["admin","minter","transfer"]),g(L,"contractFactory",ys),g(L,"schema",io);var Ke={[L.contractType]:L,[G.contractType]:G,[P.contractType]:P,[H.contractType]:H,[O.contractType]:O,[j.contractType]:j,[z.contractType]:z,[B.contractType]:B,[M.contractType]:M},co={[L.contractType]:"DropERC721",[G.contractType]:"TokenERC721",[P.contractType]:"DropERC1155",[H.contractType]:"TokenERC1155",[O.contractType]:"TokenERC20",[j.contractType]:"VoteERC20",[z.contractType]:"Split",[B.contractType]:"Marketplace",[M.contractType]:"Pack"},po={DropERC721:L.contractType,TokenERC721:G.contractType,DropERC1155:P.contractType,TokenERC1155:H.contractType,TokenERC20:O.contractType,VoteERC20:j.contractType,Split:z.contractType,Marketplace:B.contractType,Pack:M.contractType};import{AddressZero as lo}from"@ethersproject/constants";var qe=class extends C{constructor(t,e,r,a){super(e,t,Cs.abi,a);this.storage=r}async deploy(t,e){var y;let r=Ke[t],a=r.schema.deploy.parse(e),n=r.contractFactory,s=await this.storage.uploadMetadata(a,this.readContract.address,await((y=this.getSigner())==null?void 0:y.getAddress())),i=n.getInterface(n.abi).encodeFunctionData("initialize",await this.getDeployArguments(t,a,s)),c=co[t];console.log(`Remote contractName : ${c}`);let d=Ts.utils.formatBytes32String(c);console.log(`Deploying ${t} proxy`);let m=await this.sendTransaction("deployProxy",[d,i]);console.log(`${t} proxy deployed successfully`);let h=this.parseLogs("ProxyDeployed",m.logs);if(h.length<1)throw new Error("No ProxyDeployed event found");return h[0].args.proxy}async getDeployArguments(t,e,r){let a=await this.getDefaultTrustedForwarders();switch(e.trusted_forwarders&&e.trusted_forwarders.length>0&&(a=e.trusted_forwarders),t){case L.contractType:case G.contractType:let n=L.schema.deploy.parse(e);return[await this.getSignerAddress(),n.name,n.symbol,r,a,n.primary_sale_recipient,n.fee_recipient,n.seller_fee_basis_points,n.platform_fee_basis_points,n.platform_fee_recipient];case P.contractType:case H.contractType:let s=P.schema.deploy.parse(e);return[await this.getSignerAddress(),s.name,s.symbol,r,a,s.primary_sale_recipient,s.fee_recipient,s.seller_fee_basis_points,s.platform_fee_basis_points,s.platform_fee_recipient];case O.contractType:let i=O.schema.deploy.parse(e);return[await this.getSignerAddress(),i.name,i.symbol,r,a,i.primary_sale_recipient,i.platform_fee_recipient,i.platform_fee_basis_points];case j.contractType:let c=j.schema.deploy.parse(e);return[c.name,r,a,c.voting_token_address,c.voting_delay_in_blocks,c.voting_period_in_blocks,mo.from(c.proposal_token_threshold),c.voting_quorum_fraction];case z.contractType:let d=z.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,d.recipients.map(T=>T.address),d.recipients.map(T=>mo.from(T.sharesBps))];case B.contractType:let m=B.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,m.platform_fee_recipient,m.platform_fee_basis_points];case M.contractType:let h=M.schema.deploy.parse(e),y=se[await this.getChainID()];return[await this.getSignerAddress(),h.name,h.symbol,r,a,h.fee_recipient,h.seller_fee_basis_points,y.fees,y.keyHash];default:return[]}}async getDefaultTrustedForwarders(){let t=await this.getChainID(),e=qr.find(a=>a===t),r=e?cr[e].biconomyForwarder:lo;return r!==lo?[ee,r]:[ee]}};p(qe,"ContractFactory");var Je=class extends vt{constructor(t,e,r){super(t,e);this.storage=r}async deployNFTCollection(t){return await this.deployContract(G.contractType,t)}async deployNFTDrop(t){return await this.deployContract(L.contractType,t)}async deployEdition(t){return await this.deployContract(H.contractType,t)}async deployEditionDrop(t){let e=P.schema.deploy.parse(t);return await this.deployContract(P.contractType,e)}async deployToken(t){return await this.deployContract(O.contractType,t)}async deployMarketplace(t){return await this.deployContract(B.contractType,t)}async deployPack(t){return await this.deployContract(M.contractType,t)}async deploySplit(t){return await this.deployContract(z.contractType,t)}async deployVote(t){return await this.deployContract(j.contractType,t)}async deployContract(t,e){return await(await this.getFactory()).deploy(t,e)}async getRegistry(){if(this._registry)return this._registry;let t=(await this.getProvider().getNetwork()).chainId,e=re(t,"twRegistry");return this._registry=Promise.resolve(new He(e,this.getProvider(),this.options))}async getFactory(){if(this._factory)return this._factory;let t=(await this.getProvider().getNetwork()).chainId,e=re(t,"twFactory");return this._factory=Promise.resolve(new qe(e,this.getSignerOrProvider(),this.storage,this.options))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){var t,e;(t=this._factory)==null||t.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())}),(e=this._registry)==null||e.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())})}};p(Je,"ContractDeployer");import{ethers as Ss}from"ethers";function Pr(o,t){let e=Object.keys(o);for(let r in e){let a=o[e[r]],n=a instanceof File||a instanceof Buffer;if(typeof a=="object"&&!n){Pr(a,t);continue}!n||(o[e[r]]=`ipfs://${t.splice(0,1)[0]}`)}return o}p(Pr,"replaceFilePropertiesWithHashes");function Qe(o,t,e){let r=Object.keys(o);for(let a in r){let n=o[r[a]];o[r[a]]=Ye(n,t,e),Array.isArray(n)&&(o[r[a]]=n.map(s=>typeof s=="object"?Qe(s,t,e):Ye(s,t,e))),typeof n=="object"&&Qe(n,t,e)}return o}p(Qe,"replaceHashWithGatewayUrl");function Ye(o,t,e){return typeof o=="string"&&o&&o.toLowerCase().includes(t)?o.replace(t,e):o}p(Ye,"resolveGatewayUrl");globalThis.FormData||(globalThis.FormData=Ir("form-data"));var Xe=class{constructor(t=ya){this.gatewayUrl=`${t.replace(/\/$/,"")}/`}async upload(t,e,r){return`${await this.uploadBatch([t],0,e,r)}0`}async uploadBatch(t,e=0,r,a){let{cid:n}=await this.uploadBatchWithCid(t,e,r,a);return`ipfs://${n}/`}async getUploadToken(t){let e={"X-App-Name":`CONSOLE-TS-SDK-${t}`},r=await fetch(`${wa}/grant`,{method:"GET",headers:e});if(!r.ok)throw new Te("Failed to get upload token");return await r.text()}async get(t){let r=await(await this._get(t)).json();return Qe(r,"ipfs://",this.gatewayUrl)}async uploadMetadata(t,e,r){let{metadataUris:a}=await this.uploadMetadataBatch([t],0,e,r);return a[0]}async uploadMetadataBatch(t,e,r,a){let n=(await this.batchUploadProperties(t)).map(m=>JSON.stringify(m)),{cid:s,fileNames:i}=await this.uploadBatchWithCid(n,e,r,a),c=`ipfs://${s}/`,d=i.map(m=>`${c}${m}`);return{baseUri:c,metadataUris:d}}async _get(t){let e=t;t&&(e=Ye(t,"ipfs://",this.gatewayUrl));let r=await fetch(e);if(!r.ok)throw new Error(`Status code (!= 200) =${r.status}`);return r}async batchUploadProperties(t){let e=t.flatMap(i=>this.buildFilePropertiesMap(i,[]));if(e.length===0)return t;let{cid:r,fileNames:a}=await this.uploadBatchWithCid(e),n=[];for(let i of a)n.push(`${r}/${i}`);return await Pr(t,n)}buildFilePropertiesMap(t,e=[]){if(Array.isArray(t))t.forEach(r=>{this.buildFilePropertiesMap(r,e)});else if(t){let r=Object.values(t);for(let a of r)a instanceof File||a instanceof Buffer?e.push(a):typeof a=="object"&&this.buildFilePropertiesMap(a,e)}return e}async uploadBatchWithCid(t,e=0,r,a){let n=await this.getUploadToken(r||""),s={name:`CONSOLE-TS-SDK-${r}`,keyvalues:{sdk:"typescript",contractAddress:r,signerAddress:a}},i=new FormData,c=[];t.forEach((h,y)=>{let T="",Q=h;if(h instanceof File){let nt="";if(h.name){let et=h.name.lastIndexOf(".");et>-1&&(nt=h.name.substring(et))}T=`${y+e}${nt}`}else h instanceof Buffer||typeof h=="string"?T=`${y+e}`:h&&h.name&&(h==null?void 0:h.data)?(Q=h==null?void 0:h.data,T=`${h.name}`):T=`${y+e}`;let ct=`files/${T}`;if(c.indexOf(T)>-1)throw new Ce(T);c.push(T),typeof window>"u"?i.append("file",Q,{filepath:ct}):i.append("file",new Blob([Q]),ct)}),i.append("pinataMetadata",JSON.stringify(s));let d=await fetch(Ca,{method:"POST",headers:{Authorization:`Bearer ${n}`},body:i}),m=await d.json();if(!d.ok)throw console.log(m),new we("Failed to upload files to IPFS");return{cid:m.IpfsHash,fileNames:c}}};p(Xe,"IpfsStorage");import{IThirdwebContract__factory as bs}from"@thirdweb-dev/contracts";var uo=class extends vt{contractCache=new Map;constructor(t,e={},r=new Xe){super(t,e);this.storage=r,this.deployer=new Je(t,e,r)}getNFTDrop(t){return this.getContract(t,L.contractType)}getNFTCollection(t){return this.getContract(t,G.contractType)}getEditionDrop(t){return this.getContract(t,P.contractType)}getEdition(t){return this.getContract(t,H.contractType)}getToken(t){return this.getContract(t,O.contractType)}getVote(t){return this.getContract(t,j.contractType)}getSplit(t){return this.getContract(t,z.contractType)}getMarketplace(t){return this.getContract(t,B.contractType)}getPack(t){return this.getContract(t,M.contractType)}getContract(t,e){if(this.contractCache.has(t))return this.contractCache.get(t);let r=new Ke[e](this.getSignerOrProvider(),t,this.storage,this.options);return this.contractCache.set(t,r),r}async resolveContractType(t){let e=bs.connect(t,this.getSignerOrProvider()),r=Ss.utils.toUtf8String(await e.contractType()).replace(/\x00/g,"");return po[r]}async getContractList(t){let e=await(await this.deployer.getRegistry()).getContractAddresses(t);return(await Promise.all(e.map(async a=>({address:a,contractType:await this.resolveContractType(a).catch(n=>(console.error(`failed to get contract type for address: ${a}`,n),""))})))).map(({address:a,contractType:n})=>({address:a,contractType:n,metadata:()=>this.getContract(a,n).metadata.get()}))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){this.deployer.updateSignerOrProvider(this.getSignerOrProvider());for(let[,t]of this.contractCache)t.onNetworkUpdated(this.getSignerOrProvider())}};p(uo,"ThirdwebSDK");import{z as As}from"zod";var oh=As.object({toAddress:rt,amount:bt});export{Vr as AdminRoleMissingError,Nr as AssetNotFoundError,be as AuctionAlreadyStartedError,Ae as AuctionHasNotEndedError,Ke as CONTRACTS_MAP,cr as CONTRACT_ADDRESSES,f as ChainId,se as ChainlinkVrf,Xr as ClaimConditionInputArray,te as ClaimConditionInputSchema,nr as ClaimConditionOutputSchema,A as ClaimEligibility,I as CommonContractOutputSchema,x as CommonContractSchema,K as CommonPlatformFeeSchema,dt as CommonPrimarySaleSchema,_ as CommonRoyaltySchema,q as CommonSymbolSchema,D as CommonTrustedForwarderSchema,Je as ContractDeployer,W as ContractEncoder,v as ContractMetadata,mt as ContractPrimarySale,Z as ContractRoles,at as ContractRoyalty,xo as CurrencySchema,Qr as CurrencyValueSchema,ya as DEFAULT_IPFS_GATEWAY,Oe as DEFAULT_QUERY_ALL_COUNT,Ze as DelayedReveal,De as DropErc1155ClaimConditions,_e as DropErc721ClaimConditions,Ce as DuplicateFileNameError,Se as DuplicateLeafsError,H as Edition,P as EditionDrop,Ip as EditionMetadataInputSchema,Sr as EditionMetadataOutputSchema,Fp as EditionMetadataWithOwnerOutputSchema,zt as Erc1155,Me as Erc1155SignatureMinting,Ne as Erc20,jt as Erc721,Be as Erc721SignatureMinting,lt as EventType,Te as FetchError,Or as FileNameMissingError,Ur as FunctionDeprecatedError,E as GasCostEstimator,It as InterfaceId_IERC1155,Ft as InterfaceId_IERC721,Dr as InvalidAddressError,Xe as IpfsStorage,ft as ListingNotFoundError,N as ListingType,B as Marketplace,Ge as MarketplaceAuction,Ve as MarketplaceDirect,Bt as MerkleSchema,pa as MintRequest1155,ca as MintRequest721,Mr as MissingOwnerRoleError,ye as MissingRoleError,vo as NATIVE_TOKENS,At as NATIVE_TOKEN_ADDRESS,G as NFTCollection,L as NFTDrop,Br as NotEnoughTokensError,pt as NotFoundError,ee as OZ_DEFENDER_FORWARDER_ADDRESS,ea as OptionalPropertiesInput,ra as OptionalPropertiesOutput,Ca as PINATA_IPFS_URL,M as Pack,ei as PartialClaimConditionInputSchema,Aa as ProposalState,Lr as QuantityAboveLimitError,co as REMOTE_CONTRACT_NAME,po as REMOTE_CONTRACT_TO_CONTRACT_TYPE,$r as RestrictedTransferError,qr as SUPPORTED_CHAIN_IDS,sa as Signature1155PayloadInput,ia as Signature1155PayloadOutput,Ee as SignaturePayloadInput,ir as SignaturePayloadOutput,or as SnapshotAddress,zs as SnapshotInfoSchema,Mt as SnapshotInputSchema,Yt as SnapshotSchema,z as Split,wa as TW_IPFS_SERVER_URL,uo as ThirdwebSDK,O as Token,oh as TokenMintInputSchema,er as TransactionError,Ea as UnderlyingType,we as UploadError,j as Vote,$t as VoteType,Nt as WrongListingTypeError,Gr as convertToTWError,Ta as createSnapshot,re as getContractAddressByChainId,Jr as getNativeTokenByChainId,R as getRoleHash,tn as hashLeafNode};
//# sourceMappingURL=index.mjs.map